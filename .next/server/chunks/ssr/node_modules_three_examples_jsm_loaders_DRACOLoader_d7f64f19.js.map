{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/node_modules/three/examples/jsm/loaders/DRACOLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tColorManagement,\n\tFileLoader,\n\tLoader,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\n/**\n * A loader for the Draco format.\n *\n * [Draco]{@link https://google.github.io/draco/} is an open source library for compressing\n * and decompressing 3D meshes and point clouds. Compressed geometry can be significantly smaller,\n * at the cost of additional decoding time on the client device.\n *\n * Standalone Draco files have a `.drc` extension, and contain vertex positions, normals, colors,\n * and other attributes. Draco files do not contain materials, textures, animation, or node hierarchies â€“\n * to use these features, embed Draco geometry inside of a glTF file. A normal glTF file can be converted\n * to a Draco-compressed glTF file using [glTF-Pipeline]{@link https://github.com/CesiumGS/gltf-pipeline}.\n * When using Draco with glTF, an instance of `DRACOLoader` will be used internally by {@link GLTFLoader}.\n *\n * It is recommended to create one DRACOLoader instance and reuse it to avoid loading and creating\n * multiple decoder instances.\n *\n * `DRACOLoader` will automatically use either the JS or the WASM decoding library, based on\n * browser capabilities.\n *\n * ```js\n * const loader = new DRACOLoader();\n * loader.setDecoderPath( '/examples/jsm/libs/draco/' );\n *\n * const geometry = await dracoLoader.loadAsync( 'models/draco/bunny.drc' );\n * geometry.computeVertexNormals(); // optional\n *\n * dracoLoader.dispose();\n * ```\n *\n * @augments Loader\n * @three_import import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';\n */\nclass DRACOLoader extends Loader {\n\n\t/**\n\t * Constructs a new Draco loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\t/**\n\t * Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.\n\t *\n\t * @param {string} path - The decoder path.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.\n\t *\n\t * @param {{type:('js'|'wasm')}} config - The decoder config.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the maximum number of Web Workers to be used during decoding.\n\t * A lower limit may be preferable if workers are also for other tasks in the application.\n\t *\n\t * @param {number} workerLimit - The worker limit.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded Draco asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given Draco data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw Draco data as an array buffer.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading/parsing process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tparse( buffer, onLoad, onError = ()=>{} ) {\n\n\t\tthis.decodeDracoFile( buffer, onLoad, null, null, SRGBColorSpace, onError ).catch( onError );\n\n\t}\n\n\t//\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes, vertexColorSpace = LinearSRGBColorSpace, onError = () => {} ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs,\n\t\t\tvertexColorSpace: vertexColorSpace,\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback ).catch( onError );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst result = geometryData.attributes[ i ];\n\t\t\tconst name = result.name;\n\t\t\tconst array = result.array;\n\t\t\tconst itemSize = result.itemSize;\n\n\t\t\tconst attribute = new BufferAttribute( array, itemSize );\n\n\t\t\tif ( name === 'color' ) {\n\n\t\t\t\tthis._assignVertexColorSpace( attribute, result.vertexColorSpace );\n\n\t\t\t\tattribute.normalized = ( array instanceof Float32Array ) === false;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( name, attribute );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_assignVertexColorSpace( attribute, inputColorSpace ) {\n\n\t\t// While .drc files do not specify colorspace, the only 'official' tooling\n\t\t// is PLY and OBJ converters, which use sRGB. We'll assume sRGB when a .drc\n\t\t// file is passed into .load() or .parse(). GLTFLoader uses internal APIs\n\t\t// to decode geometry, and vertex colors are already Linear-sRGB in there.\n\n\t\tif ( inputColorSpace !== SRGBColorSpace ) return;\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t_color.fromBufferAttribute( attribute, i );\n\t\t\tColorManagement.colorSpaceToWorking( _color, SRGBColorSpace );\n\t\t\tattribute.setXYZ( i, _color.r, _color.g, _color.b );\n\n\t\t}\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\tif ( this.workerSourceURL !== '' ) {\n\n\t\t\tURL.revokeObjectURL( this.workerSourceURL );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, new Int8Array( buffer ), taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, array, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( array );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeArrayToMesh( array, array.byteLength, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeArrayToPointCloud( array, array.byteLength, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tconst attributeResult = decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute );\n\n\t\t\tif ( attributeName === 'color' ) {\n\n\t\t\t\tattributeResult.vertexColorSpace = taskConfig.vertexColorSpace;\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( attributeResult );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}
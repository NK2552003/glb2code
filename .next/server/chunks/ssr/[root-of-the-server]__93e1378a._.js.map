{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/gltf2code2.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\nimport { OrbitControls, Environment, useGLTF } from '@react-three/drei';\nimport { Download, Upload, Eye, Code, Loader2, AlertCircle } from 'lucide-react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport type { GroupProps } from '@react-three/fiber';\n\n// Component to display the GLB model in the preview\nfunction ModelPreview({ url, displayMode, autoRotate }: { \n  url: string; \n  displayMode: string; \n  autoRotate: boolean \n}) {\n  const gltf = useLoader(GLTFLoader, url);\n  const meshRef = useRef<THREE.Group>(null);\n  useFrame((state) => {\n    if (meshRef.current && autoRotate) {\n      meshRef.current.rotation.y = state.clock.getElapsedTime() * 0.5;\n    }\n  });\n  \n  // Apply material overrides based on display mode\n  React.useEffect(() => {\n    if (gltf.scene) {\n      gltf.scene.traverse((child) => {\n        if (child.isMesh) {\n          const originalMaterial = child.material;\n          switch (displayMode) {\n            case 'wireframe':\n              if (Array.isArray(originalMaterial)) {\n                child.material = originalMaterial.map(mat => {\n                  const newMat = mat.clone();\n                  newMat.wireframe = true;\n                  newMat.transparent = true;\n                  newMat.opacity = 0.8;\n                  return newMat;\n                });\n              } else {\n                const newMat = originalMaterial.clone();\n                newMat.wireframe = true;\n                newMat.transparent = true;\n                newMat.opacity = 0.8;\n                child.material = newMat;\n              }\n              break;\n            case 'points':\n              child.material = new THREE.PointsMaterial({\n                color: 0x00ff00,\n                size: 0.01,\n                sizeAttenuation: true\n              });\n              break;\n            case 'normals':\n              child.material = new THREE.MeshNormalMaterial();\n              break;\n            case 'depth':\n              child.material = new THREE.MeshDepthMaterial();\n              break;\n            case 'solid':\n              child.material = new THREE.MeshStandardMaterial({\n                color: 0x888888,\n                metalness: 0.1,\n                roughness: 0.8\n              });\n              break;\n            default:\n              // Keep original materials for 'original' mode\n              break;\n          }\n        }\n      });\n    }\n  }, [gltf.scene, displayMode]);\n  \n  return (\n    <primitive \n      ref={meshRef} \n      object={gltf.scene} \n      scale={[1, 1, 1]}\n      position={[0, 0, 0]}\n    />\n  );\n}\n\n// Helper function to generate material code\nfunction generateMaterialCode(key: string, material: THREE.Material) {\n  let materialType = 'MeshStandardMaterial';\n  let properties: string[] = [];\n  \n  // Determine material type\n  if (material instanceof THREE.MeshBasicMaterial) materialType = 'MeshBasicMaterial';\n  else if (material instanceof THREE.MeshPhongMaterial) materialType = 'MeshPhongMaterial';\n  else if (material instanceof THREE.MeshLambertMaterial) materialType = 'MeshLambertMaterial';\n  else if (material instanceof THREE.MeshNormalMaterial) materialType = 'MeshNormalMaterial';\n  else if (material instanceof THREE.MeshDepthMaterial) materialType = 'MeshDepthMaterial';\n  else if (material instanceof THREE.MeshMatcapMaterial) materialType = 'MeshMatcapMaterial';\n  else if (material instanceof THREE.MeshToonMaterial) materialType = 'MeshToonMaterial';\n  else if (material instanceof THREE.MeshPhysicalMaterial) materialType = 'MeshPhysicalMaterial';\n  else if (material instanceof THREE.MeshStandardMaterial) materialType = 'MeshStandardMaterial';\n  else if (material instanceof THREE.ShaderMaterial) materialType = 'ShaderMaterial';\n  \n  // Extract properties\n  properties.push(`color: new THREE.Color(${material.color.r}, ${material.color.g}, ${material.color.b})`);\n  \n  if ('roughness' in material) properties.push(`roughness: ${(material as any).roughness}`);\n  if ('metalness' in material) properties.push(`metalness: ${(material as any).metalness}`);\n  if ('opacity' in material) properties.push(`opacity: ${(material as any).opacity}`);\n  if ('transparent' in material) properties.push(`transparent: ${(material as any).transparent}`);\n  if ('emissive' in material) {\n    const emissive = (material as any).emissive;\n    properties.push(`emissive: new THREE.Color(${emissive.r}, ${emissive.g}, ${emissive.b})`);\n  }\n  if ('emissiveIntensity' in material) properties.push(`emissiveIntensity: ${(material as any).emissiveIntensity}`);\n  if ('shininess' in material) properties.push(`shininess: ${(material as any).shininess}`);\n  if ('wireframe' in material) properties.push(`wireframe: ${(material as any).wireframe}`);\n  \n  return `map.set('${key}', new THREE.${materialType}({\n    ${properties.join(',\\n    ')}\n  }));`;\n}\n\n// Helper function to generate geometry code\nfunction generateGeometryCode(mesh: any) {\n  const attributes = [\n    `// Position data\n    const positions = new Float32Array(${JSON.stringify(mesh.geometry.positions)});\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));`\n  ];\n  \n  if (mesh.geometry.normals) {\n    attributes.push(`// Normal data\n    const normals = new Float32Array(${JSON.stringify(mesh.geometry.normals)});\n    geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));`);\n  }\n  \n  if (mesh.geometry.uvs) {\n    attributes.push(`// UV data\n    const uvs = new Float32Array(${JSON.stringify(mesh.geometry.uvs)});\n    geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));`);\n  }\n  \n  let indexCode = '';\n  if (mesh.geometry.indices) {\n    indexCode = `// Index data\n    const indices = new Uint16Array(${JSON.stringify(mesh.geometry.indices)});\n    geometry.setIndex(new THREE.BufferAttribute(indices, 1));`;\n  }\n  \n  return `map.set('${mesh.name}', (() => {\n    const geometry = new THREE.BufferGeometry();\n    ${attributes.join('\\n    ')}\n    ${indexCode}\n    return geometry;\n  })());`;\n}\n\n// Function to generate transpiled component (embeds all geometry data)\nfunction generateTranspiledComponent(fileName: string, componentName: string, gltfData: any) {\n  if (!gltfData) return '// Error: GLTF data not available for transpilation';\n  \n  const { scene } = gltfData;\n  const meshes: any[] = [];\n  const uniqueMaterials = new Map<string, THREE.Material>();\n  \n  // Extract all meshes from the scene\n  scene.traverse((object: THREE.Object3D) => {\n    if (object.isMesh) {\n      // Process geometry\n      const geometry = object.geometry;\n      const positionArray = geometry.attributes.position.array;\n      \n      // Get or create material key\n      const materialKey = Array.isArray(object.material) \n        ? object.material.map((m: THREE.Material) => m.uuid).join('|') \n        : object.material.uuid;\n      \n      // Store unique materials\n      if (!uniqueMaterials.has(materialKey)) {\n        uniqueMaterials.set(materialKey, object.material);\n      }\n      \n      meshes.push({\n        name: object.name || `mesh_${meshes.length}`,\n        geometry: {\n          positions: Array.from(positionArray),\n          normals: geometry.attributes.normal ? Array.from(geometry.attributes.normal.array) : null,\n          uvs: geometry.attributes.uv ? Array.from(geometry.attributes.uv.array) : null,\n          indices: geometry.index ? Array.from(geometry.index.array) : null\n        },\n        materialKey\n      });\n    }\n  });\n  \n  // Generate material code\n  const materialsCode = Array.from(uniqueMaterials.entries()).map(([key, material]) => {\n    return generateMaterialCode(key, material);\n  }).join(',\\n');\n  \n  // Generate geometry code\n  const geometriesCode = meshes.map(mesh => {\n    return generateGeometryCode(mesh);\n  }).join(',\\n');\n  \n  // Generate JSX structure\n  const jsxStructure = meshes.map(mesh => \n    `      <mesh geometry={geometries.get('${mesh.name}')} material={materials.get('${mesh.materialKey}')} />`\n  ).join('\\n');\n  \n  return `import React, { useMemo } from 'react';\nimport * as THREE from 'three';\nimport { GroupProps } from '@react-three/fiber';\n\n// Generated with gltfjsx-like transpilation\nexport default function ${componentName}(props: GroupProps) {\n  // Create materials\n  const materials = useMemo(() => {\n    const map = new Map();\n    ${materialsCode}\n    return map;\n  }, []);\n  \n  // Create geometries\n  const geometries = useMemo(() => {\n    const map = new Map();\n    ${geometriesCode}\n    return map;\n  }, []);\n  \n  return (\n    <group {...props} dispose={null}>\n${jsxStructure}\n    </group>\n  );\n}`;\n}\n\n// Function to generate R3F component code\nfunction generateR3FComponent(fileName: string, componentName: string, options = {}) {\n  const { wireframe, displayMode, autoRotate } = options;\n  let materialOverride = '';\n  let rotationCode = '';\n  if (wireframe || displayMode === 'wireframe') {\n    materialOverride = `\n  // Apply wireframe material override\n  React.useEffect(() => {\n    if (nodes.Scene) {\n      nodes.Scene.traverse((child) => {\n        if (child.isMesh) {\n          if (Array.isArray(child.material)) {\n            child.material = child.material.map(mat => ({\n              ...mat,\n              wireframe: true,\n              transparent: true,\n              opacity: 0.8\n            }));\n          } else {\n            child.material = {\n              ...child.material,\n              wireframe: true,\n              transparent: true,\n              opacity: 0.8\n            }\n          }\n        }\n      })\n    }\n  }, [nodes])`;\n  }\n  if (displayMode === 'normals') {\n    materialOverride = `\n  // Apply normal material override\n  React.useEffect(() => {\n    if (nodes.Scene) {\n      nodes.Scene.traverse((child) => {\n        if (child.isMesh) {\n          child.material = new THREE.MeshNormalMaterial()\n        }\n      })\n    }\n  }, [nodes])`;\n  }\n  if (displayMode === 'solid') {\n    materialOverride = `\n  // Apply solid material override\n  React.useEffect(() => {\n    if (nodes.Scene) {\n      nodes.Scene.traverse((child) => {\n        if (child.isMesh) {\n          child.material = new THREE.MeshStandardMaterial({\n            color: 0x888888,\n            metalness: 0.1,\n            roughness: 0.8\n          })\n        }\n      })\n    }\n  }, [nodes])`;\n  }\n  if (autoRotate) {\n    rotationCode = `\n  const meshRef = useRef<THREE.Group>(null)\n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y = state.clock.getElapsedTime() * 0.5\n    }\n  })`;\n  }\n  \n  const imports = `import React, { useRef${materialOverride || rotationCode ? ', useEffect' : ''}${rotationCode ? ', useFrame' : ''} } from 'react'\nimport { useGLTF${rotationCode ? ', useFrame' : ''} } from '@react-three/drei'\nimport { GroupProps } from '@react-three/fiber'${materialOverride.includes('THREE.') ? `\nimport * as THREE from 'three'` : ''}`;\n  \n  return `${imports}\nexport default function ${componentName}(props: GroupProps) {\n  const { nodes, materials } = useGLTF('/${fileName}')${rotationCode}${materialOverride}\n  return (\n    <group {...props} dispose={null}${autoRotate ? ' ref={meshRef}' : ''}>\n      <primitive object={nodes.Scene || nodes[Object.keys(nodes)[0]]} />\n    </group>\n  )\n}\nuseGLTF.preload('/${fileName}')`;\n}\n\nfunction convertJsxToTsx(jsxCode: string, componentName: string) {\n  // Add TypeScript imports\n  let tsxCode = jsxCode.replace(\n    `import React from 'react'`,\n    `import React from 'react'\nimport { GroupProps } from '@react-three/fiber'`\n  );\n  // Add type annotations to the main component\n  tsxCode = tsxCode.replace(\n    `export default function ${componentName}(props) {`,\n    `export default function ${componentName}(props: GroupProps) {`\n  );\n  // Add type for useGLTF hook\n  tsxCode = tsxCode.replace(\n    `const { nodes, materials } = useGLTF`,\n    `const { nodes, materials }: any = useGLTF`\n  );\n  return tsxCode;\n}\n\n// Function to generate code in different languages\nfunction generateCodeInLanguage(fileName: string, componentName: string, language: string, options = {}, gltfData: any = null) {\n  const { wireframe, displayMode, autoRotate } = options;\n  switch (language) {\n    case 'transpiled-tsx':\n      return generateTranspiledComponent(fileName, componentName, gltfData);\n    case 'transpiled-jsx':\n      return generateTranspiledComponent(fileName, componentName, gltfData)\n        .replace(/: GroupProps|import { GroupProps } from '@react-three\\/fiber'/g, '')\n        .replace(/React, { useRef, useMemo }/g, 'React, { useRef, useMemo, useEffect }');\n    case 'tsx':\n      return generateR3FComponent(fileName, componentName, options);\n    case 'jsx':\n      return generateR3FComponent(fileName, componentName, options).replace(\n        /: GroupProps|: any|import { GroupProps } from '@react-three\\/fiber'|: THREE\\.GroupProps/g, ''\n      );\n    case 'vanilla-js':\n      return `// Vanilla JavaScript Three.js implementation\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nclass ${componentName}Viewer {\n  constructor(canvasElement) {\n    this.canvas = canvasElement;\n    this.init();\n    this.loadModel();\n    ${autoRotate ? 'this.animate();' : ''}\n  }\n  init() {\n    // Scene setup\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0x1a1a2e);\n    // Camera setup\n    this.camera = new THREE.PerspectiveCamera(\n      50, \n      this.canvas.clientWidth / this.canvas.clientHeight, \n      0.1, \n      1000\n    );\n    this.camera.position.set(0, 0, 5);\n    // Renderer setup\n    this.renderer = new THREE.WebGLRenderer({ \n      canvas: this.canvas,\n      antialias: true \n    });\n    this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    this.scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 10, 10);\n    directionalLight.castShadow = true;\n    this.scene.add(directionalLight);\n    // Controls\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.05;\n    // Handle window resize\n    window.addEventListener('resize', () => this.onWindowResize());\n  }\n  loadModel() {\n    const loader = new GLTFLoader();\n    loader.load(\n      '${fileName}',\n      (gltf) => {\n        this.model = gltf.scene;\n        ${displayMode === 'wireframe' ? `\n        // Apply wireframe material\n        this.model.traverse((child) => {\n          if (child.isMesh) {\n            child.material.wireframe = true;\n            child.material.transparent = true;\n            child.material.opacity = 0.8;\n          }\n        });` : ''}\n        ${displayMode === 'normals' ? `\n        // Apply normal materials\n        this.model.traverse((child) => {\n          if (child.isMesh) {\n            child.material = new THREE.MeshNormalMaterial();\n          }\n        });` : ''}\n        this.scene.add(this.model);\n        this.render();\n      },\n      (progress) => {\n        console.log('Loading progress:', progress);\n      },\n      (error) => {\n        console.error('Error loading model:', error);\n      }\n    );\n  }\n  ${autoRotate ? `\n  animate() {\n    requestAnimationFrame(() => this.animate());\n    if (this.model) {\n      this.model.rotation.y += 0.01;\n    }\n    this.controls.update();\n    this.render();\n  }` : `\n  render() {\n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n  }`}\n  onWindowResize() {\n    this.camera.aspect = this.canvas.clientWidth / this.canvas.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);\n    this.render();\n  }\n}\n// Usage:\n// const canvas = document.getElementById('canvas');\n// const viewer = new ${componentName}Viewer(canvas);\nexport default ${componentName}Viewer;`;\n    case 'python':\n      return `#!/usr/bin/env python3\n\"\"\"\n${componentName} 3D Model Viewer\nPython implementation using Open3D and Trimesh\n\"\"\"\nimport open3d as o3d\nimport trimesh\nimport numpy as np\nimport argparse\nimport sys\nclass ${componentName}Viewer:\n    def __init__(self, model_path):\n        self.model_path = model_path\n        self.mesh = None\n        self.wireframe = ${displayMode === 'wireframe' ? 'True' : 'False'}\n        self.auto_rotate = ${autoRotate ? 'True' : 'False'}\n    def load_model(self):\n        \"\"\"Load GLB/GLTF model using trimesh\"\"\"\n        try:\n            # Load using trimesh (supports GLB format)\n            scene = trimesh.load(self.model_path)\n            if isinstance(scene, trimesh.Scene):\n                # Merge all geometries if it's a scene\n                mesh = trimesh.util.concatenate([\n                    trimesh.Trimesh(vertices=geometry.vertices, faces=geometry.faces)\n                    for geometry in scene.geometry.values()\n                    if hasattr(geometry, 'vertices')\n                ])\n            else:\n                mesh = scene\n            # Convert to Open3D mesh\n            self.mesh = o3d.geometry.TriangleMesh()\n            self.mesh.vertices = o3d.utility.Vector3dVector(mesh.vertices)\n            self.mesh.triangles = o3d.utility.Vector3iVector(mesh.faces)\n            # Compute normals\n            self.mesh.compute_vertex_normals()\n            print(f\"Model loaded successfully: {len(mesh.vertices)} vertices, {len(mesh.faces)} faces\")\n            return True\n        except Exception as e:\n            print(f\"Error loading model: {e}\")\n            return False\n    def setup_visualization(self):\n        \"\"\"Setup Open3D visualization\"\"\"\n        self.vis = o3d.visualization.Visualizer()\n        self.vis.create_window(window_name=f\"${componentName} Viewer\", width=800, height=600)\n        # Configure rendering options\n        render_option = self.vis.get_render_option()\n        render_option.show_coordinate_frame = True\n        render_option.background_color = np.asarray([0.1, 0.1, 0.18])\n        if self.wireframe:\n            render_option.mesh_show_wireframe = True\n            render_option.mesh_show_back_face = True\n        # Add mesh to visualizer\n        if self.mesh:\n            ${displayMode === 'normals' ? `\n            # Color by normals\n            normals = np.asarray(self.mesh.vertex_normals)\n            colors = (normals + 1.0) / 2.0  # Normalize to [0,1]\n            self.mesh.vertex_colors = o3d.utility.Vector3dVector(colors)` : `\n            # Set default color\n            self.mesh.paint_uniform_color([0.7, 0.7, 0.7])`}\n            self.vis.add_geometry(self.mesh)\n    def run(self):\n        \"\"\"Run the visualization\"\"\"\n        if not self.load_model():\n            return\n        self.setup_visualization()\n        # Set camera position\n        ctr = self.vis.get_view_control()\n        ctr.set_zoom(0.8)\n        print(\"Controls:\")\n        print(\"- Mouse: Rotate view\")\n        print(\"- Scroll: Zoom\")\n        print(\"- Ctrl+Mouse: Pan\")\n        print(\"- Press 'Q' or close window to exit\")\n        if self.auto_rotate:\n            self._run_with_rotation()\n        else:\n            self.vis.run()\n        self.vis.destroy_window()\n    def _run_with_rotation(self):\n        \"\"\"Run with automatic rotation\"\"\"\n        while True:\n            # Rotate the mesh\n            rotation_matrix = self.mesh.get_rotation_matrix_from_axis_angle([0, 0.02, 0])\n            self.mesh.rotate(rotation_matrix, center=self.mesh.get_center())\n            self.vis.update_geometry(self.mesh)\n            self.vis.poll_events()\n            self.vis.update_renderer()\n            if not self.vis.poll_events():\n                break\ndef main():\n    parser = argparse.ArgumentParser(description='${componentName} 3D Model Viewer')\n    parser.add_argument('model_path', nargs='?', default='${fileName}', \n                       help='Path to the GLB model file')\n    args = parser.parse_args()\n    viewer = ${componentName}Viewer(args.model_path)\n    viewer.run()\nif __name__ == \"__main__\":\n    main()\n# Required dependencies:\n# pip install open3d trimesh numpy`;\n    case 'cpp':\n      return `// ${componentName} 3D Model Viewer - C++ OpenGL Implementation\n#include <GL/glew.h>\n#include <GLFW/glfw3.h>\n#include <glm/glm.hpp>\n#include <glm/gtc/matrix_transform.hpp>\n#include <glm/gtc/type_ptr.hpp>\n#include <assimp/Importer.hpp>\n#include <assimp/scene.h>\n#include <assimp/postprocess.h>\n#include <iostream>\n#include <vector>\n#include <string>\nclass ${componentName}Viewer {\nprivate:\n    GLFWwindow* window;\n    unsigned int VBO, VAO, EBO;\n    unsigned int shaderProgram;\n    std::vector<float> vertices;\n    std::vector<unsigned int> indices;\n    glm::mat4 model = glm::mat4(1.0f);\n    glm::mat4 view = glm::mat4(1.0f);\n    glm::mat4 projection = glm::mat4(1.0f);\n    float rotationAngle = 0.0f;\n    bool autoRotate = ${autoRotate ? 'true' : 'false'};\n    bool wireframe = ${displayMode === 'wireframe' ? 'true' : 'false'};\npublic:\n    ${componentName}Viewer() {}\n    bool initialize() {\n        // Initialize GLFW\n        if (!glfwInit()) {\n            std::cerr << \"Failed to initialize GLFW\" << std::endl;\n            return false;\n        }\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n        // Create window\n        window = glfwCreateWindow(800, 600, \"${componentName} Viewer\", NULL, NULL);\n        if (!window) {\n            std::cerr << \"Failed to create GLFW window\" << std::endl;\n            glfwTerminate();\n            return false;\n        }\n        glfwMakeContextCurrent(window);\n        glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n        // Initialize GLEW\n        if (glewInit() != GLEW_OK) {\n            std::cerr << \"Failed to initialize GLEW\" << std::endl;\n            return false;\n        }\n        // Enable depth testing\n        glEnable(GL_DEPTH_TEST);\n        // Set viewport\n        glViewport(0, 0, 800, 600);\n        return true;\n    }\n    bool loadModel(const std::string& path) {\n        Assimp::Importer importer;\n        const aiScene* scene = importer.ReadFile(path, \n            aiProcess_Triangulate | \n            aiProcess_FlipUVs | \n            aiProcess_GenNormals);\n        if (!scene || scene->mFlags & AI_SCENE_FLAGS_INCOMPLETE || !scene->mRootNode) {\n            std::cerr << \"ERROR::ASSIMP::\" << importer.GetErrorString() << std::endl;\n            return false;\n        }\n        processNode(scene->mRootNode, scene);\n        setupBuffers();\n        std::cout << \"Model loaded: \" << vertices.size()/6 << \" vertices, \" \n                 << indices.size()/3 << \" triangles\" << std::endl;\n        return true;\n    }\n    void processNode(aiNode* node, const aiScene* scene) {\n        // Process all the node's meshes\n        for (unsigned int i = 0; i < node->mNumMeshes; i++) {\n            aiMesh* mesh = scene->mMeshes[node->mMeshes[i]];\n            processMesh(mesh, scene);\n        }\n        // Process all the node's children\n        for (unsigned int i = 0; i < node->mNumChildren; i++) {\n            processNode(node->mChildren[i], scene);\n        }\n    }\n    void processMesh(aiMesh* mesh, const aiScene* scene) {\n        unsigned int baseVertex = vertices.size() / 6;\n        // Process vertices\n        for (unsigned int i = 0; i < mesh->mNumVertices; i++) {\n            // Positions\n            vertices.push_back(mesh->mVertices[i].x);\n            vertices.push_back(mesh->mVertices[i].y);\n            vertices.push_back(mesh->mVertices[i].z);\n            // Normals\n            if (mesh->HasNormals()) {\n                vertices.push_back(mesh->mNormals[i].x);\n                vertices.push_back(mesh->mNormals[i].y);\n                vertices.push_back(mesh->mNormals[i].z);\n            } else {\n                vertices.push_back(0.0f);\n                vertices.push_back(1.0f);\n                vertices.push_back(0.0f);\n            }\n        }\n        // Process indices\n        for (unsigned int i = 0; i < mesh->mNumFaces; i++) {\n            aiFace face = mesh->mFaces[i];\n            for (unsigned int j = 0; j < face.mNumIndices; j++) {\n                indices.push_back(baseVertex + face.mIndices[j]);\n            }\n        }\n    }\n    void setupBuffers() {\n        glGenVertexArrays(1, &VAO);\n        glGenBuffers(1, &VBO);\n        glGenBuffers(1, &EBO);\n        glBindVertexArray(VAO);\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(float), vertices.data(), GL_STATIC_DRAW);\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), indices.data(), GL_STATIC_DRAW);\n        // Position attribute\n        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(0);\n        // Normal attribute\n        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));\n        glEnableVertexAttribArray(1);\n        glBindBuffer(GL_ARRAY_BUFFER, 0);\n        glBindVertexArray(0);\n    }\n    void run() {\n        setupShaders();\n        // Set camera position\n        view = glm::lookAt(glm::vec3(0.0f, 0.0f, 5.0f),\n                          glm::vec3(0.0f, 0.0f, 0.0f),\n                          glm::vec3(0.0f, 1.0f, 0.0f));\n        projection = glm::perspective(glm::radians(50.0f), 800.0f / 600.0f, 0.1f, 100.0f);\n        // Render loop\n        while (!glfwWindowShouldClose(window)) {\n            processInput();\n            // Clear buffers\n            glClearColor(0.1f, 0.1f, 0.18f, 1.0f);\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n            // Set wireframe mode\n            if (wireframe) {\n                glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n            } else {\n                glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);\n            }\n            // Update model matrix\n            if (autoRotate) {\n                rotationAngle += 0.01f;\n                model = glm::rotate(glm::mat4(1.0f), rotationAngle, glm::vec3(0.0f, 1.0f, 0.0f));\n            }\n            // Use shader program\n            glUseProgram(shaderProgram);\n            // Set uniforms\n            unsigned int modelLoc = glGetUniformLocation(shaderProgram, \"model\");\n            unsigned int viewLoc = glGetUniformLocation(shaderProgram, \"view\");\n            unsigned int projLoc = glGetUniformLocation(shaderProgram, \"projection\");\n            glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));\n            glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));\n            glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projection));\n            // Draw model\n            glBindVertexArray(VAO);\n            glDrawElements(GL_TRIANGLES, indices.size(), GL_UNSIGNED_INT, 0);\n            glfwSwapBuffers(window);\n            glfwPollEvents();\n        }\n    }\n    void setupShaders() {\n        const char* vertexShaderSource = R\"(\n            #version 330 core\n            layout (location = 0) in vec3 aPos;\n            layout (location = 1) in vec3 aNormal;\n            out vec3 FragPos;\n            out vec3 Normal;\n            uniform mat4 model;\n            uniform mat4 view;\n            uniform mat4 projection;\n            void main() {\n                FragPos = vec3(model * vec4(aPos, 1.0));\n                Normal = mat3(transpose(inverse(model))) * aNormal;\n                gl_Position = projection * view * vec4(FragPos, 1.0);\n            }\n        )\";\n        const char* fragmentShaderSource = R\"(\n            #version 330 core\n            out vec4 FragColor;\n            in vec3 FragPos;\n            in vec3 Normal;\n            void main() {\n                ${displayMode === 'normals' ? `\n                vec3 norm = normalize(Normal);\n                FragColor = vec4(abs(norm), 1.0);` : `\n                vec3 lightColor = vec3(1.0, 1.0, 1.0);\n                vec3 lightPos = vec3(5.0, 5.0, 5.0);\n                vec3 objectColor = vec3(0.7, 0.7, 0.7);\n                vec3 norm = normalize(Normal);\n                vec3 lightDir = normalize(lightPos - FragPos);\n                float diff = max(dot(norm, lightDir), 0.0);\n                vec3 diffuse = diff * lightColor;\n                vec3 ambient = 0.3 * lightColor;\n                vec3 result = (ambient + diffuse) * objectColor;\n                FragColor = vec4(result, 1.0);`}\n            }\n        )\";\n        // Compile and link shaders\n        unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);\n        glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\n        glCompileShader(vertexShader);\n        unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\n        glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);\n        glCompileShader(fragmentShader);\n        shaderProgram = glCreateProgram();\n        glAttachShader(shaderProgram, vertexShader);\n        glAttachShader(shaderProgram, fragmentShader);\n        glLinkProgram(shaderProgram);\n        glDeleteShader(vertexShader);\n        glDeleteShader(fragmentShader);\n    }\n    void processInput() {\n        if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n            glfwSetWindowShouldClose(window, true);\n        if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)\n            wireframe = !wireframe;\n        if (glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS)\n            autoRotate = !autoRotate;\n    }\n    static void framebuffer_size_callback(GLFWwindow* window, int width, int height) {\n        glViewport(0, 0, width, height);\n    }\n    ~${componentName}Viewer() {\n        glDeleteVertexArrays(1, &VAO);\n        glDeleteBuffers(1, &VBO);\n        glDeleteBuffers(1, &EBO);\n        glDeleteProgram(shaderProgram);\n        glfwTerminate();\n    }\n};\nint main() {\n    ${componentName}Viewer viewer;\n    if (!viewer.initialize()) {\n        return -1;\n    }\n    if (!viewer.loadModel(\"${fileName}\")) {\n        std::cerr << \"Failed to load model: ${fileName}\" << std::endl;\n        return -1;\n    }\n    std::cout << \"Controls:\" << std::endl;\n    std::cout << \"W - Toggle wireframe\" << std::endl;\n    std::cout << \"R - Toggle auto rotation\" << std::endl;\n    std::cout << \"ESC - Exit\" << std::endl;\n    viewer.run();\n    return 0;\n}\n// Build instructions:\n// g++ -o ${componentName.toLowerCase()}_viewer main.cpp -lGL -lGLEW -lglfw -lassimp`;\n    default:\n      return generateR3FComponent(fileName, componentName, options);\n  }\n}\n\nexport default function GLBConverter() {\n  const [file, setFile] = useState<File | null>(null);\n  const [modelUrl, setModelUrl] = useState('');\n  const [generatedCode, setGeneratedCode] = useState('');\n  const [componentName, setComponentName] = useState('Model');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [activeTab, setActiveTab] = useState<'upload' | 'preview' | 'code'>('upload');\n  const [gltfData, setGltfData] = useState<any>(null);\n  \n  // Display options\n  const [displayMode, setDisplayMode] = useState('original');\n  const [autoRotate, setAutoRotate] = useState(true);\n  const [showGrid, setShowGrid] = useState(false);\n  const [showAxes, setShowAxes] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState('transpiled-tsx');\n  \n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const uploadedFile = event.target.files?.[0];\n    if (uploadedFile && uploadedFile.name.endsWith('.glb')) {\n      setFile(uploadedFile);\n      setError('');\n      // Create object URL for preview\n      const url = URL.createObjectURL(uploadedFile);\n      setModelUrl(url);\n      \n      try {\n        // Load and store GLTF data for transpilation\n        const loader = new GLTFLoader();\n        const gltf = await loader.loadAsync(url);\n        setGltfData(gltf);\n      } catch (err) {\n        console.error(\"Error loading GLTF data:\", err);\n        setError('Error processing GLB file for transpilation');\n      }\n      \n      // Generate component name from filename\n      const name = uploadedFile.name.replace('.glb', '').replace(/[^a-zA-Z0-9]/g, '');\n      const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n      setComponentName(capitalizedName);\n      setActiveTab('preview');\n    } else {\n      setError('Please upload a valid .glb file');\n    }\n  };\n  \n  // Regenerate code when display options change\n  const regenerateCode = () => {\n    if (file) {\n      const options = {\n        wireframe: displayMode === 'wireframe',\n        displayMode,\n        autoRotate\n      };\n      const code = generateCodeInLanguage(file.name, componentName, selectedLanguage, options, gltfData);\n      setGeneratedCode(code);\n    }\n  };\n  \n  useEffect(() => {\n    if (file) {\n      regenerateCode();\n    }\n  }, [file, displayMode, autoRotate, componentName, selectedLanguage, gltfData]);\n  \n  const downloadModel = () => {\n    if (!file) return;\n    const url = URL.createObjectURL(file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  const downloadCode = () => {\n    if (!generatedCode) return;\n    const extension = \n      selectedLanguage === 'transpiled-tsx' || selectedLanguage === 'tsx' ? 'tsx' :\n      selectedLanguage === 'transpiled-jsx' || selectedLanguage === 'jsx' ? 'jsx' :\n      selectedLanguage === 'vanilla-js' ? 'js' :\n      selectedLanguage === 'python' ? 'py' : 'cpp';\n    \n    const blob = new Blob([generatedCode], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${componentName}.${extension}`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            GLB to React Three Fiber Converter\n          </h1>\n          <p className=\"text-slate-300 max-w-2xl mx-auto\">\n            Convert your GLB 3D models into self-contained React Three Fiber components.\n            Upload your model, preview it, and download the generated code with all geometry data embedded.\n          </p>\n        </div>\n        \n        {/* Navigation Tabs */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"bg-slate-800 rounded-lg p-1 flex\">\n            <button\n              onClick={() => setActiveTab('upload')}\n              className={`px-6 py-2 rounded-md font-medium transition-all ${\n                activeTab === 'upload'\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white'\n              }`}\n            >\n              <Upload className=\"w-4 h-4 inline mr-2\" />\n              Upload\n            </button>\n            <button\n              onClick={() => setActiveTab('preview')}\n              disabled={!file}\n              className={`px-6 py-2 rounded-md font-medium transition-all ${\n                activeTab === 'preview' && file\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed'\n              }`}\n            >\n              <Eye className=\"w-4 h-4 inline mr-2\" />\n              Preview\n            </button>\n            <button\n              onClick={() => setActiveTab('code')}\n              disabled={!generatedCode}\n              className={`px-6 py-2 rounded-md font-medium transition-all ${\n                activeTab === 'code' && generatedCode\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed'\n              }`}\n            >\n              <Code className=\"w-4 h-4 inline mr-2\" />\n              Code\n            </button>\n          </div>\n        </div>\n        \n        {/* Error Display */}\n        {error && (\n          <div className=\"bg-red-900/50 border border-red-500 rounded-lg p-4 mb-6 max-w-2xl mx-auto\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"w-5 h-5 text-red-400 mr-2\" />\n              <span className=\"text-red-200\">{error}</span>\n            </div>\n          </div>\n        )}\n        \n        {/* Upload Tab */}\n        {activeTab === 'upload' && (\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl p-8 border border-slate-700\">\n              <div className=\"text-center\">\n                <div className=\"border-2 border-dashed border-slate-600 rounded-lg p-12 hover:border-purple-500 transition-colors\">\n                  <Upload className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">\n                    Upload your GLB model\n                  </h3>\n                  <p className=\"text-slate-400 mb-6\">\n                    Drop your .glb file here or click to browse\n                  </p>\n                  <input\n                    type=\"file\"\n                    accept=\".glb\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                    id=\"file-upload\"\n                  />\n                  <label\n                    htmlFor=\"file-upload\"\n                    className=\"bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg cursor-pointer transition-colors inline-block\"\n                  >\n                    Choose File\n                  </label>\n                </div>\n              </div>\n              {file && (\n                <div className=\"mt-6 p-4 bg-slate-700 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-white font-medium\">{file.name}</p>\n                      <p className=\"text-slate-400 text-sm\">\n                        {(file.size / 1024 / 1024).toFixed(2)} MB\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <input\n                        type=\"text\"\n                        value={componentName}\n                        onChange={(e) => setComponentName(e.target.value)}\n                        className=\"bg-slate-600 text-white px-3 py-1 rounded border border-slate-500 focus:border-purple-500 outline-none\"\n                        placeholder=\"Component name\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Preview Tab */}\n        {activeTab === 'preview' && modelUrl && (\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-xl font-semibold text-white\">3D Model Preview</h3>\n                <div className=\"flex items-center gap-4\">\n                  {/* Display Mode Controls */}\n                  <div className=\"flex items-center gap-2\">\n                    <label className=\"text-slate-300 text-sm\">Display Mode:</label>\n                    <select\n                      value={displayMode}\n                      onChange={(e) => setDisplayMode(e.target.value)}\n                      className=\"bg-slate-700 text-white px-3 py-1 rounded border border-slate-600 focus:border-purple-500 outline-none text-sm\"\n                    >\n                      <option value=\"original\">Original</option>\n                      <option value=\"wireframe\">Wireframe</option>\n                      <option value=\"solid\">Solid Color</option>\n                      <option value=\"normals\">Normals</option>\n                      <option value=\"depth\">Depth</option>\n                      <option value=\"points\">Point Cloud</option>\n                    </select>\n                  </div>\n                  \n                  {/* Toggle Controls */}\n                  <div className=\"flex items-center gap-4\">\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={autoRotate}\n                        onChange={(e) => setAutoRotate(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Auto Rotate\n                    </label>\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={showGrid}\n                        onChange={(e) => setShowGrid(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Grid\n                    </label>\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={showAxes}\n                        onChange={(e) => setShowAxes(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Axes\n                    </label>\n                  </div>\n                  \n                  <button\n                    onClick={downloadModel}\n                    className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2\"\n                  >\n                    <Download className=\"w-4 h-4\" />\n                    Download GLB\n                  </button>\n                </div>\n              </div>\n              \n              {/* Display Mode Description */}\n              <div className=\"mb-4\">\n                <div className=\"bg-slate-900 rounded-lg p-3\">\n                  <p className=\"text-slate-400 text-sm\">\n                    {displayMode === 'original' && 'Showing the original model with its materials and textures.'}\n                    {displayMode === 'wireframe' && 'Displaying the model as a wireframe structure showing the mesh geometry.'}\n                    {displayMode === 'solid' && 'Rendering the model with a uniform solid color material.'}\n                    {displayMode === 'normals' && 'Visualizing surface normals with color-coded directions (RGB = XYZ).'}\n                    {displayMode === 'depth' && 'Showing depth information - closer surfaces appear lighter.'}\n                    {displayMode === 'points' && 'Displaying the model as a point cloud of vertices.'}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"bg-slate-900 rounded-lg overflow-hidden\" style={{ height: '500px' }}>\n                <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n                  <ambientLight intensity={0.5} />\n                  <pointLight position={[10, 10, 10]} />\n                  <pointLight position={[-10, -10, -10]} intensity={0.3} />\n                  <React.Suspense fallback={null}>\n                    <ModelPreview url={modelUrl} displayMode={displayMode} autoRotate={autoRotate} />\n                  </React.Suspense>\n                  {showGrid && (\n                    <gridHelper args={[10, 10, '#444444', '#666666']} />\n                  )}\n                  {showAxes && (\n                    <axesHelper args={[2]} />\n                  )}\n                  <OrbitControls enableZoom enablePan enableRotate />\n                  <Environment preset=\"studio\" />\n                </Canvas>\n              </div>\n              \n              <p className=\"text-slate-400 text-sm mt-4 text-center\">\n                Use mouse to rotate, zoom, and pan around the model. Try different display modes to analyze the model structure.\n              </p>\n            </div>\n          </div>\n        )}\n        \n        {/* Code Tab */}\n        {activeTab === 'code' && generatedCode && (\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700\">\n              <div className=\"flex justify-between items-center p-6 border-b border-slate-700\">\n                <div className=\"flex items-center gap-4\">\n                  <h3 className=\"text-xl font-semibold text-white\">\n                    Generated Code\n                  </h3>\n                  \n                  {/* Language Selection */}\n                  <div className=\"flex items-center gap-2\">\n                    <label className=\"text-slate-300 text-sm\">Language:</label>\n                    <select\n                      value={selectedLanguage}\n                      onChange={(e) => setSelectedLanguage(e.target.value)}\n                      className=\"bg-slate-700 text-white px-3 py-1 rounded border border-slate-600 focus:border-purple-500 outline-none text-sm\"\n                    >\n                      <option value=\"transpiled-tsx\">Transpiled TypeScript (TSX)</option>\n                      <option value=\"transpiled-jsx\">Transpiled JavaScript (JSX)</option>\n                      <option value=\"tsx\">TypeScript React (TSX)</option>\n                      <option value=\"jsx\">JavaScript React (JSX)</option>\n                      <option value=\"vanilla-js\">Vanilla JavaScript</option>\n                      <option value=\"python\">Python (Open3D)</option>\n                      <option value=\"cpp\">C++ (OpenGL)</option>\n                    </select>\n                  </div>\n                </div>\n                \n                <button\n                  onClick={downloadCode}\n                  className=\"bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                  Download {selectedLanguage.toUpperCase()}\n                </button>\n              </div>\n              \n              {/* Language Info Banner */}\n              <div className=\"p-4 bg-slate-900 border-b border-slate-700\">\n                <div className=\"text-sm text-slate-400\">\n                  {selectedLanguage === 'transpiled-tsx' && (\n                    <span>✨ <strong>Transpiled TypeScript:</strong> Self-contained component with all geometry data embedded (no external GLB needed)</span>\n                  )}\n                  {selectedLanguage === 'transpiled-jsx' && (\n                    <span>✨ <strong>Transpiled JavaScript:</strong> Self-contained component with all geometry data embedded (no external GLB needed)</span>\n                  )}\n                  {selectedLanguage === 'tsx' && (\n                    <span>⚡ <strong>TypeScript React:</strong> Uses external GLB file (requires file in public folder)</span>\n                  )}\n                  {selectedLanguage === 'jsx' && (\n                    <span>⚡ <strong>JavaScript React:</strong> Uses external GLB file (requires file in public folder)</span>\n                  )}\n                  {selectedLanguage === 'vanilla-js' && (\n                    <span>✨ <strong>Vanilla JavaScript:</strong> Pure Three.js implementation - works in any web environment</span>\n                  )}\n                  {selectedLanguage === 'python' && (\n                    <span>🐍 <strong>Python:</strong> Cross-platform 3D viewer using Open3D and Trimesh libraries</span>\n                  )}\n                  {selectedLanguage === 'cpp' && (\n                    <span>⚙️ <strong>C++:</strong> High-performance OpenGL renderer with GLFW and Assimp</span>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <pre className=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-sm max-h-96 overflow-y-auto\">\n                  <code className=\"text-slate-300 whitespace-pre-wrap\">{generatedCode}</code>\n                </pre>\n              </div>\n              \n              <div className=\"p-6 border-t border-slate-700\">\n                <h4 className=\"text-lg font-semibold text-white mb-3\">\n                  {selectedLanguage.startsWith('transpiled-') ? 'Transpiled Component Instructions' :\n                   selectedLanguage === 'tsx' || selectedLanguage === 'jsx' ? 'Installation Instructions' :\n                   selectedLanguage === 'vanilla-js' ? 'Usage Instructions' :\n                   selectedLanguage === 'python' ? 'Python Setup' :\n                   'Build Instructions'}\n                </h4>\n                <div className=\"space-y-3\">\n                  {(selectedLanguage === 'transpiled-tsx' || selectedLanguage === 'transpiled-jsx') && (\n                    <>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">1. Copy the generated code to a new file:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-blue-400\">{`import ${componentName} from './${componentName}'`}</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">2. Use the component directly (no external GLB needed):</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-blue-400\">{`<Canvas>\n  <${componentName} />\n</Canvas>`}</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">3. All geometry data is embedded in the component</p>\n                      </div>\n                    </>\n                  )}\n                  {(selectedLanguage === 'tsx' || selectedLanguage === 'jsx') && (\n                    <>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">1. Install required dependencies:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-green-400\">npm install three @react-three/fiber @react-three/drei</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">2. Place your GLB file in the public folder</p>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">3. Import and use the component:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-blue-400\">{`import ${componentName} from './${componentName}'`}</code>\n                        </pre>\n                      </div>\n                    </>\n                  )}\n                  {selectedLanguage === 'vanilla-js' && (\n                    <>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">1. Include Three.js in your HTML:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-green-400\">{`<script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>`}</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">2. Create a canvas element:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-blue-400\">{`<canvas id=\"canvas\" width=\"800\" height=\"600\"></canvas>`}</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">3. Initialize the viewer:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-blue-400\">{`const canvas = document.getElementById('canvas');\nconst viewer = new ${componentName}Viewer(canvas);`}</code>\n                        </pre>\n                      </div>\n                    </>\n                  )}\n                  {selectedLanguage === 'python' && (\n                    <>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">1. Install required dependencies:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-green-400\">pip install open3d trimesh numpy</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">2. Run the viewer:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-blue-400\">python {componentName.toLowerCase()}_viewer.py [model_path]</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">3. Controls:</p>\n                        <ul className=\"text-slate-400 text-sm ml-4 space-y-1\">\n                          <li>• Mouse: Rotate view</li>\n                          <li>• Scroll: Zoom in/out</li>\n                          <li>• Ctrl+Mouse: Pan view</li>\n                          <li>• Q: Quit application</li>\n                        </ul>\n                      </div>\n                    </>\n                  )}\n                  {selectedLanguage === 'cpp' && (\n                    <>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">1. Install dependencies (Ubuntu/Debian):</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-green-400\">sudo apt install libglew-dev libglfw3-dev libassimp-dev libglm-dev</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">2. Compile:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-blue-400\">g++ -o viewer main.cpp -lGL -lGLEW -lglfw -lassimp</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">3. Run:</p>\n                        <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                          <code className=\"text-blue-400\">./viewer</code>\n                        </pre>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400 text-sm mb-2\">4. Controls:</p>\n                        <ul className=\"text-slate-400 text-sm ml-4 space-y-1\">\n                          <li>• W: Toggle wireframe</li>\n                          <li>• R: Toggle auto rotation</li>\n                          <li>• ESC: Exit application</li>\n                        </ul>\n                      </div>\n                    </>\n                  )}\n                  {(displayMode !== 'original' || autoRotate) && (\n                    <div>\n                      <p className=\"text-slate-400 text-sm mb-2\">Applied Options:</p>\n                      <ul className=\"text-slate-400 text-sm ml-4 space-y-1\">\n                        {displayMode !== 'original' && <li>• Display Mode: {displayMode}</li>}\n                        {autoRotate && <li>• Auto Rotation: Enabled</li>}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/lib/glb-converter.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { GLTF } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport type {\n  MeshData,\n  MaterialData,\n  ProjectStructure,\n  GeometryData,\n} from \"@/app/types/glb-convertor\";\n\n// Language configuration for code generation with proper 2025 library support\nconst LANGUAGES = {\n  typescript: {\n    extension: \"tsx\",\n    geometryExtension: \"ts\",\n    comment: \"//\",\n    string: '\"',\n    function: \"function\",\n    class: \"class\",\n    import: \"import\",\n    export: \"export\",\n    typeDeclaration: (name: string) => `type ${name} = {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `[${items.join(\", \")}]`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  javascript: {\n    extension: \"jsx\",\n    geometryExtension: \"js\",\n    comment: \"//\",\n    string: '\"',\n    function: \"function\",\n    class: \"class\",\n    import: \"import\",\n    export: \"export\",\n    typeDeclaration: () => \"\",\n    typeEnd: \"\",\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `[${items.join(\", \")}]`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  python: {\n    extension: \"py\",\n    geometryExtension: \"py\",\n    comment: \"#\",\n    string: \"'\",\n    function: \"def\",\n    class: \"class\",\n    import: \"import\",\n    export: \"\",\n    typeDeclaration: () => \"\",\n    typeEnd: \"\",\n    objectProperty: (key: string, value: string) => `    ${key} = ${value}`,\n    array: (items: string[]) => `[${items.join(\", \")}]`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  java: {\n    extension: \"java\",\n    geometryExtension: \"java\",\n    comment: \"//\",\n    string: '\"',\n    function: \"\",\n    class: \"class\",\n    import: \"import\",\n    export: \"\",\n    typeDeclaration: (name: string) => `public class ${name} {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) =>\n      `    public ${value} ${key};`,\n    array: (items: string[]) =>\n      `new ArrayList<>() {{ ${items\n        .map((item) => `add(${item})`)\n        .join(\"; \")}; }}`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  csharp: {\n    extension: \"cs\",\n    geometryExtension: \"cs\",\n    comment: \"//\",\n    string: '\"',\n    function: \"\",\n    class: \"class\",\n    import: \"using\",\n    export: \"\",\n    typeDeclaration: (name: string) => `public class ${name} {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) =>\n      `    public ${value} ${key} { get; set; }`,\n    array: (items: string[]) => `new List<object> { ${items.join(\", \")} }`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  cpp: {\n    extension: \"cpp\",\n    geometryExtension: \"h\",\n    comment: \"//\",\n    string: '\"',\n    function: \"\",\n    class: \"class\",\n    import: \"#include\",\n    export: \"\",\n    typeDeclaration: (name: string) => `class ${name} { public:`,\n    typeEnd: \"};\",\n    objectProperty: (key: string, value: string) => `    ${value} ${key};`,\n    array: (items: string[]) => `{${items.join(\", \")}}`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  go: {\n    extension: \"go\",\n    geometryExtension: \"go\",\n    comment: \"//\",\n    string: '\"',\n    function: \"func\",\n    class: \"type\",\n    import: \"import\",\n    export: \"\",\n    typeDeclaration: (name: string) => `type ${name} struct {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) =>\n      `    ${key} ${value} \\`json:\"${key.toLowerCase()}\"\\``,\n    array: (items: string[]) => `[]interface{}{${items.join(\", \")}}`,\n    stringLiteral: (value: string) => `\"${value.replace(/\"/g, '\\\\\"')}\"`,\n  },\n  rust: {\n    extension: \"rs\",\n    geometryExtension: \"rs\",\n    comment: \"//\",\n    string: '\"',\n    function: \"fn\",\n    class: \"struct\",\n    import: \"use\",\n    export: \"\",\n    typeDeclaration: (name: string) => `pub struct ${name} {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) => `    pub ${key}: ${value},`,\n    array: (items: string[]) => `vec![${items.join(\", \")}]`,\n    stringLiteral: (value: string) => `\"${value.replace(/\"/g, '\\\\\"')}\"`,\n  },\n  swift: {\n    extension: \"swift\",\n    geometryExtension: \"swift\",\n    comment: \"//\",\n    string: '\"',\n    function: \"func\",\n    class: \"class\",\n    import: \"import\",\n    export: \"\",\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) => `    var ${key}: ${value}`,\n    array: (items: string[]) => `[${items.join(\", \")}]`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  kotlin: {\n    extension: \"kt\",\n    geometryExtension: \"kt\",\n    comment: \"//\",\n    string: '\"',\n    function: \"fun\",\n    class: \"class\",\n    import: \"import\",\n    export: \"\",\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) =>\n      `    var ${key}: ${value}? = null`,\n    array: (items: string[]) => `listOf(${items.join(\", \")})`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  ruby: {\n    extension: \"rb\",\n    geometryExtension: \"rb\",\n    comment: \"#\",\n    string: '\"',\n    function: \"def\",\n    class: \"class\",\n    import: \"require\",\n    export: \"\",\n    typeDeclaration: (name: string) => `class ${name}`,\n    typeEnd: \"end\",\n    objectProperty: (key: string, value: string) => `  attr_accessor :${key}`,\n    array: (items: string[]) => `[${items.join(\", \")}]`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  php: {\n    extension: \"php\",\n    geometryExtension: \"php\",\n    comment: \"//\",\n    string: '\"',\n    function: \"function\",\n    class: \"class\",\n    import: \"use\",\n    export: \"\",\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) => `    private $${key};`,\n    array: (items: string[]) => `array(${items.join(\", \")})`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  scala: {\n    extension: \"scala\",\n    geometryExtension: \"scala\",\n    comment: \"//\",\n    string: '\"',\n    function: \"def\",\n    class: \"class\",\n    import: \"import\",\n    export: \"\",\n    typeDeclaration: (name: string) => `case class ${name}(`,\n    typeEnd: \")\",\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `Seq(${items.join(\", \")})`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  dart: {\n    extension: \"dart\",\n    geometryExtension: \"dart\",\n    comment: \"//\",\n    string: '\"',\n    function: \"void\",\n    class: \"class\",\n    import: \"import\",\n    export: \"\",\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: \"}\",\n    objectProperty: (key: string, value: string) => `  ${value} ${key};`,\n    array: (items: string[]) => `[${items.join(\", \")}]`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n  r: {\n    extension: \"R\",\n    geometryExtension: \"R\",\n    comment: \"#\",\n    string: '\"',\n    function: \"function\",\n    class: \"setClass\",\n    import: \"library\",\n    export: \"\",\n    typeDeclaration: (name: string) => `setClass(\"${name}\", slots = list(`,\n    typeEnd: \"))\",\n    objectProperty: (key: string, value: string) => `\"${key}\" = \"${value}\",`,\n    array: (items: string[]) => `c(${items.join(\", \")})`,\n    stringLiteral: (value: string) => `\"${value}\"`,\n  },\n} as const;\n\ntype LanguageId = keyof typeof LANGUAGES;\n\n/**\n * Capitalizes the first letter of a string\n * Required for React components which must start with uppercase letters\n */\nfunction capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Sanitizes names to be valid identifiers\n */\nfunction sanitizeName(name: string): string {\n  // Replace invalid characters with underscores\n  let safeName = name.replace(/[^a-zA-Z0-9_]/g, \"_\");\n\n  // Ensure it starts with a letter\n  if (!/^[a-zA-Z_]/.test(safeName)) {\n    safeName = \"_\" + safeName;\n  }\n\n  // Handle reserved keywords\n  const reservedKeywords = [\n    \"default\",\n    \"function\",\n    \"class\",\n    \"export\",\n    \"import\",\n    \"let\",\n    \"const\",\n    \"var\",\n    \"continue\",\n    \"break\",\n    \"case\",\n  ];\n  if (reservedKeywords.includes(safeName.toLowerCase())) {\n    safeName = \"_\" + safeName;\n  }\n\n  return safeName;\n}\n\n/**\n * Formats array data for different languages with proper chunking for large datasets\n */\nfunction formatArrayData(\n  data: number[],\n  languageId: LanguageId,\n  chunkSize: number = 1000\n): string {\n  const lang = LANGUAGES[languageId];\n\n  if (data.length <= chunkSize) {\n    return lang.array(data.map(String));\n  }\n\n  // Handle large arrays with chunking\n  switch (languageId) {\n    case \"typescript\":\n    case \"javascript\":\n      return `new Float32Array([${data.join(\", \")}])`;\n\n    case \"python\":\n      return `np.array([${data.join(\", \")}], dtype=np.float32)`;\n\n    case \"java\":\n      return `new float[]{${data.join(\"f, \")}f}`;\n\n    case \"csharp\":\n      return `new float[]{${data.join(\"f, \")}f}`;\n\n    case \"cpp\":\n      return `{${data.join(\"f, \")}f}`;\n\n    case \"go\":\n      return `[]float32{${data.join(\", \")}}`;\n\n    case \"rust\":\n      return `vec![${data.join(\", \")}]`;\n\n    case \"swift\":\n      return `[${data.join(\", \")}]`;\n\n    default:\n      return lang.array(data.map(String));\n  }\n}\n\n/**\n * Generates a complete project structure from a GLTF model\n * Now with separate geometry files for better component management\n */\nexport function generateProjectStructure(\n  gltf: GLTF,\n  componentName: string,\n  displayMode: string = \"original\",\n  languageId: LanguageId = \"typescript\"\n): ProjectStructure {\n  const lang = LANGUAGES[languageId];\n  const meshes: MeshData[] = [];\n  const materials: MaterialData[] = [];\n  const geometries: GeometryData[] = [];\n  let totalVertices = 0;\n  let totalTriangles = 0;\n\n  gltf.scene.traverse((object: any) => {\n    if (object.isMesh) {\n      const mesh = object as THREE.Mesh;\n      const geometry = mesh.geometry;\n      totalVertices += geometry.attributes.position.count;\n      if (geometry.index) {\n        totalTriangles += geometry.index.count / 3;\n      } else {\n        totalTriangles += geometry.attributes.position.count / 3;\n      }\n\n      const meshName = mesh.name || `Mesh_${meshes.length}`;\n      const safeMeshName = sanitizeName(meshName);\n      const meshComponentName = getLanguageSpecificName(\n        safeMeshName,\n        languageId\n      );\n\n      const geometryFile = generateGeometryFile(\n        meshComponentName,\n        geometry,\n        languageId\n      );\n      geometries.push({\n        name: meshComponentName,\n        content: geometryFile,\n        originalName: meshName,\n      });\n\n      const meshComponent = generateMeshComponent(\n        meshComponentName,\n        geometry,\n        displayMode,\n        languageId\n      );\n      meshes.push({\n        name: meshComponentName,\n        content: meshComponent,\n        originalName: meshName,\n      });\n\n      const material = Array.isArray(mesh.material)\n        ? mesh.material[0]\n        : mesh.material;\n      const materialName = material.name || `Material_${materials.length}`;\n      const safeMaterialName = sanitizeName(materialName);\n      const materialComponentName = getLanguageSpecificName(\n        safeMaterialName,\n        languageId\n      );\n\n      // Extract geometry attributes\n      const hasNormals = !!geometry.attributes.normal;\n      const hasUvs = !!geometry.attributes.uv;\n\n      // Only add the material if it doesn't already exist\n      if (!materials.some((m) => m.name === materialComponentName)) {\n        const materialComponent = generateMaterialComponent(\n          materialComponentName,\n          material,\n          displayMode,\n          languageId,\n          hasNormals,\n          hasUvs\n        );\n\n        materials.push({\n          name: materialComponentName,\n          content: materialComponent,\n          originalName: materialName,\n        });\n      }\n    }\n  });\n\n  const componentComponentName = getLanguageSpecificName(\n    sanitizeName(componentName),\n    languageId\n  );\n  const indexContent = generateIndexComponent(\n    componentComponentName,\n    meshes,\n    materials,\n    displayMode,\n    languageId\n  );\n  const examplePageContent = generateExamplePage(\n    componentComponentName,\n    languageId\n  );\n\n  return {\n    componentName: componentComponentName,\n    indexContent,\n    examplePageContent,\n    meshes,\n    geometries,\n    materials,\n    totalVertices,\n    totalTriangles,\n  };\n}\n\n/**\n * Generates a separate geometry file for Three.js\n * Creates a reusable geometry object that can be imported by components\n */\nfunction generateGeometryFile(\n  meshName: string,\n  geometry: THREE.BufferGeometry,\n  languageId: LanguageId\n): string {\n  const positions = Array.from(geometry.attributes.position.array);\n  const normals = geometry.attributes.normal\n    ? Array.from(geometry.attributes.normal.array)\n    : null;\n  const uvs = geometry.attributes.uv\n    ? Array.from(geometry.attributes.uv.array)\n    : null;\n  const indices = geometry.index ? Array.from(geometry.index.array) : null;\n\n  const isLargeGeometry = positions.length > 100000;\n\n  switch (languageId) {\n    case \"typescript\":\n      return `import * as THREE from 'three';\n\n// ${meshName} geometry definition\nexport const ${meshName}Geometry = (() => {\n  const geometry = new THREE.BufferGeometry();\n  \n  ${isLargeGeometry\n          ? `// Large geometry - using chunked approach\n  const createGeometryChunk = (data: number[], itemSize: number) => {\n    const chunkSize = 50000;\n    const chunks: Float32Array[] = [];\n    for (let i = 0; i < data.length; i += chunkSize) {\n      const chunk = data.slice(i, i + chunkSize);\n      chunks.push(new Float32Array(chunk));\n    }\n    return chunks;\n  };\n  \n  const positionChunks = createGeometryChunk(${JSON.stringify(positions)}, 3);\n  const positions = new Float32Array(positionChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n  \n  ${normals\n            ? `const normalChunks = createGeometryChunk(${JSON.stringify(\n              normals\n            )}, 3);\n  const normals = new Float32Array(normalChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n  geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));`\n            : \"\"\n          }\n  \n  ${uvs\n            ? `const uvChunks = createGeometryChunk(${JSON.stringify(uvs)}, 2);\n  const uvs = new Float32Array(uvChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n  geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));`\n            : \"\"\n          }\n  \n  ${indices\n            ? `const indexChunks = createGeometryChunk(${JSON.stringify(indices)}, 1);\n  const indices = new Uint16Array(indexChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n  geometry.setIndex(new THREE.BufferAttribute(indices, 1));`\n            : \"\"\n          }`\n          : `// Position data\n  const positions = ${formatArrayData(positions, languageId)};\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n  \n  ${normals\n            ? `// Normal data\n  const normals = ${formatArrayData(normals, languageId)};\n  geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));`\n            : \"\"\n          }\n  \n  ${uvs\n            ? `// UV data\n  const uvs = ${formatArrayData(uvs, languageId)};\n  geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));`\n            : \"\"\n          }\n  \n  ${indices\n            ? `// Index data\n  const indices = new Uint16Array(${JSON.stringify(indices)});\n  geometry.setIndex(new THREE.BufferAttribute(indices, 1));`\n            : \"\"\n          }`\n        }\n\n  geometry.computeVertexNormals();\n  return geometry;\n})();\n`;\n    case \"javascript\":\n      return `import * as THREE from 'three';\n    // ${meshName} geometry definition\n    export const ${meshName}Geometry = (() => {\n      const geometry = new THREE.BufferGeometry();\n      // Position data\n      const positions = ${formatArrayData(positions, languageId)};\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      ${normals\n          ? `// Normal data\n      const normals = ${formatArrayData(normals, languageId)};\n      geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));`\n          : \"\"\n        }\n      ${uvs\n          ? `// UV data\n      const uvs = ${formatArrayData(uvs, languageId)};\n      geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));`\n          : \"\"\n        }\n      ${indices\n          ? `// Index data\n      const indices = new Uint16Array(${JSON.stringify(indices)});\n      geometry.setIndex(new THREE.BufferAttribute(indices, 1));`\n          : \"\"\n        }\n      geometry.computeVertexNormals();\n      return geometry;\n    })();\n    `;\n    case \"python\":\n      return `import numpy as np\nimport moderngl\nfrom typing import Optional\n\nclass ${meshName}Geometry:\n    \"\"\"${meshName} geometry definition for ModernGL\"\"\"\n    \n    def __init__(self):\n        # Position data\n        self.positions = ${formatArrayData(positions, languageId)}\n        ${normals\n          ? `# Normal data\n        self.normals = ${formatArrayData(normals, languageId)}`\n          : \"self.normals = None\"\n        }\n        ${uvs\n          ? `# UV data\n        self.uvs = ${formatArrayData(uvs, languageId)}`\n          : \"self.uvs = None\"\n        }\n        ${indices\n          ? `# Index data\n        self.indices = np.array([${indices.join(\", \")}], dtype=np.uint32)`\n          : \"self.indices = None\"\n        }\n    \n    def create_vao(self, ctx: moderngl.Context, program: moderngl.Program) -> moderngl.VertexArray:\n        \"\"\"Create vertex array object for rendering\"\"\"\n        vbo_positions = ctx.buffer(self.positions.tobytes())\n        \n        vao_content = [(vbo_positions, '3f', 'in_position')]\n        \n        ${normals\n          ? `if self.normals is not None:\n            vbo_normals = ctx.buffer(self.normals.tobytes())\n            vao_content.append((vbo_normals, '3f', 'in_normal'))`\n          : \"\"\n        }\n        \n        ${uvs\n          ? `if self.uvs is not None:\n            vbo_uvs = ctx.buffer(self.uvs.tobytes())\n            vao_content.append((vbo_uvs, '2f', 'in_uv'))`\n          : \"\"\n        }\n        \n        ${indices\n          ? `if self.indices is not None:\n            ibo = ctx.buffer(self.indices.tobytes())\n            return ctx.vertex_array(program, vao_content, index_buffer=ibo)\n        else:\n            return ctx.vertex_array(program, vao_content)`\n          : \"return ctx.vertex_array(program, vao_content)\"\n        }\n`;\n\n    case \"java\":\n      return `import java.nio.FloatBuffer;\nimport java.nio.IntBuffer;\nimport org.lwjgl.BufferUtils;\nimport static org.lwjgl.opengl.GL30.*;\n\n/**\n * ${meshName} geometry definition for LWJGL OpenGL\n */\npublic class ${meshName}Geometry {\n    private int vao;\n    private int vbo;\n    ${indices ? \"private int ebo;\" : \"\"}\n    private int vertexCount;\n    \n    public ${meshName}Geometry() {\n        setupBuffers();\n    }\n    \n    private void setupBuffers() {\n        // Position data\n        float[] positions = ${formatArrayData(positions, languageId)};\n        ${normals\n          ? `float[] normals = ${formatArrayData(normals || [], languageId)};`\n          : \"\"\n        }\n        ${uvs ? `float[] uvs = ${formatArrayData(uvs || [], languageId)};` : \"\"}\n        ${indices ? `int[] indices = {${indices.join(\", \")}};` : \"\"}\n        \n        vao = glGenVertexArrays();\n        vbo = glGenBuffers();\n        ${indices ? \"ebo = glGenBuffers();\" : \"\"}\n        \n        glBindVertexArray(vao);\n        \n        // Position buffer\n        glBindBuffer(GL_ARRAY_BUFFER, vbo);\n        FloatBuffer positionBuffer = BufferUtils.createFloatBuffer(positions.length);\n        positionBuffer.put(positions).flip();\n        glBufferData(GL_ARRAY_BUFFER, positionBuffer, GL_STATIC_DRAW);\n        glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * Float.BYTES, 0);\n        glEnableVertexAttribArray(0);\n        \n        ${normals\n          ? `// Normal buffer\n        FloatBuffer normalBuffer = BufferUtils.createFloatBuffer(normals.length);\n        normalBuffer.put(normals).flip();\n        glBufferData(GL_ARRAY_BUFFER, normalBuffer, GL_STATIC_DRAW);\n        glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * Float.BYTES, 0);\n        glEnableVertexAttribArray(1);`\n          : \"\"\n        }\n        \n        ${uvs\n          ? `// UV buffer\n        FloatBuffer uvBuffer = BufferUtils.createFloatBuffer(uvs.length);\n        uvBuffer.put(uvs).flip();\n        glBufferData(GL_ARRAY_BUFFER, uvBuffer, GL_STATIC_DRAW);\n        glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * Float.BYTES, 0);\n        glEnableVertexAttribArray(2);`\n          : \"\"\n        }\n        \n        ${indices\n          ? `// Element buffer\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);\n        IntBuffer indexBuffer = BufferUtils.createIntBuffer(indices.length);\n        indexBuffer.put(indices).flip();\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indexBuffer, GL_STATIC_DRAW);\n        vertexCount = indices.length;`\n          : `vertexCount = positions.length / 3;`\n        }\n        \n        glBindVertexArray(0);\n    }\n    \n    public void render() {\n        glBindVertexArray(vao);\n        ${indices\n          ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0);\"\n          : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount);\"\n        }\n        glBindVertexArray(0);\n    }\n    \n    public void cleanup() {\n        glDeleteVertexArrays(vao);\n        glDeleteBuffers(vbo);\n        ${indices ? \"glDeleteBuffers(ebo);\" : \"\"}\n    }\n}\n`;\n\n    case \"csharp\":\n      return `using System;\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Mathematics;\n\n/// <summary>\n/// ${meshName} geometry definition for OpenTK\n/// </summary>\npublic class ${meshName}Geometry : IDisposable\n{\n    private int _vao;\n    private int _vbo;\n    ${indices ? \"private int _ebo;\" : \"\"}\n    private int _vertexCount;\n    \n    public ${meshName}Geometry()\n    {\n        SetupBuffers();\n    }\n    \n    private void SetupBuffers()\n    {\n        // Position data\n        float[] positions = ${formatArrayData(positions, languageId)};\n        ${normals\n          ? `float[] normals = ${formatArrayData(normals || [], languageId)};`\n          : \"\"\n        }\n        ${uvs ? `float[] uvs = ${formatArrayData(uvs || [], languageId)};` : \"\"}\n        ${indices ? `uint[] indices = {${indices.join(\", \")}};` : \"\"}\n        \n        _vao = GL.GenVertexArray();\n        _vbo = GL.GenBuffer();\n        ${indices ? \"_ebo = GL.GenBuffer();\" : \"\"}\n        \n        GL.BindVertexArray(_vao);\n        \n        // Position buffer\n        GL.BindBuffer(BufferTarget.ArrayBuffer, _vbo);\n        GL.BufferData(BufferTarget.ArrayBuffer, positions.Length * sizeof(float), positions, BufferUsageHint.StaticDraw);\n        GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\n        GL.EnableVertexAttribArray(0);\n        \n        ${normals\n          ? `// Normal buffer\n        GL.BufferData(BufferTarget.ArrayBuffer, normals.Length * sizeof(float), normals, BufferUsageHint.StaticDraw);\n        GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\n        GL.EnableVertexAttribArray(1);`\n          : \"\"\n        }\n        \n        ${uvs\n          ? `// UV buffer\n        GL.BufferData(BufferTarget.ArrayBuffer, uvs.Length * sizeof(float), uvs, BufferUsageHint.StaticDraw);\n        GL.VertexAttribPointer(2, 2, VertexAttribPointerType.Float, false, 2 * sizeof(float), 0);\n        GL.EnableVertexAttribArray(2);`\n          : \"\"\n        }\n        \n        ${indices\n          ? `// Element buffer\n        GL.BindBuffer(BufferTarget.ElementArrayBuffer, _ebo);\n        GL.BufferData(BufferTarget.ElementArrayBuffer, indices.Length * sizeof(uint), indices, BufferUsageHint.StaticDraw);\n        _vertexCount = indices.Length;`\n          : `_vertexCount = positions.Length / 3;`\n        }\n        \n        GL.BindVertexArray(0);\n    }\n    \n    public void Render()\n    {\n        GL.BindVertexArray(_vao);\n        ${indices\n          ? \"GL.DrawElements(PrimitiveType.Triangles, _vertexCount, DrawElementsType.UnsignedInt, 0);\"\n          : \"GL.DrawArrays(PrimitiveType.Triangles, 0, _vertexCount);\"\n        }\n        GL.BindVertexArray(0);\n    }\n    \n    public void Dispose()\n    {\n        GL.DeleteVertexArray(_vao);\n        GL.DeleteBuffer(_vbo);\n        ${indices ? \"GL.DeleteBuffer(_ebo);\" : \"\"}\n    }\n}\n`;\n\n    case \"cpp\":\n      return `#pragma once\n#include <vector>\n#include <GL/glew.h>\n#include <glm/glm.hpp>\n\n/**\n * ${meshName} geometry definition for OpenGL with GLM\n */\nclass ${meshName}Geometry {\nprivate:\n    GLuint VAO, VBO${indices ? \", EBO\" : \"\"};\n    ${indices ? \"int indexCount;\" : \"int vertexCount;\"}\n    \npublic:\n    ${meshName}Geometry() {\n        setupBuffers();\n    }\n    \n    ~${meshName}Geometry() {\n        cleanup();\n    }\n    \nprivate:\n    void setupBuffers() {\n        // Position data\n        std::vector<float> positions = ${formatArrayData(\n        positions,\n        languageId\n      )};\n        ${normals\n          ? `std::vector<float> normals = ${formatArrayData(\n            normals || [],\n            languageId\n          )};`\n          : \"\"\n        }\n        ${uvs\n          ? `std::vector<float> uvs = ${formatArrayData(\n            uvs || [],\n            languageId\n          )};`\n          : \"\"\n        }\n        ${indices\n          ? `std::vector<unsigned int> indices = {${indices.join(\", \")}};`\n          : \"\"\n        }\n        \n        glGenVertexArrays(1, &VAO);\n        glGenBuffers(1, &VBO);\n        ${indices ? \"glGenBuffers(1, &EBO);\" : \"\"}\n        \n        glBindVertexArray(VAO);\n        \n        // Position buffer\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glBufferData(GL_ARRAY_BUFFER, positions.size() * sizeof(float), positions.data(), GL_STATIC_DRAW);\n        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(0);\n        \n        ${normals\n          ? `// Normal buffer\n        glBufferData(GL_ARRAY_BUFFER, normals.size() * sizeof(float), normals.data(), GL_STATIC_DRAW);\n        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(1);`\n          : \"\"\n        }\n        \n        ${uvs\n          ? `// UV buffer\n        glBufferData(GL_ARRAY_BUFFER, uvs.size() * sizeof(float), uvs.data(), GL_STATIC_DRAW);\n        glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(2);`\n          : \"\"\n        }\n        \n        ${indices\n          ? `// Element buffer\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), indices.data(), GL_STATIC_DRAW);\n        indexCount = indices.size();`\n          : `vertexCount = positions.size() / 3;`\n        }\n        \n        glBindVertexArray(0);\n    }\n    \npublic:\n    void render() {\n        glBindVertexArray(VAO);\n        ${indices\n          ? \"glDrawElements(GL_TRIANGLES, indexCount, GL_UNSIGNED_INT, 0);\"\n          : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount);\"\n        }\n        glBindVertexArray(0);\n    }\n    \n    void cleanup() {\n        glDeleteVertexArrays(1, &VAO);\n        glDeleteBuffers(1, &VBO);\n        ${indices ? \"glDeleteBuffers(1, &EBO);\" : \"\"}\n    }\n};\n`;\n\n    case \"go\":\n      return `package geometry\n\nimport (\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"github.com/go-gl/mathgl/mgl32\"\n)\n\n// ${meshName}Geometry represents the geometry data for ${meshName}\ntype ${meshName}Geometry struct {\n    vao uint32\n    vbo uint32\n    ${indices ? \"ebo uint32\" : \"\"}\n    ${indices ? \"indexCount int32\" : \"vertexCount int32\"}\n}\n\n// New${meshName}Geometry creates a new ${meshName} geometry\nfunc New${meshName}Geometry() *${meshName}Geometry {\n    geom := &${meshName}Geometry{}\n    geom.setupBuffers()\n    return geom\n}\n\nfunc (g *${meshName}Geometry) setupBuffers() {\n    // Position data\n    positions := ${formatArrayData(positions, languageId)}\n    ${normals ? `normals := ${formatArrayData(normals || [], languageId)}` : \"\"}\n    ${uvs ? `uvs := ${formatArrayData(uvs || [], languageId)}` : \"\"}\n    ${indices ? `indices := []uint32{${indices.join(\", \")}}` : \"\"}\n    \n    gl.GenVertexArrays(1, &g.vao)\n    gl.GenBuffers(1, &g.vbo)\n    ${indices ? \"gl.GenBuffers(1, &g.ebo)\" : \"\"}\n    \n    gl.BindVertexArray(g.vao)\n    \n    // Position buffer\n    gl.BindBuffer(gl.ARRAY_BUFFER, g.vbo)\n    gl.BufferData(gl.ARRAY_BUFFER, len(positions)*4, gl.Ptr(positions), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 3*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(0)\n    \n    ${normals\n          ? `// Normal buffer\n    gl.BufferData(gl.ARRAY_BUFFER, len(normals)*4, gl.Ptr(normals), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 3*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(1)`\n          : \"\"\n        }\n    \n    ${uvs\n          ? `// UV buffer\n    gl.BufferData(gl.ARRAY_BUFFER, len(uvs)*4, gl.Ptr(uvs), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(2, 2, gl.FLOAT, false, 2*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(2)`\n          : \"\"\n        }\n    \n    ${indices\n          ? `// Element buffer\n    gl.BindBuffer(gl.ELEMENT_ARRAY_BUFFER, g.ebo)\n    gl.BufferData(gl.ELEMENT_ARRAY_BUFFER, len(indices)*4, gl.Ptr(indices), gl.STATIC_DRAW)\n    g.indexCount = int32(len(indices))`\n          : `g.vertexCount = int32(len(positions) / 3)`\n        }\n    \n    gl.BindVertexArray(0)\n}\n\n// Render renders the geometry\nfunc (g *${meshName}Geometry) Render() {\n    gl.BindVertexArray(g.vao)\n    ${indices\n          ? \"gl.DrawElements(gl.TRIANGLES, g.indexCount, gl.UNSIGNED_INT, gl.PtrOffset(0))\"\n          : \"gl.DrawArrays(gl.TRIANGLES, 0, g.vertexCount)\"\n        }\n    gl.BindVertexArray(0)\n}\n\n// Cleanup cleans up OpenGL resources\nfunc (g *${meshName}Geometry) Cleanup() {\n    gl.DeleteVertexArrays(1, &g.vao)\n    gl.DeleteBuffers(1, &g.vbo)\n    ${indices ? \"gl.DeleteBuffers(1, &g.ebo)\" : \"\"}\n}\n`;\n\n    case \"rust\":\n      return `use wgpu::util::DeviceExt;\n\n/// ${meshName} geometry definition for wgpu\npub struct ${meshName}Geometry {\n    vertex_buffer: wgpu::Buffer,\n    ${indices ? \"index_buffer: wgpu::Buffer,\" : \"\"}\n    ${indices ? \"num_indices: u32,\" : \"num_vertices: u32,\"}\n}\n\nimpl ${meshName}Geometry {\n    pub fn new(device: &wgpu::Device) -> Self {\n        // Position data\n        let positions: Vec<f32> = vec![${positions.join(\", \")}];\n        ${normals\n          ? `let normals: Vec<f32> = vec![${(normals || []).join(\", \")}];`\n          : \"\"\n        }\n        ${uvs ? `let uvs: Vec<f32> = vec![${(uvs || []).join(\", \")}];` : \"\"}\n        ${indices ? `let indices: Vec<u16> = vec![${indices.join(\", \")}];` : \"\"}\n        \n        // Create vertex data\n        let mut vertex_data = Vec::new();\n        for i in (0..positions.len()).step_by(3) {\n            vertex_data.extend_from_slice(&positions[i..i+3]);\n            ${normals\n          ? `if i < normals.len() - 2 {\n                vertex_data.extend_from_slice(&normals[i..i+3]);\n            }`\n          : \"\"\n        }\n            ${uvs\n          ? `let uv_index = (i / 3) * 2;\n            if uv_index < uvs.len() - 1 {\n                vertex_data.extend_from_slice(&uvs[uv_index..uv_index+2]);\n            }`\n          : \"\"\n        }\n        }\n        \n        let vertex_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {\n            label: Some(\"${meshName} Vertex Buffer\"),\n            contents: bytemuck::cast_slice(&vertex_data),\n            usage: wgpu::BufferUsages::VERTEX,\n        });\n        \n        ${indices\n          ? `let index_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {\n            label: Some(\"${meshName} Index Buffer\"),\n            contents: bytemuck::cast_slice(&indices),\n            usage: wgpu::BufferUsages::INDEX,\n        });\n        \n        Self {\n            vertex_buffer,\n            index_buffer,\n            num_indices: indices.len() as u32,\n        }`\n          : `Self {\n            vertex_buffer,\n            num_vertices: (positions.len() / 3) as u32,\n        }`\n        }\n    }\n    \n    pub fn render<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n        render_pass.set_vertex_buffer(0, self.vertex_buffer.slice(..));\n        ${indices\n          ? `render_pass.set_index_buffer(self.index_buffer.slice(..), wgpu::IndexFormat::Uint16);\n        render_pass.draw_indexed(0..self.num_indices, 0, 0..1);`\n          : \"render_pass.draw(0..self.num_vertices, 0..1);\"\n        }\n    }\n}\n`;\n\n    case \"swift\":\n      return `import Metal\nimport simd\n\n/// ${meshName} geometry definition for Metal\nclass ${meshName}Geometry {\n    private var vertexBuffer: MTLBuffer?\n    ${indices ? \"private var indexBuffer: MTLBuffer?\" : \"\"}\n    ${indices ? \"private var indexCount: Int\" : \"private var vertexCount: Int\"}\n    \n    init(device: MTLDevice) {\n        // Position data\n        let positions: [Float] = [${positions.join(\", \")}]\n        ${normals\n          ? `let normals: [Float] = [${(normals || []).join(\", \")}]`\n          : \"\"\n        }\n        ${uvs ? `let uvs: [Float] = [${(uvs || []).join(\", \")}]` : \"\"}\n        ${indices ? `let indices: [UInt16] = [${indices.join(\", \")}]` : \"\"}\n        \n        // Create vertex data\n        var vertexData: [Float] = []\n        for i in stride(from: 0, to: positions.count, by: 3) {\n            vertexData.append(contentsOf: [positions[i], positions[i+1], positions[i+2]])\n            ${normals\n          ? `if i < normals.count - 2 {\n                vertexData.append(contentsOf: [normals[i], normals[i+1], normals[i+2]])\n            }`\n          : \"\"\n        }\n            ${uvs\n          ? `let uvIndex = (i / 3) * 2\n            if uvIndex < uvs.count - 1 {\n                vertexData.append(contentsOf: [uvs[uvIndex], uvs[uvIndex+1]])\n            }`\n          : \"\"\n        }\n        }\n        \n        vertexBuffer = device.makeBuffer(\n            bytes: vertexData,\n            length: vertexData.count * MemoryLayout<Float>.size,\n            options: []\n        )\n        \n        ${indices\n          ? `indexBuffer = device.makeBuffer(\n            bytes: indices,\n            length: indices.count * MemoryLayout<UInt16>.size,\n            options: []\n        )\n        indexCount = indices.count`\n          : `vertexCount = positions.count / 3`\n        }\n    }\n    \n    func render(renderEncoder: MTLRenderCommandEncoder) {\n        guard let vertexBuffer = vertexBuffer else { return }\n        \n        renderEncoder.setVertexBuffer(vertexBuffer, offset: 0, index: 0)\n        \n        ${indices\n          ? `guard let indexBuffer = indexBuffer else { return }\n        renderEncoder.drawIndexedPrimitives(\n            type: .triangle,\n            indexCount: indexCount,\n            indexType: .uint16,\n            indexBuffer: indexBuffer,\n            indexBufferOffset: 0\n        )`\n          : `renderEncoder.drawPrimitives(\n            type: .triangle,\n            vertexStart: 0,\n            vertexCount: vertexCount\n        )`\n        }\n    }\n}\n`;\n    case \"php\":\n      return `<?php\n    /**\n     * ${meshName} geometry definition for PHP-GLFW\n     */\n    class ${meshName}Geometry {\n        private $vao;\n        private $vbo;\n        ${indices ? \"private $ebo;\" : \"\"}\n        private $vertexCount;\n        public function __construct() {\n            $this->setupBuffers();\n        }\n        private function setupBuffers() {\n            // Position data\n            $positions = ${formatArrayData(positions, languageId)};\n            ${normals\n          ? `$normals = ${formatArrayData(normals || [], languageId)};`\n          : \"\"\n        }\n            ${uvs ? `$uvs = ${formatArrayData(uvs || [], languageId)};` : \"\"}\n            ${indices ? `$indices = array(${indices.join(\", \")});` : \"\"}\n            \n            $this->vao = glfwCreateVertexArray();\n            $this->vbo = glfwCreateBuffer();\n            ${indices ? \"$this->ebo = glfwCreateBuffer();\" : \"\"}\n            \n            glfwBindVertexArray($this->vao);\n            // Position buffer\n            glfwBindBuffer(GLFW_ARRAY_BUFFER, $this->vbo);\n            glfwBufferData(GLFW_ARRAY_BUFFER, count($positions) * 4, $positions, GLFW_STATIC_DRAW);\n            glfwVertexAttribPointer(0, 3, GLFW_FLOAT, false, 3 * 4, 0);\n            glfwEnableVertexAttribArray(0);\n            ${normals\n          ? `// Normal buffer\n            glfwBufferData(GLFW_ARRAY_BUFFER, count($normals) * 4, $normals, GLFW_STATIC_DRAW);\n            glfwVertexAttribPointer(1, 3, GLFW_FLOAT, false, 3 * 4, 0);\n            glfwEnableVertexAttribArray(1);`\n          : \"\"\n        }\n            ${uvs\n          ? `// UV buffer\n            glfwBufferData(GLFW_ARRAY_BUFFER, count($uvs) * 4, $uvs, GLFW_STATIC_DRAW);\n            glfwVertexAttribPointer(2, 2, GLFW_FLOAT, false, 2 * 4, 0);\n            glfwEnableVertexAttribArray(2);`\n          : \"\"\n        }\n            ${indices\n          ? `// Element buffer\n            glfwBindBuffer(GLFW_ELEMENT_ARRAY_BUFFER, $this->ebo);\n            glfwBufferData(GLFW_ELEMENT_ARRAY_BUFFER, count($indices) * 4, $indices, GLFW_STATIC_DRAW);\n            $this->vertexCount = count($indices);`\n          : `$this->vertexCount = count($positions) / 3;`\n        }\n            glfwBindVertexArray(0);\n        }\n        public function render() {\n            glfwBindVertexArray($this->vao);\n            ${indices\n          ? \"glfwDrawElements(GLFW_TRIANGLES, $this->vertexCount, GLFW_UNSIGNED_INT, 0);\"\n          : \"glfwDrawArrays(GLFW_TRIANGLES, 0, $this->vertexCount);\"\n        }\n            glfwBindVertexArray(0);\n        }\n    }\n    `;\n    case \"ruby\":\n      return `# ${meshName} geometry definition for Ruby OpenGL\n    class ${meshName}Geometry\n      def initialize\n        setup_buffers\n      end\n\n      private\n\n      def setup_buffers\n        # Position data\n        positions = ${formatArrayData(positions, languageId)}\n        ${normals\n          ? `normals = ${formatArrayData(normals || [], languageId)}`\n          : \"\"\n        }\n        ${uvs ? `uvs = ${formatArrayData(uvs || [], languageId)}` : \"\"}\n        ${indices ? `indices = [${indices.join(\", \")}]` : \"\"}\n\n        @vao = glGenVertexArrays(1)[0]\n        @vbo = glGenBuffers(1)[0]\n        ${indices ? \"@ebo = glGenBuffers(1)[0]\" : \"\"}\n\n        glBindVertexArray(@vao)\n\n        # Position buffer\n        glBindBuffer(GL::ARRAY_BUFFER, @vbo)\n        glBufferData(GL::ARRAY_BUFFER, positions.pack('F*'), GL::STATIC_DRAW)\n        glVertexAttribPointer(0, 3, GL::FLOAT, false, 3 * 4, 0)\n        glEnableVertexAttribArray(0)\n\n        ${normals\n          ? `# Normal buffer\n        glBufferData(GL::ARRAY_BUFFER, normals.pack('F*'), GL::STATIC_DRAW)\n        glVertexAttribPointer(1, 3, GL::FLOAT, false, 3 * 4, 0)\n        glEnableVertexAttribArray(1)`\n          : \"\"\n        }\n\n        ${uvs\n          ? `# UV buffer\n        glBufferData(GL::ARRAY_BUFFER, uvs.pack('F*'), GL::STATIC_DRAW)\n        glVertexAttribPointer(2, 2, GL::FLOAT, false, 2 * 4, 0)\n        glEnableVertexAttribArray(2)`\n          : \"\"\n        }\n\n        ${indices\n          ? `# Element buffer\n        glBindBuffer(GL::ELEMENT_ARRAY_BUFFER, @ebo)\n        glBufferData(GL::ELEMENT_ARRAY_BUFFER, indices.pack('I*'), GL::STATIC_DRAW)\n        @vertex_count = indices.length`\n          : \"@vertex_count = positions.length / 3\"\n        }\n\n        glBindVertexArray(0)\n      end\n\n      public\n\n      def render\n        glBindVertexArray(@vao)\n        ${indices\n          ? \"glDrawElements(GL::TRIANGLES, @vertex_count, GL::UNSIGNED_INT, nil)\"\n          : \"glDrawArrays(GL::TRIANGLES, 0, @vertex_count)\"\n        }\n        glBindVertexArray(0)\n      end\n    end\n    `;\n    case \"scala\":\n      return `import org.lwjgl.opengl.GL30._\n    import org.lwjgl.system.MemoryUtil._\n    /**\n     * ${meshName} geometry definition for LWJGL in Scala\n     */\n    class ${meshName}Geometry {\n      private var vao: Int = _\n      private var vbo: Int = _\n      ${indices ? \"private var ebo: Int = _\" : \"\"}\n      private var vertexCount: Int = _\n      \n      setupBuffers()\n      \n      private def setupBuffers(): Unit = {\n        // Position data\n        val positions = ${formatArrayData(positions, languageId)}\n        ${normals\n          ? `val normals = ${formatArrayData(normals || [], languageId)}`\n          : \"\"\n        }\n        ${uvs ? `val uvs = ${formatArrayData(uvs || [], languageId)}` : \"\"}\n        ${indices ? `val indices = Array(${indices.join(\", \")})` : \"\"}\n        \n        vao = glGenVertexArrays()\n        vbo = glGenBuffers()\n        ${indices ? \"ebo = glGenBuffers()\" : \"\"}\n        \n        glBindVertexArray(vao)\n        // Position buffer\n        glBindBuffer(GL_ARRAY_BUFFER, vbo)\n        glBufferData(GL_ARRAY_BUFFER, positions, GL_STATIC_DRAW)\n        glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * 4, 0)\n        glEnableVertexAttribArray(0)\n        ${normals\n          ? `// Normal buffer\n        glBufferData(GL_ARRAY_BUFFER, normals, GL_STATIC_DRAW)\n        glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * 4, 0)\n        glEnableVertexAttribArray(1)`\n          : \"\"\n        }\n        ${uvs\n          ? `// UV buffer\n        glBufferData(GL_ARRAY_BUFFER, uvs, GL_STATIC_DRAW)\n        glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * 4, 0)\n        glEnableVertexAttribArray(2)`\n          : \"\"\n        }\n        ${indices\n          ? `// Element buffer\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo)\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW)\n        vertexCount = indices.length`\n          : \"vertexCount = positions.length / 3\"\n        }\n        glBindVertexArray(0)\n      }\n      \n      def render(): Unit = {\n        glBindVertexArray(vao)\n        ${indices\n          ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0L)\"\n          : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount)\"\n        }\n        glBindVertexArray(0)\n      }\n    }\n    `;\n    case \"kotlin\":\n      return `import org.lwjgl.opengl.GL30.*\n    import org.lwjgl.system.MemoryUtil.*\n    /**\n     * ${meshName} geometry definition for LWJGL in Kotlin\n     */\n    class ${meshName}Geometry {\n        private var vao: Int = 0\n        private var vbo: Int = 0\n        ${indices ? \"private var ebo: Int = 0\" : \"\"}\n        private var vertexCount: Int = 0\n\n        init {\n            setupBuffers()\n        }\n\n        private fun setupBuffers() {\n            // Position data\n            val positions = ${formatArrayData(positions, languageId)}\n            ${normals\n          ? `val normals = ${formatArrayData(normals || [], languageId)}`\n          : \"\"\n        }\n            ${uvs ? `val uvs = ${formatArrayData(uvs || [], languageId)}` : \"\"}\n            ${indices ? `val indices = intArrayOf(${indices.join(\", \")})` : \"\"}\n\n            vao = glGenVertexArrays()\n            vbo = glGenBuffers()\n            ${indices ? \"ebo = glGenBuffers()\" : \"\"}\n\n            glBindVertexArray(vao)\n            // Position buffer\n            glBindBuffer(GL_ARRAY_BUFFER, vbo)\n            glBufferData(GL_ARRAY_BUFFER, positions, GL_STATIC_DRAW)\n            glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * 4, 0)\n            glEnableVertexAttribArray(0)\n            ${normals\n          ? `// Normal buffer\n            glBufferData(GL_ARRAY_BUFFER, normals, GL_STATIC_DRAW)\n            glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * 4, 0)\n            glEnableVertexAttribArray(1)`\n          : \"\"\n        }\n            ${uvs\n          ? `// UV buffer\n            glBufferData(GL_ARRAY_BUFFER, uvs, GL_STATIC_DRAW)\n            glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * 4, 0)\n            glEnableVertexAttribArray(2)`\n          : \"\"\n        }\n            ${indices\n          ? `// Element buffer\n            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo)\n            glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW)\n            vertexCount = indices.size`\n          : \"vertexCount = positions.size / 3\"\n        }\n            glBindVertexArray(0)\n        }\n\n        fun render() {\n            glBindVertexArray(vao)\n            ${indices\n          ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0L)\"\n          : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount)\"\n        }\n            glBindVertexArray(0)\n        }\n    }\n    `;\n    case \"dart\":\n      return `import 'dart:ffi';\n    import 'package:ffi/ffi.dart';\n    import 'package:opengl/opengl.dart';\n    /**\n     * ${meshName} geometry definition for OpenGL in Dart\n     */\n    class ${meshName}Geometry {\n      int vao = 0;\n      int vbo = 0;\n      ${indices ? \"int ebo = 0;\" : \"\"}\n      int vertexCount = 0;\n\n      ${meshName}Geometry() {\n        setupBuffers();\n      }\n\n      void setupBuffers() {\n        // Position data\n        final positions = ${formatArrayData(positions, languageId)};\n        ${normals\n          ? `final normals = ${formatArrayData(normals || [], languageId)};`\n          : \"\"\n        }\n        ${uvs ? `final uvs = ${formatArrayData(uvs || [], languageId)};` : \"\"}\n        ${indices ? `final indices = [${indices.join(\", \")}];` : \"\"}\n\n        vao = glGenVertexArrays();\n        vbo = glGenBuffers();\n        ${indices ? \"ebo = glGenBuffers();\" : \"\"}\n\n        glBindVertexArray(vao);\n        // Position buffer\n        glBindBuffer(GL_ARRAY_BUFFER, vbo);\n        glBufferData(GL_ARRAY_BUFFER, positions, GL_STATIC_DRAW);\n        glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * 4, 0);\n        glEnableVertexAttribArray(0);\n        ${normals\n          ? `// Normal buffer\n        glBufferData(GL_ARRAY_BUFFER, normals, GL_STATIC_DRAW);\n        glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * 4, 0);\n        glEnableVertexAttribArray(1);`\n          : \"\"\n        }\n        ${uvs\n          ? `// UV buffer\n        glBufferData(GL_ARRAY_BUFFER, uvs, GL_STATIC_DRAW);\n        glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * 4, 0);\n        glEnableVertexAttribArray(2);`\n          : \"\"\n        }\n        ${indices\n          ? `// Element buffer\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW);\n        vertexCount = indices.length;`\n          : \"vertexCount = positions.length ~/ 3;\"\n        }\n        glBindVertexArray(0);\n      }\n\n      void render() {\n        glBindVertexArray(vao);\n        ${indices\n          ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0);\"\n          : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount);\"\n        }\n        glBindVertexArray(0);\n      }\n    }\n    `;\n    case \"r\":\n      return `#' ${meshName} geometry definition for R OpenGL\n    #' @export\n    ${meshName}Geometry <- function() {\n      # Position data\n      positions <- ${formatArrayData(positions, languageId)}\n      ${normals\n          ? `normals <- ${formatArrayData(normals || [], languageId)}`\n          : \"\"\n        }\n      ${uvs ? `uvs <- ${formatArrayData(uvs || [], languageId)}` : \"\"}\n      ${indices ? `indices <- c(${indices.join(\", \")})` : \"\"}\n      \n      # Create buffers\n      vao <- glCreateVertexArrays(1)\n      vbo <- glCreateBuffers(1)\n      ${indices ? \"ebo <- glCreateBuffers(1)\" : \"\"}\n      \n      glBindVertexArray(vao)\n      # Position buffer\n      glBindBuffer(GL_ARRAY_BUFFER, vbo)\n      glBufferData(GL_ARRAY_BUFFER, positions, GL_STATIC_DRAW)\n      glVertexAttribPointer(0, 3, GL_FLOAT, FALSE, 3 * 4, 0)\n      glEnableVertexAttribArray(0)\n      ${normals\n          ? `# Normal buffer\n      glBufferData(GL_ARRAY_BUFFER, normals, GL_STATIC_DRAW)\n      glVertexAttribPointer(1, 3, GL_FLOAT, FALSE, 3 * 4, 0)\n      glEnableVertexAttribArray(1)`\n          : \"\"\n        }\n      ${uvs\n          ? `# UV buffer\n      glBufferData(GL_ARRAY_BUFFER, uvs, GL_STATIC_DRAW)\n      glVertexAttribPointer(2, 2, GL_FLOAT, FALSE, 2 * 4, 0)\n      glEnableVertexAttribArray(2)`\n          : \"\"\n        }\n      ${indices\n          ? `# Element buffer\n      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo)\n      glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW)\n      vertexCount <- length(indices)`\n          : \"vertexCount <- length(positions) / 3\"\n        }\n      glBindVertexArray(0)\n      \n      # Return geometry object\n      list(\n        vao = vao,\n        render = function() {\n          glBindVertexArray(vao)\n          ${indices\n          ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0)\"\n          : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount)\"\n        }\n          glBindVertexArray(0)\n        }\n      )\n    }\n    `;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateGeometryFile(meshName, geometry, \"typescript\");\n  }\n}\n\n/**\n * Generates a mesh component that imports geometry from a separate file\n * Component name starts with capital letter as required by React\n */\nfunction generateMeshComponent(\n  meshName: string,\n  _geometry: THREE.BufferGeometry,\n  displayMode: string,\n  languageId: LanguageId\n): string {\n  switch (languageId) {\n    case \"typescript\":\n      return `import React from 'react';\nimport { ${meshName}Geometry } from '../geometries/${meshName}Geometry';\n\ninterface ${meshName}Props {\n  [key: string]: any;\n}\n\n/**\n * ${meshName} component\n * Simple wrapper that uses pre-defined geometry\n * Easy to modify without touching geometry data\n */\nexport default function ${meshName}(props: ${meshName}Props) {\n  return <mesh geometry={${meshName}Geometry} {...props} />;\n}\n`;\n    case \"javascript\":\n      return `import React from 'react';\n    import { ${meshName}Geometry } from '../geometries/${meshName}Geometry';\n    /**\n     * ${meshName} component\n     */\n    export default function ${meshName}(props) {\n      return <mesh geometry={${meshName}Geometry} {...props} />;\n    }\n    `;\n    case \"python\":\n      return `\"\"\"${meshName} mesh component for ModernGL\"\"\"\nimport moderngl\nfrom .${meshName}Geometry import ${meshName}Geometry\n\nclass ${meshName}:\n    \"\"\"${meshName} mesh for ModernGL rendering\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context, material=None):\n        self.ctx = ctx\n        self.material = material\n        self.geometry = ${meshName}Geometry()\n        self.vao = None\n        \n    def setup_vao(self, program: moderngl.Program):\n        \"\"\"Setup vertex array object with the given shader program\"\"\"\n        self.vao = self.geometry.create_vao(self.ctx, program)\n    \n    def render(self, projection_matrix, view_matrix):\n        \"\"\"Render the mesh\"\"\"\n        if self.vao and self.material:\n            self.material.use()\n            # Set matrices if available\n            if hasattr(self.material, 'set_matrix'):\n                self.material.set_matrix('projection', projection_matrix)\n                self.material.set_matrix('view', view_matrix)\n            self.vao.render(moderngl.TRIANGLES)\n`;\n    case \"java\":\n      return `/**\n * ${meshName} mesh component for LWJGL OpenGL\n */\npublic class ${meshName} {\n    private ${meshName}Geometry geometry;\n    private Material material;\n    \n    public ${meshName}(Material material) {\n        this.geometry = new ${meshName}Geometry();\n        this.material = material;\n    }\n    \n    public void render() {\n        if (material != null) {\n            material.use();\n        }\n        geometry.render();\n    }\n    \n    public void cleanup() {\n        geometry.cleanup();\n    }\n    \n    public ${meshName}Geometry getGeometry() {\n        return geometry;\n    }\n    \n    public void setMaterial(Material material) {\n        this.material = material;\n    }\n}\n`;\n    case \"cpp\":\n      return `#pragma once\n    #include \"geometry/${meshName}Geometry.h\"\n\n    /**\n     * ${meshName} mesh component for OpenGL with geometry\n     */\n    class ${meshName} {\n    private:\n        ${meshName}Geometry geometry;\n        Material* material;\n    public:\n        explicit ${meshName}(Material* mat = nullptr) : geometry(), material(mat) {}\n        \n        void render() {\n            if (material) {\n                material->use();\n            }\n            geometry.render();\n        }\n        \n        ${meshName}Geometry& getGeometry() {\n            return geometry;\n        }\n        \n        void setMaterial(Material* mat) {\n            material = mat;\n        }\n    };\n    `;\n    case \"csharp\":\n      return `using OpenTK.Graphics.OpenGL4;\n\n/// <summary>\n/// ${meshName} mesh component for OpenTK\n/// </summary>\npublic class ${meshName} : System.IDisposable\n{\n    private ${meshName}Geometry _geometry;\n    private Material _material;\n    \n    public ${meshName}(Material material = null)\n    {\n        _geometry = new ${meshName}Geometry();\n        _material = material;\n    }\n    \n    public void Render()\n    {\n        _material?.Use();\n        _geometry.Render();\n    }\n    \n    public void Dispose()\n    {\n        _geometry?.Dispose();\n    }\n    \n    public ${meshName}Geometry Geometry => _geometry;\n    \n    public Material Material\n    {\n        get => _material;\n        set => _material = value;\n    }\n}\n`;\n    case \"php\":\n      return `<?php\n    /**\n     * ${meshName} mesh component for PHP-GLFW\n     */\n    class ${meshName} {\n        private $geometry;\n        private $material;\n        public function __construct($material = null) {\n            $this->geometry = new ${meshName}Geometry();\n            $this->material = $material;\n        }\n        public function render() {\n            if ($this->material) {\n                $this->material->use();\n            }\n            $this->geometry->render();\n        }\n    }\n    `;\n    case \"ruby\":\n      return `# ${meshName} mesh component for Ruby OpenGL\n    class ${meshName}\n      def initialize(material = nil)\n        @geometry = ${meshName}Geometry.new\n        @material = material\n      end\n      def render\n        @material.use if @material\n        @geometry.render\n      end\n    end\n    `;\n    case \"scala\":\n      return `/**\n    * ${meshName} mesh component for LWJGL in Scala\n    */\n    class ${meshName}(material: Material = null) {\n      private val geometry = new ${meshName}Geometry()\n      \n      def render(): Unit = {\n        if (material != null) material.use()\n        geometry.render()\n      }\n    }\n    `;\n    case \"kotlin\":\n      return `/**\n    * ${meshName} mesh component for LWJGL in Kotlin\n    */\n    class ${meshName}(private var material: Material? = null) {\n        private val geometry = ${meshName}Geometry()\n\n        fun render() {\n            material?.use()\n            geometry.render()\n        }\n    }\n    `;\n    case \"dart\":\n      return `/**\n    * ${meshName} mesh component for OpenGL in Dart\n    */\n    class ${meshName} {\n      final ${meshName}Geometry geometry;\n      Material? material;\n\n      ${meshName}({this.material}) : geometry = ${meshName}Geometry();\n\n      void render() {\n        material?.use();\n        geometry.render();\n      }\n    }\n    `;\n    case \"r\":\n      return `#' ${meshName} mesh component for R OpenGL\n    #' @export\n    ${meshName} <- function(material = NULL) {\n      geometry <- ${meshName}Geometry()\n      \n      list(\n        geometry = geometry,\n        material = material,\n        render = function() {\n          if (!is.null(material)) {\n            do.call(material$use, list())\n          }\n          do.call(geometry$render, list())\n        }\n      )\n    }\n    `;\n    case \"go\":\n      return `package meshes\n\nimport (\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"yourproject/geometry\"\n)\n\n// ${meshName} represents a mesh with geometry only\ntype ${meshName} struct {\n    geometry *geometry.${meshName}Geometry\n}\n\n// New${meshName} creates a new mesh instance\nfunc New${meshName}() *${meshName} {\n    return &${meshName}{\n        geometry: geometry.New${meshName}Geometry(),\n    }\n}\n\n// Render renders the mesh\nfunc (m *${meshName}) Render() {\n    m.geometry.Render()\n}\n\n// Cleanup releases OpenGL resources\nfunc (m *${meshName}) Cleanup() {\n    m.geometry.Cleanup()\n}\n    `;\n    case \"swift\":\n      return `import Metal\n\n/// ${meshName} mesh component for Metal rendering\nclass ${meshName} {\n    private let geometry: ${meshName}Geometry\n    \n    init(device: MTLDevice) {\n        self.geometry = ${meshName}Geometry(device: device)\n    }\n    \n    func render(renderEncoder: MTLRenderCommandEncoder) {\n        geometry.render(renderEncoder: renderEncoder)\n    }\n}`;\n    case \"rust\":\n      return `\n      use crate::geometry::${meshName}Geometry;\n      /// ${meshName} mesh component for wgpu\n      pub struct ${meshName} {\n          geometry: ${meshName}Geometry,\n      }\n\n      impl ${meshName} {\n          pub fn new(device: &wgpu::Device) -> Self {\n              Self {\n                  geometry: ${meshName}Geometry::new(device),\n              }\n          }\n          \n          pub fn render<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n              self.geometry.render(render_pass);\n          }\n      }\n      `;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateMeshComponent(\n        meshName,\n        _geometry,\n        displayMode,\n        \"typescript\"\n      );\n  }\n}\n\n/**\n * Generates a material component based on display mode\n * Component name starts with capital letter as required by React\n */\nfunction generateMaterialComponent(\n  materialName: string,\n  material: THREE.Material,\n  displayMode: string,\n  languageId: LanguageId,\n  hasNormals: boolean = false,\n  hasUvs: boolean = false\n): string {\n  let materialType = \"MeshStandardMaterial\";\n  const properties: string[] = [];\n\n  // Determine material type\n  if (material instanceof THREE.MeshBasicMaterial)\n    materialType = \"MeshBasicMaterial\";\n  else if (material instanceof THREE.MeshPhongMaterial)\n    materialType = \"MeshPhongMaterial\";\n  else if (material instanceof THREE.MeshLambertMaterial)\n    materialType = \"MeshLambertMaterial\";\n  else if (material instanceof THREE.MeshNormalMaterial)\n    materialType = \"MeshNormalMaterial\";\n  else if (material instanceof THREE.MeshDepthMaterial)\n    materialType = \"MeshDepthMaterial\";\n  else if (material instanceof THREE.MeshMatcapMaterial)\n    materialType = \"MeshMatcapMaterial\";\n  else if (material instanceof THREE.MeshToonMaterial)\n    materialType = \"MeshToonMaterial\";\n  else if (material instanceof THREE.MeshPhysicalMaterial)\n    materialType = \"MeshPhysicalMaterial\";\n\n  // Configure properties based on display mode\n  switch (displayMode) {\n    case \"wireframe\":\n      properties.push(\"wireframe: true\", \"transparent: true\", \"opacity: 0.8\");\n      break;\n    case \"solid\":\n      properties.push(\"color: 0x888888\", \"metalness: 0.1\", \"roughness: 0.8\");\n      break;\n    case \"normals\":\n      materialType = \"MeshNormalMaterial\";\n      break;\n    case \"depth\":\n      materialType = \"MeshDepthMaterial\";\n      break;\n    case \"points\":\n      materialType = \"PointsMaterial\";\n      properties.push(\"color: 0x00ff00\", \"size: 0.01\", \"sizeAttenuation: true\");\n      break;\n    default:\n     if ('color' in material && material.color instanceof THREE.Color) {\n        const color = material.color as THREE.Color;\n        properties.push(\n          `color: new THREE.Color(${color.r}, ${color.g}, ${color.b})`\n        );\n      }\n      if (\"roughness\" in material)\n        properties.push(`roughness: ${(material as any).roughness}`);\n      if (\"metalness\" in material)\n        properties.push(`metalness: ${(material as any).metalness}`);\n      if (\"opacity\" in material)\n        properties.push(`opacity: ${(material as any).opacity}`);\n      if (\"transparent\" in material)\n        properties.push(`transparent: ${(material as any).transparent}`);\n      break;\n  }\n\n  switch (languageId) {\n    case \"typescript\":\n      return `import * as THREE from 'three';\n\n/**\n * ${materialName} material component\n */\nexport default function ${materialName}(): THREE.Material {\n  return new THREE.${materialType}({\n    ${properties.join(\",\\n    \")}\n  });\n}\n`;\n    case \"javascript\":\n      return `import * as THREE from 'three';\n    /**\n     * ${materialName} material component\n     */\n    export default function ${materialName}() {\n      return new THREE.${materialType}({\n        ${properties.join(\",\")}\n      });\n    }\n    `;\n    case \"python\":\n      return `\"\"\"${materialName} material for ModernGL\"\"\"\nimport moderngl\nimport numpy as np\n\nclass ${materialName}:\n    \"\"\"${materialName} material for ModernGL\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context):\n        self.ctx = ctx\n        self.program = self._create_shader_program()\n        \n    def _create_shader_program(self) -> moderngl.Program:\n        vertex_shader = '''\n        #version 330 core\n        in vec3 in_position;\n        ${hasNormals ? \"in vec3 in_normal;\" : \"\"}\n        ${hasUvs ? \"in vec2 in_uv;\" : \"\"}\n        \n        uniform mat4 projection;\n        uniform mat4 view;\n        uniform mat4 model;\n        \n        out vec3 v_position;\n        ${hasNormals ? \"out vec3 v_normal;\" : \"\"}\n        ${hasUvs ? \"out vec2 v_uv;\" : \"\"}\n        \n        void main() {\n            v_position = in_position;\n            ${hasNormals ? \"v_normal = in_normal;\" : \"\"}\n            ${hasUvs ? \"v_uv = in_uv;\" : \"\"}\n            gl_Position = projection * view * model * vec4(in_position, 1.0);\n        }\n        '''\n        \n        fragment_shader = '''\n        #version 330 core\n        in vec3 v_position;\n        ${hasNormals ? \"in vec3 v_normal;\" : \"\"}\n        ${hasUvs ? \"in vec2 v_uv;\" : \"\"}\n        \n        out vec4 fragColor;\n        \n        void main() {\n            ${displayMode === \"wireframe\"\n          ? \"fragColor = vec4(0.0, 0.0, 0.0, 0.8);\"\n          : displayMode === \"normals\"\n            ? \"fragColor = vec4(normalize(v_normal) * 0.5 + 0.5, 1.0);\"\n            : displayMode === \"points\"\n              ? \"fragColor = vec4(0.0, 1.0, 0.0, 1.0);\"\n              : \"fragColor = vec4(0.5, 0.5, 0.5, 1.0);\"\n        }\n        }\n        '''\n        \n        return self.ctx.program(vertex_shader=vertex_shader, fragment_shader=fragment_shader)\n    \n    def use(self):\n        \"\"\"Activate this material for rendering\"\"\"\n        self.program.use()\n        \n    def set_matrix(self, name: str, matrix: np.ndarray):\n        \"\"\"Set a matrix uniform\"\"\"\n        if name in self.program:\n            self.program[name].write(matrix.astype(np.float32).tobytes())\n`;\n    case \"php\":\n      return `<?php\n    /**\n     * ${materialName} material component for PHP-GLFW\n     */\n    class ${materialName} {\n        public function __construct() {\n            // Material setup\n        }\n        public function use() {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `glfw${key.charAt(0).toUpperCase() + key.slice(1)\n              }(${value});`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n    case \"ruby\":\n      return `# ${materialName} material component for Ruby OpenGL\n    class ${materialName}\n      def initialize\n        # Material setup\n      end\n      def use\n        # Apply material properties\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `gl${key.charAt(0).toUpperCase() + key.slice(1)}(${value})`;\n          })\n          .join(\"\\n    \")}\n      end\n    end\n    `;\n    case \"scala\":\n      return `/**\n    * ${materialName} material component for LWJGL in Scala\n    */\n    class ${materialName} {\n      ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `private val ${key} = ${value}`;\n          })\n          .join(\"\\n  \")}\n      \n      def use(): Unit = {\n        // Apply material properties\n        ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n    \")}\n      }\n    }\n    `;\n    case \"kotlin\":\n      return `/**\n    * ${materialName} material component for LWJGL in Kotlin\n    */\n    class ${materialName} {\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `private val ${key} = ${value}`;\n          })\n          .join(\"\\n    \")}\n\n        fun use() {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n    case \"dart\":\n      return `/**\n    * ${materialName} material component for OpenGL in Dart\n    */\n    class ${materialName} implements Material {\n      ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return \"final $key = $value;\";\n          })\n          .join(\"\\n  \")}\n\n      @override\n      void use() {\n        // Apply material properties\n        ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return \"// Set $key property\";\n          })\n          .join(\"\\n    \")}\n      }\n    }\n    `;\n    case \"r\":\n      return `#' ${materialName} material component for R OpenGL\n    #' @export\n    ${materialName} <- function() {\n      list(\n        use = function() {\n          # Apply material properties\n          ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `# Set ${key} to ${value}`;\n          })\n          .join(\"\\n      \")}\n        }\n      )\n    }\n    `;\n    case \"cpp\":\n      return `#pragma once\n    #include <GL/glew.h>\n\n    /**\n     * ${materialName} material component for OpenGL\n     */\n    class ${materialName} {\n    private:\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `float ${key};`;\n          })\n          .join(\"\\n    \")}\n    public:\n        ${materialName}() {\n            ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `${key} = ${value};`;\n          })\n          .join(\"\\n        \")}\n        }\n        \n        void use() {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n        \")}\n        }\n    };\n    `;\n    case \"go\":\n      return `package materials\n\n    import \"github.com/go-gl/gl/v4.1-core/gl\"\n\n    // ${materialName} represents a material with properties\n    type ${materialName} struct {\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `${capitalize(key)} float32`;\n          })\n          .join(\"\\n    \")}\n    }\n\n    // New${materialName} creates a new material instance\n    func New${materialName}() *${materialName} {\n        return &${materialName}{\n            ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `${capitalize(key)}: ${value},`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n\n    // Use activates the material for rendering\n    func (m *${materialName}) Use() {\n        // Apply material properties\n        ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n    \")}\n    }\n    `;\n    case \"rust\":\n      return `/// ${materialName} material component for wgpu\n    pub struct ${materialName} {\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `pub ${key}: f32,`;\n          })\n          .join(\"\\n    \")}\n    }\n\n    impl ${materialName} {\n        pub fn new() -> Self {\n            Self {\n                ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `${key}: ${value},`;\n          })\n          .join(\"\\n            \")}\n            }\n        }\n        \n        pub fn bind<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n    case \"swift\":\n      return `import Metal\n\n    /// ${materialName} material component for Metal\n    class ${materialName} {\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `private var ${key}: Float = ${value}`;\n          })\n          .join(\"\\n    \")}\n        \n        init() {\n            // Material initialization\n        }\n        \n        func use(renderEncoder: MTLRenderCommandEncoder) {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateMaterialComponent(\n        materialName,\n        material,\n        displayMode,\n        \"typescript\",\n        hasNormals,\n        hasUvs\n      );\n  }\n}\n\n/**\n * Generates the main index component that assembles all parts\n * Component name starts with capital letter as required by React\n */\nfunction generateIndexComponent(\n  componentName: string,\n  meshes: MeshData[],\n  materials: MaterialData[],\n  displayMode: string,\n  languageId: LanguageId\n): string {\n  const lang = LANGUAGES[languageId];\n\n  switch (languageId) {\n    case \"typescript\":\n      const meshImports = meshes\n        .map((mesh) => `import ${mesh.name} from './meshes/${mesh.name}';`)\n        .join(\"\\n\");\n\n      const materialImports = materials\n        .map(\n          (material) =>\n            `import ${material.name} from './materials/${material.name}';`\n        )\n        .join(\"\\n\");\n\n      const meshElements = meshes\n        .map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `      <${mesh.name} material={${material.name}()} />`;\n        })\n        .join(\"\\n\");\n\n      return `import React, { useRef } from 'react';\nimport type { GroupProps } from '@react-three/fiber';\n${meshImports}\n${materialImports}\n\ninterface ${componentName}Props extends GroupProps {\n  [key: string]: any;\n}\n\n/**\n * ${componentName} component\n * Main component that assembles all mesh and material parts\n */\nexport default function ${componentName}(props: ${componentName}Props) {\n  const ref = useRef<THREE.Group>(null);\n  \n  return (\n    <group ref={ref} {...props}>\n${meshElements}\n    </group>\n  );\n}\n`;\n    case \"javascript\":\n      const meshImportsJS = meshes\n        .map((mesh) => `import ${mesh.name} from './meshes/${mesh.name}';`)\n        .join(\"\\n\");\n      const materialImportsJS = materials\n        .map(\n          (material) =>\n            `import ${material.name} from './materials/${material.name}';`\n        )\n        .join(\"\\n\");\n      const meshElementsJS = meshes\n        .map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `      <${mesh.name} material={${material.name}()} />`;\n        })\n        .join(\"\\n\");\n      return `import React, { useRef } from 'react';\n    import { Group } from '@react-three/fiber';\n    ${meshImportsJS}\n    ${materialImportsJS}\n    /**\n     * ${componentName} component\n     */\n    export default function ${componentName}(props) {\n      const ref = useRef(null);\n      return (\n        <group ref={ref} {...props}>\n    ${meshElementsJS}\n        </group>\n      );\n    }\n    `;\n    case \"python\":\n      return `\"\"\"${componentName} main component for ModernGL\"\"\"\nimport moderngl\nimport numpy as np\nfrom typing import List, Optional\n${meshes\n          .map((mesh) => `from .meshes.${mesh.name} import ${mesh.name}`)\n          .join(\"\\n\")}\n${materials\n          .map((material) => `from .materials.${material.name} import ${material.name}`)\n          .join(\"\\n\")}\n\nclass ${componentName}:\n    \"\"\"${componentName} component for ModernGL\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context):\n        self.ctx = ctx\n        self.meshes: List = []\n        self._setup_meshes()\n        \n    def _setup_meshes(self):\n        \"\"\"Initialize all meshes with their materials\"\"\"\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `# Create ${mesh.name}\n        ${mesh.name.toLowerCase()}_material = ${material.name}(self.ctx)\n        ${mesh.name.toLowerCase()}_mesh = ${mesh.name\n              }(self.ctx, ${mesh.name.toLowerCase()}_material)\n        self.meshes.append(${mesh.name.toLowerCase()}_mesh)`;\n          })\n          .join(\"\\n        \")}\n    \n    def render(self, projection_matrix: np.ndarray, view_matrix: np.ndarray, model_matrix: Optional[np.ndarray] = None):\n        \"\"\"Render all meshes\"\"\"\n        if model_matrix is None:\n            model_matrix = np.eye(4, dtype=np.float32)\n            \n        for mesh in self.meshes:\n            mesh.render(projection_matrix, view_matrix)\n`;\n\n    case \"java\":\n      return `/**\n * ${componentName} main component for LWJGL OpenGL\n */\n${meshes.map((mesh) => `import meshes.${mesh.name};`).join(\"\\n\")}\n${materials.map((material) => `import materials.${material.name};`).join(\"\\n\")}\n\npublic class ${componentName} {\n    ${meshes\n          .map((mesh, i) => `private ${mesh.name} ${mesh.name.toLowerCase()};`)\n          .join(\"\\n    \")}\n    \n    public ${componentName}() {\n        setupMeshes();\n    }\n    \n    private void setupMeshes() {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} = new ${mesh.name}(new ${material.name\n              }());`;\n          })\n          .join(\"\\n        \")}\n    }\n    \n    public void render() {\n        ${meshes\n          .map((mesh) => `${mesh.name.toLowerCase()}.render();`)\n          .join(\"\\n        \")}\n    }\n    \n    public void cleanup() {\n        ${meshes\n          .map((mesh) => `${mesh.name.toLowerCase()}.cleanup();`)\n          .join(\"\\n        \")}\n    }\n}\n`;\n\n    case \"csharp\":\n      return `using System;\nusing System.Collections.Generic;\n${meshes.map((mesh) => `using Meshes;`).join(\"\\n\")}\n${materials.map((material) => `using Materials;`).join(\"\\n\")}\n\n/// <summary>\n/// ${componentName} main component for OpenTK\n/// </summary>\npublic class ${componentName} : IDisposable\n{\n    ${meshes\n          .map((mesh, i) => `private ${mesh.name} _${mesh.name.toLowerCase()};`)\n          .join(\"\\n    \")}\n    \n    public ${componentName}()\n    {\n        SetupMeshes();\n    }\n    \n    private void SetupMeshes()\n    {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `_${mesh.name.toLowerCase()} = new ${mesh.name}(new ${material.name\n              }());`;\n          })\n          .join(\"\\n        \")}\n    }\n    \n    public void Render()\n    {\n        ${meshes\n          .map((mesh) => `_${mesh.name.toLowerCase()}.Render();`)\n          .join(\"\\n        \")}\n    }\n    \n    public void Dispose()\n    {\n        ${meshes\n          .map((mesh) => `_${mesh.name.toLowerCase()}?.Dispose();`)\n          .join(\"\\n        \")}\n    }\n}\n`;\n\n    case \"cpp\":\n      return `#pragma once\n#include <vector>\n#include <memory>\n${meshes.map((mesh) => `#include \"meshes/${mesh.name}.h\"`).join(\"\\n\")}\n${materials\n          .map((material) => `#include \"materials/${material.name}.h\"`)\n          .join(\"\\n\")}\n\n/**\n * ${componentName} main component for OpenGL\n */\nclass ${componentName} {\nprivate:\n    ${meshes\n          .map(\n            (mesh, i) => `std::unique_ptr<${mesh.name}> ${mesh.name.toLowerCase()};`\n          )\n          .join(\"\\n    \")}\n    \npublic:\n    ${componentName}() {\n        setupMeshes();\n    }\n    \n    ~${componentName}() {\n        cleanup();\n    }\n    \nprivate:\n    void setupMeshes() {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} = std::make_unique<${mesh.name\n              }>(std::make_unique<${material.name}>());`;\n          })\n          .join(\"\\n        \")}\n    }\n    \npublic:\n    void render() {\n        ${meshes\n          .map(\n            (mesh) =>\n              `if (${mesh.name.toLowerCase()}) ${mesh.name.toLowerCase()}->render();`\n          )\n          .join(\"\\n        \")}\n    }\n    \n    void cleanup() {\n        ${meshes\n          .map((mesh) => `${mesh.name.toLowerCase()}.reset();`)\n          .join(\"\\n        \")}\n    }\n};\n`;\n\n    case \"go\":\n      return `package main\n\n${meshes.map((mesh) => `import \"./meshes\"`).join(\"\\n\")}\n${materials.map((material) => `import \"./materials\"`).join(\"\\n\")}\n\n// ${componentName} represents the main 3D component\ntype ${componentName} struct {\n    ${meshes\n          .map((mesh, i) => `${mesh.name.toLowerCase()} *meshes.${mesh.name}`)\n          .join(\"\\n    \")}\n}\n\n// New${componentName} creates a new ${componentName} instance\nfunc New${componentName}() *${componentName} {\n    component := &${componentName}{}\n    component.setupMeshes()\n    return component\n}\n\nfunc (c *${componentName}) setupMeshes() {\n    ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `c.${mesh.name.toLowerCase()} = meshes.New${mesh.name\n              }(materials.New${material.name}())`;\n          })\n          .join(\"\\n    \")}\n}\n\n// Render renders all meshes in the component\nfunc (c *${componentName}) Render() {\n    ${meshes\n          .map(\n            (mesh) => `if c.${mesh.name.toLowerCase()} != nil {\n        c.${mesh.name.toLowerCase()}.Render()\n    }`\n          )\n          .join(\"\\n    \")}\n}\n\n// Cleanup cleans up all resources\nfunc (c *${componentName}) Cleanup() {\n    ${meshes\n          .map(\n            (mesh) => `if c.${mesh.name.toLowerCase()} != nil {\n        c.${mesh.name.toLowerCase()}.Cleanup()\n    }`\n          )\n          .join(\"\\n    \")}\n}\n`;\n\n    case \"rust\":\n      return `${meshes\n        .map(\n          (mesh) =>\n            `use crate::meshes::${mesh.name.toLowerCase()}::${mesh.name};`\n        )\n        .join(\"\\n\")}\n${materials\n          .map(\n            (material) =>\n              `use crate::materials::${material.name.toLowerCase()}::${material.name};`\n          )\n          .join(\"\\n\")}\nuse wgpu::Device;\n\n/// ${componentName} main component for wgpu\npub struct ${componentName} {\n    ${meshes\n          .map((mesh, i) => `${mesh.name.toLowerCase()}: ${mesh.name},`)\n          .join(\"\\n    \")}\n}\n\nimpl ${componentName} {\n    pub fn new(device: &Device) -> Self {\n        Self {\n            ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()}: ${mesh.name}::new(device, ${material.name\n              }::new(device)),`;\n          })\n          .join(\"\\n            \")}\n        }\n    }\n    \n    pub fn render<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n        ${meshes\n          .map((mesh) => `self.${mesh.name.toLowerCase()}.render(render_pass);`)\n          .join(\"\\n        \")}\n    }\n}\n`;\n\n    case \"swift\":\n      return `import Metal\n${meshes.map((mesh) => `import Meshes`).join(\"\\n\")}\n${materials.map((material) => `import Materials`).join(\"\\n\")}\n\n/// ${componentName} main component for Metal\nclass ${componentName} {\n    ${meshes\n          .map((mesh, i) => `private let ${mesh.name.toLowerCase()}: ${mesh.name}`)\n          .join(\"\\n    \")}\n    \n    init(device: MTLDevice) {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} = ${mesh.name\n              }(device: device, material: ${material.name}(device: device))`;\n          })\n          .join(\"\\n        \")}\n    }\n    \n    func render(renderEncoder: MTLRenderCommandEncoder) {\n        ${meshes\n          .map(\n            (mesh) =>\n              `${mesh.name.toLowerCase()}.render(renderEncoder: renderEncoder)`\n          )\n          .join(\"\\n        \")}\n    }\n}\n`;\n    case \"php\":\n      return `<?php\n    /**\n     * ${componentName} main component for PHP-GLFW\n     */\n    class ${componentName} {\n        ${meshes\n          .map((mesh, i) => `private $${mesh.name.toLowerCase()};`)\n          .join(\"\\n    \")}\n        public function __construct() {\n            $this->setupMeshes();\n        }\n        private function setupMeshes() {\n            ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `$this->${mesh.name.toLowerCase()} = new ${mesh.name\n              }(new ${material.name}());`;\n          })\n          .join(\"\\n        \")}\n        }\n        public function render() {\n            ${meshes\n          .map((mesh) => `$this->${mesh.name.toLowerCase()}->render();`)\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n    case \"ruby\":\n      return `# ${componentName} main component for Ruby OpenGL\n    class ${componentName}\n      ${meshes\n          .map((mesh, i) => `attr_reader :${mesh.name.toLowerCase()}`)\n          .join(\"\\n  \")}\n      def initialize\n        setup_meshes\n      end\n      private\n      def setup_meshes\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return \"@#{mesh.name.toLowerCase()} = #{mesh.name}.new(#{material.name}.new)\";\n          })\n          .join(\"\\n    \")}\n      end\n      public\n      def render\n        ${meshes\n          .map((mesh) => \"@#{mesh.name.toLowerCase()}.render\")\n          .join(\"\\n    \")}\n      end\n    end\n    `;\n    case \"scala\":\n      return `/**\n    * ${componentName} main component for LWJGL in Scala\n    */\n    class ${componentName} {\n      ${meshes\n          .map(\n            (mesh, i) =>\n              `private val ${mesh.name.toLowerCase()} = new ${mesh.name}()`\n          )\n          .join(\"\\n  \")}\n      \n      def render(): Unit = {\n        ${meshes\n          .map((mesh) => \"${mesh.name.toLowerCase()}.render()\")\n          .join(\"\\n    \")}\n      }\n    }\n    `;\n    case \"kotlin\":\n      return `/**\n      * ${componentName} main component for LWJGL in Kotlin\n      */\n      class ${componentName} {\n          ${meshes\n          .map(\n            (mesh, i) =>\n              `private val ${mesh.name.toLowerCase()} = ${mesh.name}()`\n          )\n          .join(\"\\n    \")}\n\n          fun render() {\n              ${meshes\n          .map((mesh) => \"${mesh.name.toLowerCase()}.render()\")\n          .join(\"\\n        \")}\n          }\n      }\n      `;\n    case \"dart\":\n      return `/**\n    * ${componentName} main component for OpenGL in Dart\n    */\n    class ${componentName} {\n      ${meshes\n          .map((mesh, i) => `final ${mesh.name} ${mesh.name.toLowerCase()};`)\n          .join(\"\\n  \")}\n\n      ${componentName}() {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return \"${mesh.name.toLowerCase()} = ${mesh.name}(material: ${material.name}());\";\n          })\n          .join(\"\\n    \")}\n      }\n\n      void render() {\n        ${meshes\n          .map((mesh) => \"${mesh.name.toLowerCase()}.render();\")\n          .join(\"\\n    \")}\n      }\n    }\n    `;\n    case \"r\":\n      return `#' ${componentName} main component for R OpenGL\n    #' @export\n    ${componentName} <- function() {\n      # Create meshes\n      ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} <- ${mesh.name}(material = ${material.name\n              }())`;\n          })\n          .join(\"\\n  \")}\n      \n      # Return component\n      list(\n        ${meshes\n          .map(\n            (mesh) => `${mesh.name.toLowerCase()} = ${mesh.name.toLowerCase()}`\n          )\n          .join(\",\\n    \")}\n        render = function() {\n          ${meshes\n          .map((mesh) => `do.call(${mesh.name.toLowerCase()}$render, list())`)\n          .join(\"\\n      \")}\n        }\n      )\n    }\n    `;\n\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateIndexComponent(\n        componentName,\n        meshes,\n        materials,\n        displayMode,\n        \"typescript\"\n      );\n  }\n}\n\n// Fix the generateExamplePage function around line 900 to ensure proper file extensions\nfunction generateExamplePage(\n  componentName: string,\n  languageId: LanguageId\n): string {\n  const lang = LANGUAGES[languageId];\n\n  switch (languageId) {\n    case \"typescript\":\n      return `import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport ${componentName} from '@/components/${componentName}';\n\n/**\n * Example page demonstrating how to use the ${componentName} component\n */\nexport default function ${componentName}Page() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas \n        camera={{ position: [0, 0, 5], fov: 50 }}\n        gl={{\n          powerPreference: \"high-performance\",\n          antialias: true,\n          alpha: true\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${componentName} />\n        <OrbitControls \n          enableZoom\n          enablePan\n          enableRotate\n          minDistance={0.1}\n          maxDistance={100}\n        />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}\n`;\n    case \"javascript\":\n      return `import React from 'react';\n    import { Canvas } from '@react-three/fiber';\n    import { OrbitControls, Environment } from '@react-three/drei';\n    import ${componentName} from '@/components/${componentName}';\n    /**\n     * Example page for ${componentName}\n     */\n    export default function ${componentName}Page() {\n      return (\n        <div className=\"w-full h-screen\">\n          <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n            <ambientLight intensity={0.5} />\n            <pointLight position={[10, 10, 10]} />\n            <${componentName} />\n            <OrbitControls enableZoom enablePan enableRotate />\n            <Environment preset=\"studio\" />\n          </Canvas>\n        </div>\n      );\n    }\n    `;\n    case \"python\":\n      return `\"\"\"Example application for ${componentName}\"\"\"\nimport pyglet\nimport moderngl\nimport numpy as np\nfrom pyglet.window import key\nfrom pyrr import Matrix44\nfrom .${componentName} import ${componentName}\n\nclass ${componentName}App:\n    \"\"\"Example application for ModernGL implementation\"\"\"\n    \n    def __init__(self, width: int = 800, height: int = 600):\n        self.window = pyglet.window.Window(width, height, caption='${componentName} Viewer')\n        self.ctx = moderngl.create_context()\n        \n        # Create matrices\n        self.projection = Matrix44.perspective_projection(50, width/height, 0.1, 1000)\n        self.view = Matrix44.look_at([0, 0, 5], [0, 0, 0], [0, 1, 0])\n        \n        # Create the 3D component\n        self.scene = ${componentName}(self.ctx)\n        \n        # Animation state\n        self.rotation = 0\n        \n        # Set up event handlers\n        self.window.event(self.on_draw)\n        self.window.event(self.on_resize)\n        self.window.event(self.on_key_press)\n        \n    def on_draw(self):\n        \"\"\"Handle window draw event\"\"\"\n        self.window.clear()\n        self.ctx.enable(moderngl.DEPTH_TEST)\n        \n        # Update rotation\n        self.rotation += 0.5\n        model = Matrix44.from_y_rotation(np.radians(self.rotation))\n        \n        # Render the scene\n        self.scene.render(self.projection, self.view, model)\n        \n    def on_resize(self, width: int, height: int):\n        \"\"\"Handle window resize event\"\"\"\n        self.projection = Matrix44.perspective_projection(50, width/height, 0.1, 1000)\n        \n    def on_key_press(self, symbol: int, modifiers: int):\n        \"\"\"Handle key press events\"\"\"\n        if symbol == key.ESCAPE:\n            pyglet.app.exit()\n            \n    def run(self):\n        \"\"\"Start the application\"\"\"\n        pyglet.app.run()\n\nif __name__ == '__main__':\n    app = ${componentName}App()\n    app.run()\n`;\n\n    case \"java\":\n      return `/**\n * Example application for ${componentName} using LWJGL\n */\nimport ${componentName};\nimport org.lwjgl.glfw.GLFW;\nimport org.lwjgl.opengl.GL;\nimport static org.lwjgl.opengl.GL11.*;\n\npublic class ${componentName}App {\n    private long window;\n    private ${componentName} model;\n    \n    public void run() {\n        init();\n        loop();\n        cleanup();\n    }\n    \n    private void init() {\n        // Initialize GLFW\n        if (!GLFW.glfwInit()) {\n            throw new IllegalStateException(\"Unable to initialize GLFW\");\n        }\n        \n        // Create window\n        window = GLFW.glfwCreateWindow(800, 600, \"${componentName} Viewer\", 0, 0);\n        if (window == 0) {\n            throw new RuntimeException(\"Failed to create the GLFW window\");\n        }\n        \n        GLFW.glfwMakeContextCurrent(window);\n        GL.createCapabilities();\n        \n        // Initialize model\n        model = new ${componentName}();\n        \n        // Enable depth testing\n        glEnable(GL_DEPTH_TEST);\n    }\n    \n    private void loop() {\n        while (!GLFW.glfwWindowShouldClose(window)) {\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n            \n            // Render model\n            model.render();\n            \n            GLFW.glfwSwapBuffers(window);\n            GLFW.glfwPollEvents();\n        }\n    }\n    \n    private void cleanup() {\n        model.cleanup();\n        GLFW.glfwTerminate();\n    }\n    \n    public static void main(String[] args) {\n        new ${componentName}App().run();\n    }\n}\n`;\n\n    case \"csharp\":\n      return `using System;\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Windowing.Common;\nusing OpenTK.Windowing.Desktop;\n\n/// <summary>\n/// Example application for ${componentName} using OpenTK\n/// </summary>\npublic class ${componentName}App : GameWindow\n{\n    private ${componentName} _model;\n    \n    public ${componentName}App() : base(GameWindowSettings.Default, \n        new NativeWindowSettings()\n        {\n            Size = new OpenTK.Mathematics.Vector2i(800, 600),\n            Title = \"${componentName} Viewer\"\n        })\n    {\n    }\n    \n    protected override void OnLoad()\n    {\n        base.OnLoad();\n        \n        GL.ClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        GL.Enable(EnableCap.DepthTest);\n        \n        _model = new ${componentName}();\n    }\n    \n    protected override void OnRenderFrame(FrameEventArgs e)\n    {\n        base.OnRenderFrame(e);\n        \n        GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);\n        \n        _model.Render();\n        \n        SwapBuffers();\n    }\n    \n    protected override void OnUnload()\n    {\n        _model?.Dispose();\n        base.OnUnload();\n    }\n    \n    public static void Main()\n    {\n        using var app = new ${componentName}App();\n        app.Run();\n    }\n}\n`;\n    case \"php\":\n      return `<?php\n    /**\n     * Example application for ${componentName} using PHP-GLFW\n     */\n    require_once 'vendor/autoload.php';\n    use GL\\\\GL;\n    use GL\\\\Window\\\\Window;\n    class ${componentName}App {\n        private $window;\n        private $model;\n        public function __construct() {\n            $this->init();\n        }\n        private function init() {\n            $this->window = new Window(800, 600, \"${componentName} Viewer\");\n            $this->window->setSwapInterval(1);\n            $this->model = new ${componentName}();\n        }\n        public function run() {\n            while (!$this->window->shouldClose()) {\n                GL::clear(GL::COLOR_BUFFER_BIT | GL::DEPTH_BUFFER_BIT);\n                // Render model\n                $this->model->render();\n                $this->window->swapBuffers();\n                $this->window->pollEvents();\n            }\n        }\n    }\n    if (php_sapi_name() === 'cli') {\n        $app = new ${componentName}App();\n        $app->run();\n    }\n    `;\n    case \"ruby\":\n      return `# Example application for ${componentName} using Ruby OpenGL\n    require 'opengl'\n    require 'glut'\n    include Gl, Glu, Glut\n    class ${componentName}App\n      def initialize\n        glutInit\n        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)\n        glutInitWindowSize(800, 600)\n        glutCreateWindow(\"${componentName} Viewer\")\n        glEnable(GL_DEPTH_TEST)\n        @model = ${componentName}.new\n        glutDisplayFunc(method(:display))\n        glutIdleFunc(method(:idle))\n      end\n      def display\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n        @model.render\n        glutSwapBuffers\n      end\n      def idle\n        glutPostRedisplay\n      end\n      def run\n        glutMainLoop\n      end\n    end\n    if __FILE__ == $0\n      app = ${componentName}App.new\n      app.run\n    end\n    `;\n    case \"scala\":\n      return `import org.lwjgl.glfw.GLFWErrorCallback\n    import org.lwjgl.opengl.GL\n    /**\n     * Example application for ${componentName} using LWJGL in Scala\n     */\n    object ${componentName}App {\n      def main(args: Array[String]): Unit = {\n        // Setup error callback\n        GLFWErrorCallback.createPrint(System.err).set()\n        \n        // Initialize GLFW\n        if (!glfwInit()) throw new IllegalStateException(\"Unable to initialize GLFW\")\n        \n        // Create window\n        val window = glfwCreateWindow(800, 600, \"${componentName} Viewer\", 0L, 0L)\n        if (window == 0) throw new RuntimeException(\"Failed to create GLFW window\")\n        \n        glfwMakeContextCurrent(window)\n        GL.createCapabilities()\n        \n        // Enable depth testing\n        glEnable(GL_DEPTH_TEST)\n        \n        // Create model\n        val model = new ${componentName}()\n        \n        // Main loop\n        while (!glfwWindowShouldClose(window)) {\n          glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n          \n          // Render model\n          model.render()\n          \n          glfwSwapBuffers(window)\n          glfwPollEvents()\n        }\n        \n        // Cleanup\n        glfwTerminate()\n      }\n    }\n    `;\n    case \"kotlin\":\n      return `import org.lwjgl.glfw.GLFWErrorCallback\n    import org.lwjgl.opengl.GL\n    /**\n     * Example application for ${componentName} using LWJGL in Kotlin\n     */\n    object ${componentName}App {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            // Setup error callback\n            GLFWErrorCallback.createPrint(System.err).set()\n\n            // Initialize GLFW\n            if (!glfwInit()) throw IllegalStateException(\"Unable to initialize GLFW\")\n\n            // Create window\n            val window = glfwCreateWindow(800, 600, \"${componentName} Viewer\", 0, 0)\n            if (window == 0L) throw RuntimeException(\"Failed to create GLFW window\")\n\n            glfwMakeContextCurrent(window)\n            GL.createCapabilities()\n\n            // Enable depth testing\n            glEnable(GL_DEPTH_TEST)\n\n            // Create model\n            val model = ${componentName}()\n\n            // Main loop\n            while (!glfwWindowShouldClose(window)) {\n                glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT)\n\n                // Render model\n                model.render()\n\n                glfwSwapBuffers(window)\n                glfwPollEvents()\n            }\n\n            // Cleanup\n            glfwTerminate()\n        }\n    }\n    `;\n    case \"dart\":\n      return `import 'package:flutter/material.dart';\n    import 'package:opengl/opengl.dart';\n    import 'package:flutter_gl/flutter_gl.dart';\n    /**\n     * Example application for ${componentName} using Flutter OpenGL\n     */\n    class ${componentName}Page extends StatefulWidget {\n      @override\n      _${componentName}PageState createState() => _${componentName}PageState();\n    }\n\n    class _${componentName}PageState extends State<${componentName}Page> {\n      late OpenGLRenderer _renderer;\n      late FlutterGlPlugin _glPlugin;\n      late ${componentName} _model;\n      double _rotation = 0.0;\n\n      @override\n      void initState() {\n        super.initState();\n        _glPlugin = FlutterGlPlugin();\n        _glPlugin.initialize().then((_) {\n          _renderer = OpenGLRenderer(_glPlugin);\n          _model = ${componentName}();\n          _startAnimation();\n        });\n      }\n\n      void _startAnimation() {\n        Future.delayed(Duration(milliseconds: 16), () {\n          if (mounted) {\n            _rotation += 0.01;\n            setState(() {});\n            _startAnimation();\n          }\n        });\n      }\n\n      @override\n      Widget build(BuildContext context) {\n        return Scaffold(\n          appBar: AppBar(title: Text('${componentName} Viewer')),\n          body: Builder(\n            builder: (context) => GestureDetector(\n              onPanUpdate: (details) => setState(() => _rotation += details.delta.dx * 0.01),\n              child: CustomPaint(\n                painter: _${componentName}Painter(_renderer, _model, _rotation),\n                size: Size.infinite,\n              ),\n            ),\n          ),\n        );\n      }\n\n      @override\n      void dispose() {\n        _glPlugin.dispose();\n        super.dispose();\n      }\n    }\n\n    class _${componentName}Painter extends CustomPainter {\n      final OpenGLRenderer renderer;\n      final ${componentName} model;\n      final double rotation;\n\n      _${componentName}Painter(this.renderer, this.model, this.rotation);\n\n      @override\n      void paint(Canvas canvas, Size size) {\n        renderer.render((gl) {\n          gl.clearColor(0.2, 0.3, 0.3, 1.0);\n          gl.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n          gl.enable(GL_DEPTH_TEST);\n          \n          // Render model\n          model.render();\n        });\n      }\n\n      @override\n      bool shouldRepaint(_) => true;\n    }\n    `;\n    case \"r\":\n      return `#' Example application for ${componentName} using R OpenGL\n    #' @importFrom OpenGL gl\n    #' @importFrom magick image_read\n    library(OpenGL)\n    library(magick)\n\n    #' Initialize OpenGL context\n    initGL <- function(width = 800, height = 600) {\n      # Create window\n      glInit(\"R 3D Viewer\", width, height)\n      \n      # Setup viewport\n      glViewport(0, 0, width, height)\n      \n      # Enable depth testing\n      glEnable(GL_DEPTH_TEST)\n      \n      # Set clear color\n      glClearColor(0.2, 0.3, 0.3, 1.0)\n    }\n\n    #' Main rendering loop\n    renderLoop <- function(model, rotation = 0) {\n      # Clear buffers\n      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n      \n      # Render model\n      do.call(model$render, list())\n      \n      # Swap buffers\n      glSwapBuffers()\n      \n      # Update rotation\n      rotation <- (rotation + 0.5) %% 360\n      \n      # Continue loop\n      Sys.sleep(0.016)\n      renderLoop(model, rotation)\n    }\n\n    #' Main application function\n    main <- function() {\n      # Initialize OpenGL\n      initGL()\n      \n      # Create model\n      model <- ${componentName}()\n      \n      # Start rendering loop\n      renderLoop(model)\n    }\n\n    # Run application if script is executed directly\n    if (sys.frames() == 0) {\n      main()\n    }\n    `;\n    case \"cpp\":\n      return `#include <GL/glew.h>\n    #include <GLFW/glfw3.h>\n    #include \"components/${componentName}.h\"\n\n    /**\n     * Example application for ${componentName} using OpenGL\n     */\n    int main() {\n        // Initialize GLFW\n        if (!glfwInit()) {\n            return -1;\n        }\n        \n        // Create window\n        GLFWwindow* window = glfwCreateWindow(800, 600, \"${componentName} Viewer\", NULL, NULL);\n        if (!window) {\n            glfwTerminate();\n            return -1;\n        }\n        \n        glfwMakeContextCurrent(window);\n        glewInit();\n        \n        // Enable depth testing\n        glEnable(GL_DEPTH_TEST);\n        \n        // Create model\n        ${componentName} model;\n        \n        // Main loop\n        while (!glfwWindowShouldClose(window)) {\n            // Clear the screen\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n            \n            // Set up perspective projection\n            // (In a real application, you would set up matrices here)\n            \n            // Render model\n            model.render();\n            \n            // Swap buffers and poll events\n            glfwSwapBuffers(window);\n            glfwPollEvents();\n        }\n        \n        // Cleanup\n        glfwTerminate();\n        return 0;\n    }\n    `;\n    case \"go\":\n      return `package main\n\n    import (\n        \"github.com/go-gl/gl/v4.1-core/gl\"\n        \"github.com/go-gl/glfw/v3.3/glfw\"\n        \"yourproject/components\"\n        \"runtime\"\n    )\n\n    // initGlfw initializes GLFW and returns a Window\n    func initGlfw() *glfw.Window {\n        if err := glfw.Init(); err != nil {\n            panic(err)\n        }\n        glfw.WindowHint(glfw.Resizable, glfw.True)\n        glfw.WindowHint(glfw.ContextVersionMajor, 4)\n        glfw.WindowHint(glfw.ContextVersionMinor, 1)\n        glfw.WindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)\n        glfw.WindowHint(glfw.OpenGLForwardCompatible, glfw.True)\n\n        window, err := glfw.CreateWindow(800, 600, \"${componentName} Viewer\", nil, nil)\n        if err != nil {\n            panic(err)\n        }\n        window.MakeContextCurrent()\n\n        return window\n    }\n\n    // initOpenGL initializes OpenGL\n    func initOpenGL() {\n        if err := gl.Init(); err != nil {\n            panic(err)\n        }\n        version := gl.GoStr(gl.GetString(gl.VERSION))\n        println(\"OpenGL version\", version)\n        \n        gl.Enable(gl.DEPTH_TEST)\n        gl.DepthFunc(gl.LESS)\n        gl.ClearColor(0.2, 0.3, 0.3, 1.0)\n    }\n\n    func main() {\n        runtime.LockOSThread()\n        \n        window := initGlfw()\n        initOpenGL()\n        \n        // Create model\n        model := components.New${componentName}()\n        \n        // Main loop\n        for !window.ShouldClose() {\n            // Clear the screen\n            gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n            \n            // Render model\n            model.Render()\n            \n            // Maintenance\n            window.SwapBuffers()\n            glfw.PollEvents()\n        }\n        \n        // Cleanup\n        model.Cleanup()\n    }\n    `;\n    case \"rust\":\n      return `use wgpu::SurfaceConfiguration;\n    use winit::{\n        event::*,\n        event_loop::{EventLoop, ControlFlow},\n        window::WindowBuilder,\n    };\n    use ${componentName};\n\n    /// Example application for ${componentName} using wgpu\n    struct State {\n        surface: wgpu::Surface,\n        device: wgpu::Device,\n        queue: wgpu::Queue,\n        config: SurfaceConfiguration,\n        size: winit::dpi::PhysicalSize<u32>,\n        model: ${componentName},\n    }\n\n    impl State {\n        async fn new(window: &winit::window::Window) -> Self {\n            let size = window.inner_size();\n            \n            // The instance is a handle to our GPU\n            let instance = wgpu::Instance::new(wgpu::Backends::all());\n            let surface = unsafe { instance.create_surface(window) };\n            let adapter = instance.request_adapter(\n                &wgpu::RequestAdapterOptions {\n                    power_preference: wgpu::PowerPreference::HighPerformance,\n                    compatible_surface: Some(&surface),\n                    force_fallback_adapter: false,\n                },\n            ).await.unwrap();\n            \n            let (device, queue) = adapter.request_device(\n                &wgpu::DeviceDescriptor {\n                    features: wgpu::Features::empty(),\n                    limits: wgpu::Limits::default(),\n                    label: None,\n                },\n                None,\n            ).await.unwrap();\n            \n            let config = wgpu::SurfaceConfiguration {\n                usage: wgpu::TextureUsages::RENDER_ATTACHMENT,\n                format: surface.get_preferred_format(&adapter).unwrap(),\n                width: size.width,\n                height: size.height,\n                present_mode: wgpu::PresentMode::Fifo,\n            };\n            surface.configure(&device, &config);\n            \n            let model = ${componentName}::new(&device);\n            \n            Self {\n                surface,\n                device,\n                queue,\n                config,\n                size,\n                model,\n            }\n        }\n        \n        fn resize(&mut self, new_size: winit::dpi::PhysicalSize<u32>) {\n            if new_size.width > 0 && new_size.height > 0 {\n                self.size = new_size;\n                self.config.width = new_size.width;\n                self.config.height = new_size.height;\n                self.surface.configure(&self.device, &self.config);\n            }\n        }\n        \n        fn render(&mut self) -> Result<(), wgpu::SurfaceError> {\n            let output = self.surface.get_current_frame()?.output;\n            let view = output.texture.create_view(&wgpu::TextureViewDescriptor::default());\n            \n            let mut encoder = self.device.create_command_encoder(&wgpu::CommandEncoderDescriptor {\n                label: Some(\"${componentName} Encoder\"),\n            });\n            \n            {\n                let mut render_pass = encoder.begin_render_pass(&wgpu::RenderPassDescriptor {\n                    label: Some(\"${componentName} Render Pass\"),\n                    color_attachments: &[wgpu::RenderPassColorAttachment {\n                        view: &view,\n                        resolve_target: None,\n                        ops: wgpu::Operations {\n                            load: wgpu::LoadOp::Clear(wgpu::Color {\n                                r: 0.2,\n                                g: 0.3,\n                                b: 0.3,\n                                a: 1.0,\n                            }),\n                            store: true,\n                        },\n                    }],\n                    depth_stencil_attachment: None,\n                });\n                \n                self.model.render(&mut render_pass);\n            }\n            \n            self.queue.submit(std::iter::once(encoder.finish()));\n            Ok(())\n        }\n    }\n\n    pub async fn run() {\n        let event_loop = EventLoop::new();\n        let window = WindowBuilder::new()\n            .with_title(\"${componentName} Viewer\")\n            .build(&event_loop)\n            .unwrap();\n        \n        let mut state = State::new(&window).await;\n        \n        event_loop.run(move |event, _, control_flow| {\n            match event {\n                Event::WindowEvent {\n                    ref event,\n                    window_id,\n                } if window_id == window.id() => match event {\n                    WindowEvent::CloseRequested => *control_flow = ControlFlow::Exit,\n                    WindowEvent::Resized(physical_size) => {\n                        state.resize(*physical_size);\n                    }\n                    WindowEvent::ScaleFactorChanged { new_inner_size, .. } => {\n                        state.resize(**new_inner_size);\n                    }\n                    _ => {}\n                },\n                Event::RedrawRequested(window_id) if window_id == window.id() => {\n                    if let Err(e) = state.render() {\n                        eprintln!(\"{:?}\", e);\n                        *control_flow = ControlFlow::Exit;\n                        return;\n                    }\n                }\n                Event::MainEventsCleared => {\n                    window.request_redraw();\n                }\n                _ => {}\n            }\n        });\n    }\n\n    fn main() {\n        #[cfg(target_arch = \"wasm32\")]\n        {\n            std::panic::set_hook(Box::new(console_error_panic_hook::hook));\n            console_log::init().expect(\"Could not initialize logger\");\n            wasm_bindgen_futures::spawn_local(run());\n        }\n        \n        #[cfg(not(target_arch = \"wasm32\"))]\n        {\n            pollster::block_on(run());\n        }\n    }\n    `;\n    case \"swift\":\n      return `import Metal\n    import MetalKit\n    import AppKit\n\n    /// View controller for ${componentName} example\n    class ${componentName}ViewController: NSViewController {\n        var renderer: ${componentName}Renderer?\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            guard let mtkView = view as? MTKView else {\n                print(\"View is not an MTKView\")\n                return\n            }\n            \n            // Select the device to render with\n            guard let device = MTLCreateSystemDefaultDevice() else {\n                print(\"Metal is not supported on this device\")\n                return\n            }\n            \n            mtkView.device = device\n            mtkView.clearColor = MTLClearColor(red: 0.2, green: 0.3, blue: 0.3, alpha: 1.0)\n            \n            // Create renderer\n            renderer = ${componentName}Renderer(mtkView: mtkView)\n            renderer?.loadAssets()\n        }\n        \n        override var acceptsFirstResponder: Bool {\n            return true\n        }\n    }\n\n    /// Renderer for ${componentName}\n    class ${componentName}Renderer: NSObject {\n        let commandQueue: MTLCommandQueue\n        let mtkView: MTKView\n        var model: ${componentName}?\n        \n        init(mtkView: MTKView) {\n            self.mtkView = mtkView\n            self.commandQueue = mtkView.device!.makeCommandQueue()!\n            \n            super.init()\n            \n            mtkView.delegate = self\n        }\n        \n        func loadAssets() {\n            // Create the 3D model\n            model = ${componentName}(device: mtkView.device!)\n        }\n    }\n\n    extension ${componentName}Renderer: MTKViewDelegate {\n        func mtkView(_ view: MTKView, drawableSizeWillChange size: CGSize) {\n            // Handle resize if needed\n        }\n        \n        func draw(in view: MTKView) {\n            guard let drawable = view.currentDrawable,\n                  let renderPassDescriptor = view.currentRenderPassDescriptor else {\n                return\n            }\n            \n            let commandBuffer = commandQueue.makeCommandBuffer()\n            let renderEncoder = commandBuffer?.makeRenderCommandEncoder(descriptor: renderPassDescriptor)\n            \n            // Render the model\n            model?.render(renderEncoder: renderEncoder!)\n            \n            renderEncoder?.endEncoding()\n            commandBuffer?.present(drawable)\n            commandBuffer?.commit()\n        }\n    }\n\n    /// macOS application delegate\n    class AppDelegate: NSObject, NSApplicationDelegate {\n        func applicationDidFinishLaunching(_ notification: Notification) {\n            // Create window\n            let window = NSWindow(\n                contentRect: NSRect(x: 0, y: 0, width: 800, height: 600),\n                styleMask: [.titled, .closable, .miniaturizable, .resizable],\n                backing: .buffered,\n                defer: false\n            )\n            window.title = \"${componentName} Viewer\"\n            window.center()\n            window.makeKeyAndOrderFront(nil)\n            \n            // Create Metal view\n            let metalView = MTKView(frame: window.contentView!.bounds)\n            window.contentView?.addSubview(metalView)\n            \n            // Create view controller\n            let viewController = ${componentName}ViewController()\n            window.contentViewController = viewController\n        }\n    }\n\n    // Entry point\n    let delegate = AppDelegate()\n    NSApplication.shared.delegate = delegate\n    _ = NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)\n    `;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateExamplePage(componentName, \"typescript\");\n  }\n}\n\nfunction getLanguageSpecificName(name: string, languageId: LanguageId): string {\n  // First sanitize the name\n  let safeName = name.replace(/[^a-zA-Z0-9_]/g, \"_\");\n  // Ensure it starts with a letter\n  if (!/^[a-zA-Z_]/.test(safeName)) {\n    safeName = \"_\" + safeName;\n  }\n  // Handle reserved keywords\n  const reservedKeywords = [\n    \"default\",\n    \"function\",\n    \"class\",\n    \"export\",\n    \"import\",\n    \"let\",\n    \"const\",\n    \"var\",\n    \"continue\",\n    \"break\",\n    \"case\",\n  ];\n  if (reservedKeywords.includes(safeName.toLowerCase())) {\n    safeName = \"_\" + safeName;\n  }\n\n  switch (languageId) {\n    case \"go\":\n    case \"java\":\n    case \"csharp\":\n    case \"scala\":\n    case \"kotlin\":\n    case \"ruby\":\n    case \"cpp\":\n    case \"rust\":\n    case \"swift\":\n    case \"dart\":\n      // Convert to PascalCase (MyMaterialName)\n      return safeName.replace(/(^|_)(\\w)/g, (_, _1, c) => c.toUpperCase());\n\n    case \"typescript\":\n    case \"javascript\":\n      // Convert to camelCase (myMaterialName)\n      return (\n        safeName.charAt(0).toLowerCase() +\n        safeName.slice(1).replace(/(_)(\\w)/g, (_, _1, c) => c.toUpperCase())\n      );\n\n    case \"python\":\n      // Convert to CamelCase (MyMaterialName)\n      return safeName.replace(/(^|_)(\\w)/g, (_, _1, c) => c.toUpperCase());\n\n    case \"php\":\n      // For PHP, class names are typically CamelCase\n      return safeName.replace(/(^|_)(\\w)/g, (_, _1, c) => c.toUpperCase());\n\n    case \"r\":\n      // For R, function names are typically snake_case\n      return safeName.toLowerCase().replace(/[^a-z0-9]/g, \"_\");\n\n    default:\n      // For other languages, just capitalize the first letter\n      return safeName.charAt(0).toUpperCase() + safeName.slice(1);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AASA,8EAA8E;AAC9E,MAAM,YAAY;IAChB,YAAY;QACV,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC;QACrD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACnE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,YAAY;QACV,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,IAAM;QACvB,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACnE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,QAAQ;QACN,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,IAAM;QACvB,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE,OAAO;QACvE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,MAAM;QACJ,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,aAAa,EAAE,KAAK,EAAE,CAAC;QAC3D,SAAS;QACT,gBAAgB,CAAC,KAAa,QAC5B,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QAC/B,OAAO,CAAC,QACN,CAAC,qBAAqB,EAAE,MACrB,GAAG,CAAC,CAAC,OAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAC5B,IAAI,CAAC,MAAM,IAAI,CAAC;QACrB,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,QAAQ;QACN,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,aAAa,EAAE,KAAK,EAAE,CAAC;QAC3D,SAAS;QACT,gBAAgB,CAAC,KAAa,QAC5B,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,IAAI,cAAc,CAAC;QAC5C,OAAO,CAAC,QAAoB,CAAC,mBAAmB,EAAE,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACtE,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,KAAK;QACH,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,UAAU,CAAC;QAC5D,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,IAAI;QACF,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,KAAK,EAAE,KAAK,SAAS,CAAC;QAC1D,SAAS;QACT,gBAAgB,CAAC,KAAa,QAC5B,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,SAAS,EAAE,IAAI,WAAW,GAAG,GAAG,CAAC;QACvD,OAAO,CAAC,QAAoB,CAAC,cAAc,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QAChE,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,OAAO,CAAC,MAAM,OAAO,CAAC,CAAC;IACrE;IACA,MAAM;QACJ,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;QACzD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QAC3E,OAAO,CAAC,QAAoB,CAAC,KAAK,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACvD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,OAAO,CAAC,MAAM,OAAO,CAAC,CAAC;IACrE;IACA,OAAO;QACL,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;QACpD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,OAAO;QAC1E,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,QAAQ;QACN,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;QACpD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAC5B,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,MAAM,QAAQ,CAAC;QACpC,OAAO,CAAC,QAAoB,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACzD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,MAAM;QACJ,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,MAAM;QAClD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,iBAAiB,EAAE,KAAK;QACzE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,KAAK;QACH,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;QACpD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,QAAoB,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,OAAO;QACL,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACxD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACnE,OAAO,CAAC,QAAoB,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACtD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,MAAM;QACJ,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;QACpD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QACpE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,GAAG;QACD,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,UAAU,EAAE,KAAK,gBAAgB,CAAC;QACtE,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,CAAC,EAAE,IAAI,KAAK,EAAE,MAAM,EAAE,CAAC;QACxE,OAAO,CAAC,QAAoB,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACpD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;AACF;AAIA;;;CAGC,GACD,SAAS,WAAW,GAAW;IAC7B,OAAO,IAAI,MAAM,CAAC,GAAG,WAAW,KAAK,IAAI,KAAK,CAAC;AACjD;AAEA;;CAEC,GACD,SAAS,aAAa,IAAY;IAChC,8CAA8C;IAC9C,IAAI,WAAW,KAAK,OAAO,CAAC,kBAAkB;IAE9C,iCAAiC;IACjC,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW;QAChC,WAAW,MAAM;IACnB;IAEA,2BAA2B;IAC3B,MAAM,mBAAmB;QACvB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,IAAI,iBAAiB,QAAQ,CAAC,SAAS,WAAW,KAAK;QACrD,WAAW,MAAM;IACnB;IAEA,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,gBACP,IAAc,EACd,UAAsB,EACtB,YAAoB,IAAI;IAExB,MAAM,OAAO,SAAS,CAAC,WAAW;IAElC,IAAI,KAAK,MAAM,IAAI,WAAW;QAC5B,OAAO,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC;IAC7B;IAEA,oCAAoC;IACpC,OAAQ;QACN,KAAK;QACL,KAAK;YACH,OAAO,CAAC,kBAAkB,EAAE,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC;QAEjD,KAAK;YACH,OAAO,CAAC,UAAU,EAAE,KAAK,IAAI,CAAC,MAAM,oBAAoB,CAAC;QAE3D,KAAK;YACH,OAAO,CAAC,YAAY,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;QAE5C,KAAK;YACH,OAAO,CAAC,YAAY,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;QAE5C,KAAK;YACH,OAAO,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;QAEjC,KAAK;YACH,OAAO,CAAC,UAAU,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC;QAExC,KAAK;YACH,OAAO,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC;QAEnC,KAAK;YACH,OAAO,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC;QAE/B;YACE,OAAO,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC;IAC/B;AACF;AAMO,SAAS,yBACd,IAAU,EACV,aAAqB,EACrB,cAAsB,UAAU,EAChC,aAAyB,YAAY;IAErC,MAAM,OAAO,SAAS,CAAC,WAAW;IAClC,MAAM,SAAqB,EAAE;IAC7B,MAAM,YAA4B,EAAE;IACpC,MAAM,aAA6B,EAAE;IACrC,IAAI,gBAAgB;IACpB,IAAI,iBAAiB;IAErB,KAAK,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnB,IAAI,OAAO,MAAM,EAAE;YACjB,MAAM,OAAO;YACb,MAAM,WAAW,KAAK,QAAQ;YAC9B,iBAAiB,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK;YACnD,IAAI,SAAS,KAAK,EAAE;gBAClB,kBAAkB,SAAS,KAAK,CAAC,KAAK,GAAG;YAC3C,OAAO;gBACL,kBAAkB,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK,GAAG;YACzD;YAEA,MAAM,WAAW,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,OAAO,MAAM,EAAE;YACrD,MAAM,eAAe,aAAa;YAClC,MAAM,oBAAoB,wBACxB,cACA;YAGF,MAAM,eAAe,qBACnB,mBACA,UACA;YAEF,WAAW,IAAI,CAAC;gBACd,MAAM;gBACN,SAAS;gBACT,cAAc;YAChB;YAEA,MAAM,gBAAgB,sBACpB,mBACA,UACA,aACA;YAEF,OAAO,IAAI,CAAC;gBACV,MAAM;gBACN,SAAS;gBACT,cAAc;YAChB;YAEA,MAAM,WAAW,MAAM,OAAO,CAAC,KAAK,QAAQ,IACxC,KAAK,QAAQ,CAAC,EAAE,GAChB,KAAK,QAAQ;YACjB,MAAM,eAAe,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE,UAAU,MAAM,EAAE;YACpE,MAAM,mBAAmB,aAAa;YACtC,MAAM,wBAAwB,wBAC5B,kBACA;YAGF,8BAA8B;YAC9B,MAAM,aAAa,CAAC,CAAC,SAAS,UAAU,CAAC,MAAM;YAC/C,MAAM,SAAS,CAAC,CAAC,SAAS,UAAU,CAAC,EAAE;YAEvC,oDAAoD;YACpD,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK,wBAAwB;gBAC5D,MAAM,oBAAoB,0BACxB,uBACA,UACA,aACA,YACA,YACA;gBAGF,UAAU,IAAI,CAAC;oBACb,MAAM;oBACN,SAAS;oBACT,cAAc;gBAChB;YACF;QACF;IACF;IAEA,MAAM,yBAAyB,wBAC7B,aAAa,gBACb;IAEF,MAAM,eAAe,uBACnB,wBACA,QACA,WACA,aACA;IAEF,MAAM,qBAAqB,oBACzB,wBACA;IAGF,OAAO;QACL,eAAe;QACf;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;AAEA;;;CAGC,GACD,SAAS,qBACP,QAAgB,EAChB,QAA8B,EAC9B,UAAsB;IAEtB,MAAM,YAAY,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK;IAC/D,MAAM,UAAU,SAAS,UAAU,CAAC,MAAM,GACtC,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,MAAM,CAAC,KAAK,IAC3C;IACJ,MAAM,MAAM,SAAS,UAAU,CAAC,EAAE,GAC9B,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,EAAE,CAAC,KAAK,IACvC;IACJ,MAAM,UAAU,SAAS,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,KAAK,CAAC,KAAK,IAAI;IAEpE,MAAM,kBAAkB,UAAU,MAAM,GAAG;IAE3C,OAAQ;QACN,KAAK;YACH,OAAO,CAAC;;GAEX,EAAE,SAAS;aACD,EAAE,SAAS;;;EAGtB,EAAE,kBACQ,CAAC;;;;;;;;;;;6CAWgC,EAAE,KAAK,SAAS,CAAC,WAAW;;;;EAIvE,EAAE,UACU,CAAC,yCAAyC,EAAE,KAAK,SAAS,CAC1D,SACA;;yEAE2D,CAAC,GAC5D,GACH;;EAET,EAAE,MACU,CAAC,qCAAqC,EAAE,KAAK,SAAS,CAAC,KAAK;;iEAET,CAAC,GACpD,GACH;;EAET,EAAE,UACU,CAAC,wCAAwC,EAAE,KAAK,SAAS,CAAC,SAAS;;2DAEtB,CAAC,GAC9C,IACF,GACA,CAAC;oBACO,EAAE,gBAAgB,WAAW,YAAY;;;EAG3D,EAAE,UACU,CAAC;kBACG,EAAE,gBAAgB,SAAS,YAAY;yEACgB,CAAC,GAC5D,GACH;;EAET,EAAE,MACU,CAAC;cACD,EAAE,gBAAgB,KAAK,YAAY;iEACgB,CAAC,GACpD,GACH;;EAET,EAAE,UACU,CAAC;kCACmB,EAAE,KAAK,SAAS,CAAC,SAAS;2DACD,CAAC,GAC9C,IACF,CACH;;;;;AAKT,CAAC;QACG,KAAK;YACH,OAAO,CAAC;OACP,EAAE,SAAS;iBACD,EAAE,SAAS;;;wBAGJ,EAAE,gBAAgB,WAAW,YAAY;;MAE3D,EAAE,UACI,CAAC;sBACS,EAAE,gBAAgB,SAAS,YAAY;6EACgB,CAAC,GAClE,GACH;MACH,EAAE,MACI,CAAC;kBACK,EAAE,gBAAgB,KAAK,YAAY;qEACgB,CAAC,GAC1D,GACH;MACH,EAAE,UACI,CAAC;sCACyB,EAAE,KAAK,SAAS,CAAC,SAAS;+DACD,CAAC,GACpD,GACH;;;;IAIL,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;MAIR,EAAE,SAAS;OACV,EAAE,SAAS;;;;yBAIO,EAAE,gBAAgB,WAAW,YAAY;QAC1D,EAAE,UACE,CAAC;uBACU,EAAE,gBAAgB,SAAS,aAAa,GACnD,sBACH;QACD,EAAE,MACE,CAAC;mBACM,EAAE,gBAAgB,KAAK,aAAa,GAC3C,kBACH;QACD,EAAE,UACE,CAAC;iCACoB,EAAE,QAAQ,IAAI,CAAC,MAAM,mBAAmB,CAAC,GAC9D,sBACH;;;;;;;;QAQD,EAAE,UACE,CAAC;;gEAEmD,CAAC,GACrD,GACH;;QAED,EAAE,MACE,CAAC;;wDAE2C,CAAC,GAC7C,GACH;;QAED,EAAE,UACE,CAAC;;;;yDAI4C,CAAC,GAC9C,gDACH;AACT,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;;;;;GAMX,EAAE,SAAS;;aAED,EAAE,SAAS;;;IAGpB,EAAE,UAAU,qBAAqB,GAAG;;;WAG7B,EAAE,SAAS;;;;;;4BAMM,EAAE,gBAAgB,WAAW,YAAY;QAC7D,EAAE,UACE,CAAC,kBAAkB,EAAE,gBAAgB,WAAW,EAAE,EAAE,YAAY,CAAC,CAAC,GAClE,GACH;QACD,EAAE,MAAM,CAAC,cAAc,EAAE,gBAAgB,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC,GAAG,GAAG;QACxE,EAAE,UAAU,CAAC,iBAAiB,EAAE,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;;;;QAI5D,EAAE,UAAU,0BAA0B,GAAG;;;;;;;;;;;;QAYzC,EAAE,UACE,CAAC;;;;;qCAKwB,CAAC,GAC1B,GACH;;QAED,EAAE,MACE,CAAC;;;;;qCAKwB,CAAC,GAC1B,GACH;;QAED,EAAE,UACE,CAAC;;;;;qCAKwB,CAAC,GAC1B,CAAC,mCAAmC,CAAC,CACxC;;;;;;;QAOD,EAAE,UACE,mEACA,8CACH;;;;;;;QAOD,EAAE,UAAU,0BAA0B,GAAG;;;AAGjD,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;;;;IAKV,EAAE,SAAS;;aAEF,EAAE,SAAS;;;;IAIpB,EAAE,UAAU,sBAAsB,GAAG;;;WAG9B,EAAE,SAAS;;;;;;;;4BAQM,EAAE,gBAAgB,WAAW,YAAY;QAC7D,EAAE,UACE,CAAC,kBAAkB,EAAE,gBAAgB,WAAW,EAAE,EAAE,YAAY,CAAC,CAAC,GAClE,GACH;QACD,EAAE,MAAM,CAAC,cAAc,EAAE,gBAAgB,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC,GAAG,GAAG;QACxE,EAAE,UAAU,CAAC,kBAAkB,EAAE,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;;;;QAI7D,EAAE,UAAU,2BAA2B,GAAG;;;;;;;;;;QAU1C,EAAE,UACE,CAAC;;;sCAGyB,CAAC,GAC3B,GACH;;QAED,EAAE,MACE,CAAC;;;sCAGyB,CAAC,GAC3B,GACH;;QAED,EAAE,UACE,CAAC;;;sCAGyB,CAAC,GAC3B,CAAC,oCAAoC,CAAC,CACzC;;;;;;;;QAQD,EAAE,UACE,6FACA,2DACH;;;;;;;;QAQD,EAAE,UAAU,2BAA2B,GAAG;;;AAGlD,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;;;;;GAMX,EAAE,SAAS;;MAER,EAAE,SAAS;;mBAEE,EAAE,UAAU,UAAU,GAAG;IACxC,EAAE,UAAU,oBAAoB,mBAAmB;;;IAGnD,EAAE,SAAS;;;;KAIV,EAAE,SAAS;;;;;;;uCAOuB,EAAE,gBACjC,WACA,YACA;QACA,EAAE,UACE,CAAC,6BAA6B,EAAE,gBAChC,WAAW,EAAE,EACb,YACA,CAAC,CAAC,GACF,GACH;QACD,EAAE,MACE,CAAC,yBAAyB,EAAE,gBAC5B,OAAO,EAAE,EACT,YACA,CAAC,CAAC,GACF,GACH;QACD,EAAE,UACE,CAAC,qCAAqC,EAAE,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,GAC9D,GACH;;;;QAID,EAAE,UAAU,2BAA2B,GAAG;;;;;;;;;;QAU1C,EAAE,UACE,CAAC;;;qCAGwB,CAAC,GAC1B,GACH;;QAED,EAAE,MACE,CAAC;;;qCAGwB,CAAC,GAC1B,GACH;;QAED,EAAE,UACE,CAAC;;;oCAGuB,CAAC,GACzB,CAAC,mCAAmC,CAAC,CACxC;;;;;;;;QAQD,EAAE,UACE,kEACA,8CACH;;;;;;;QAOD,EAAE,UAAU,8BAA8B,GAAG;;;AAGrD,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;;;;;;GAOX,EAAE,SAAS,0CAA0C,EAAE,SAAS;KAC9D,EAAE,SAAS;;;IAGZ,EAAE,UAAU,eAAe,GAAG;IAC9B,EAAE,UAAU,qBAAqB,oBAAoB;;;MAGnD,EAAE,SAAS,uBAAuB,EAAE,SAAS;QAC3C,EAAE,SAAS,YAAY,EAAE,SAAS;aAC7B,EAAE,SAAS;;;;;SAKf,EAAE,SAAS;;iBAEH,EAAE,gBAAgB,WAAW,YAAY;IACtD,EAAE,UAAU,CAAC,WAAW,EAAE,gBAAgB,WAAW,EAAE,EAAE,aAAa,GAAG,GAAG;IAC5E,EAAE,MAAM,CAAC,OAAO,EAAE,gBAAgB,OAAO,EAAE,EAAE,aAAa,GAAG,GAAG;IAChE,EAAE,UAAU,CAAC,oBAAoB,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;;;;IAI9D,EAAE,UAAU,6BAA6B,GAAG;;;;;;;;;;IAU5C,EAAE,UACM,CAAC;;;iCAGoB,CAAC,GACtB,GACH;;IAEL,EAAE,MACM,CAAC;;;iCAGoB,CAAC,GACtB,GACH;;IAEL,EAAE,UACM,CAAC;;;sCAGyB,CAAC,GAC3B,CAAC,yCAAyC,CAAC,CAC9C;;;;;;SAMA,EAAE,SAAS;;IAEhB,EAAE,UACM,kFACA,gDACH;;;;;SAKA,EAAE,SAAS;;;IAGhB,EAAE,UAAU,gCAAgC,GAAG;;AAEnD,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;IAEV,EAAE,SAAS;WACJ,EAAE,SAAS;;IAElB,EAAE,UAAU,gCAAgC,GAAG;IAC/C,EAAE,UAAU,sBAAsB,qBAAqB;;;KAGtD,EAAE,SAAS;;;uCAGuB,EAAE,UAAU,IAAI,CAAC,MAAM;QACtD,EAAE,UACE,CAAC,6BAA6B,EAAE,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,GAC9D,GACH;QACD,EAAE,MAAM,CAAC,yBAAyB,EAAE,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;QACpE,EAAE,UAAU,CAAC,6BAA6B,EAAE,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;;;;;;YAMpE,EAAE,UACF,CAAC;;aAEA,CAAC,GACF,GACH;YACG,EAAE,MACF,CAAC;;;aAGA,CAAC,GACF,GACH;;;;yBAIgB,EAAE,SAAS;;;;;QAK5B,EAAE,UACE,CAAC;yBACY,EAAE,SAAS;;;;;;;;;SAS3B,CAAC,GACE,CAAC;;;SAGJ,CAAC,CACD;;;;;QAKD,EAAE,UACE,CAAC;+DACkD,CAAC,GACpD,gDACH;;;AAGT,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;;IAGV,EAAE,SAAS;MACT,EAAE,SAAS;;IAEb,EAAE,UAAU,wCAAwC,GAAG;IACvD,EAAE,UAAU,gCAAgC,+BAA+B;;;;kCAI7C,EAAE,UAAU,IAAI,CAAC,MAAM;QACjD,EAAE,UACE,CAAC,wBAAwB,EAAE,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,GACxD,GACH;QACD,EAAE,MAAM,CAAC,oBAAoB,EAAE,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;QAC9D,EAAE,UAAU,CAAC,yBAAyB,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;;;;;;YAM/D,EAAE,UACF,CAAC;;aAEA,CAAC,GACF,GACH;YACG,EAAE,MACF,CAAC;;;aAGA,CAAC,GACF,GACH;;;;;;;;;QASD,EAAE,UACE,CAAC;;;;;kCAKqB,CAAC,GACvB,CAAC,iCAAiC,CAAC,CACtC;;;;;;;;QAQD,EAAE,UACE,CAAC;;;;;;;SAOJ,CAAC,GACE,CAAC;;;;SAIJ,CAAC,CACD;;;AAGT,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;OAEP,EAAE,SAAS;;UAER,EAAE,SAAS;;;QAGb,EAAE,UAAU,kBAAkB,GAAG;;;;;;;yBAOhB,EAAE,gBAAgB,WAAW,YAAY;YACtD,EAAE,UACF,CAAC,WAAW,EAAE,gBAAgB,WAAW,EAAE,EAAE,YAAY,CAAC,CAAC,GAC3D,GACH;YACG,EAAE,MAAM,CAAC,OAAO,EAAE,gBAAgB,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC,GAAG,GAAG;YACjE,EAAE,UAAU,CAAC,iBAAiB,EAAE,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;;;;YAI5D,EAAE,UAAU,qCAAqC,GAAG;;;;;;;;YAQpD,EAAE,UACF,CAAC;;;2CAG8B,CAAC,GAChC,GACH;YACG,EAAE,MACF,CAAC;;;2CAG8B,CAAC,GAChC,GACH;YACG,EAAE,UACF,CAAC;;;iDAGoC,CAAC,GACtC,CAAC,2CAA2C,CAAC,CAChD;;;;;YAKG,EAAE,UACF,gFACA,yDACH;;;;IAIL,CAAC;QACD,KAAK;YACH,OAAO,CAAC,EAAE,EAAE,SAAS;UACjB,EAAE,SAAS;;;;;;;;;oBASD,EAAE,gBAAgB,WAAW,YAAY;QACrD,EAAE,UACE,CAAC,UAAU,EAAE,gBAAgB,WAAW,EAAE,EAAE,aAAa,GACzD,GACH;QACD,EAAE,MAAM,CAAC,MAAM,EAAE,gBAAgB,OAAO,EAAE,EAAE,aAAa,GAAG,GAAG;QAC/D,EAAE,UAAU,CAAC,WAAW,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;;;;QAIrD,EAAE,UAAU,8BAA8B,GAAG;;;;;;;;;;QAU7C,EAAE,UACE,CAAC;;;oCAGuB,CAAC,GACzB,GACH;;QAED,EAAE,MACE,CAAC;;;oCAGuB,CAAC,GACzB,GACH;;QAED,EAAE,UACE,CAAC;;;sCAGyB,CAAC,GAC3B,uCACH;;;;;;;;;QASD,EAAE,UACE,wEACA,gDACH;;;;IAIL,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;OAGP,EAAE,SAAS;;UAER,EAAE,SAAS;;;MAGf,EAAE,UAAU,6BAA6B,GAAG;;;;;;;wBAO1B,EAAE,gBAAgB,WAAW,YAAY;QACzD,EAAE,UACE,CAAC,cAAc,EAAE,gBAAgB,WAAW,EAAE,EAAE,aAAa,GAC7D,GACH;QACD,EAAE,MAAM,CAAC,UAAU,EAAE,gBAAgB,OAAO,EAAE,EAAE,aAAa,GAAG,GAAG;QACnE,EAAE,UAAU,CAAC,oBAAoB,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;;;;QAI9D,EAAE,UAAU,yBAAyB,GAAG;;;;;;;;QAQxC,EAAE,UACE,CAAC;;;oCAGuB,CAAC,GACzB,GACH;QACD,EAAE,MACE,CAAC;;;oCAGuB,CAAC,GACzB,GACH;QACD,EAAE,UACE,CAAC;;;oCAGuB,CAAC,GACzB,qCACH;;;;;;QAMD,EAAE,UACE,mEACA,6CACH;;;;IAIL,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;OAGP,EAAE,SAAS;;UAER,EAAE,SAAS;;;QAGb,EAAE,UAAU,6BAA6B,GAAG;;;;;;;;;4BASxB,EAAE,gBAAgB,WAAW,YAAY;YACzD,EAAE,UACF,CAAC,cAAc,EAAE,gBAAgB,WAAW,EAAE,EAAE,aAAa,GAC7D,GACH;YACG,EAAE,MAAM,CAAC,UAAU,EAAE,gBAAgB,OAAO,EAAE,EAAE,aAAa,GAAG,GAAG;YACnE,EAAE,UAAU,CAAC,yBAAyB,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;;;;YAInE,EAAE,UAAU,yBAAyB,GAAG;;;;;;;;YAQxC,EAAE,UACF,CAAC;;;wCAG2B,CAAC,GAC7B,GACH;YACG,EAAE,MACF,CAAC;;;wCAG2B,CAAC,GAC7B,GACH;YACG,EAAE,UACF,CAAC;;;sCAGyB,CAAC,GAC3B,mCACH;;;;;;YAMG,EAAE,UACF,mEACA,6CACH;;;;IAIL,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;OAIP,EAAE,SAAS;;UAER,EAAE,SAAS;;;MAGf,EAAE,UAAU,iBAAiB,GAAG;;;MAGhC,EAAE,SAAS;;;;;;0BAMS,EAAE,gBAAgB,WAAW,YAAY;QAC3D,EAAE,UACE,CAAC,gBAAgB,EAAE,gBAAgB,WAAW,EAAE,EAAE,YAAY,CAAC,CAAC,GAChE,GACH;QACD,EAAE,MAAM,CAAC,YAAY,EAAE,gBAAgB,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC,GAAG,GAAG;QACtE,EAAE,UAAU,CAAC,iBAAiB,EAAE,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;;;;QAI5D,EAAE,UAAU,0BAA0B,GAAG;;;;;;;;QAQzC,EAAE,UACE,CAAC;;;qCAGwB,CAAC,GAC1B,GACH;QACD,EAAE,MACE,CAAC;;;qCAGwB,CAAC,GAC1B,GACH;QACD,EAAE,UACE,CAAC;;;qCAGwB,CAAC,GAC1B,uCACH;;;;;;QAMD,EAAE,UACE,mEACA,8CACH;;;;IAIL,CAAC;QACD,KAAK;YACH,OAAO,CAAC,GAAG,EAAE,SAAS;;IAExB,EAAE,SAAS;;mBAEI,EAAE,gBAAgB,WAAW,YAAY;MACtD,EAAE,UACI,CAAC,WAAW,EAAE,gBAAgB,WAAW,EAAE,EAAE,aAAa,GAC1D,GACH;MACH,EAAE,MAAM,CAAC,OAAO,EAAE,gBAAgB,OAAO,EAAE,EAAE,aAAa,GAAG,GAAG;MAChE,EAAE,UAAU,CAAC,aAAa,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG;;;;;MAKvD,EAAE,UAAU,8BAA8B,GAAG;;;;;;;;MAQ7C,EAAE,UACI,CAAC;;;kCAGqB,CAAC,GACvB,GACH;MACH,EAAE,MACI,CAAC;;;kCAGqB,CAAC,GACvB,GACH;MACH,EAAE,UACI,CAAC;;;oCAGuB,CAAC,GACzB,uCACH;;;;;;;;UAQC,EAAE,UACA,kEACA,6CACH;;;;;IAKL,CAAC;QACD;YACE,mDAAmD;YACnD,OAAO,qBAAqB,UAAU,UAAU;IACpD;AACF;AAEA;;;CAGC,GACD,SAAS,sBACP,QAAgB,EAChB,SAA+B,EAC/B,WAAmB,EACnB,UAAsB;IAEtB,OAAQ;QACN,KAAK;YACH,OAAO,CAAC;SACL,EAAE,SAAS,+BAA+B,EAAE,SAAS;;UAEpD,EAAE,SAAS;;;;;GAKlB,EAAE,SAAS;;;;wBAIU,EAAE,SAAS,QAAQ,EAAE,SAAS;yBAC7B,EAAE,SAAS;;AAEpC,CAAC;QACG,KAAK;YACH,OAAO,CAAC;aACD,EAAE,SAAS,+BAA+B,EAAE,SAAS;;OAE3D,EAAE,SAAS;;4BAEU,EAAE,SAAS;6BACV,EAAE,SAAS;;IAEpC,CAAC;QACD,KAAK;YACH,OAAO,CAAC,GAAG,EAAE,SAAS;;MAEtB,EAAE,SAAS,gBAAgB,EAAE,SAAS;;MAEtC,EAAE,SAAS;OACV,EAAE,SAAS;;;;;wBAKM,EAAE,SAAS;;;;;;;;;;;;;;;;AAgBnC,CAAC;QACG,KAAK;YACH,OAAO,CAAC;GACX,EAAE,SAAS;;aAED,EAAE,SAAS;YACZ,EAAE,SAAS;;;WAGZ,EAAE,SAAS;4BACM,EAAE,SAAS;;;;;;;;;;;;;;;WAe5B,EAAE,SAAS;;;;;;;;AAQtB,CAAC;QACG,KAAK;YACH,OAAO,CAAC;uBACS,EAAE,SAAS;;;OAG3B,EAAE,SAAS;;UAER,EAAE,SAAS;;QAEb,EAAE,SAAS;;;iBAGF,EAAE,SAAS;;;;;;;;;QASpB,EAAE,SAAS;;;;;;;;IAQf,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;IAGV,EAAE,SAAS;;aAEF,EAAE,SAAS;;YAEZ,EAAE,SAAS;;;WAGZ,EAAE,SAAS;;wBAEE,EAAE,SAAS;;;;;;;;;;;;;;;WAexB,EAAE,SAAS;;;;;;;;AAQtB,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;OAEP,EAAE,SAAS;;UAER,EAAE,SAAS;;;;kCAIa,EAAE,SAAS;;;;;;;;;;IAUzC,CAAC;QACD,KAAK;YACH,OAAO,CAAC,EAAE,EAAE,SAAS;UACjB,EAAE,SAAS;;oBAED,EAAE,SAAS;;;;;;;;IAQ3B,CAAC;QACD,KAAK;YACH,OAAO,CAAC;MACR,EAAE,SAAS;;UAEP,EAAE,SAAS;iCACY,EAAE,SAAS;;;;;;;IAOxC,CAAC;QACD,KAAK;YACH,OAAO,CAAC;MACR,EAAE,SAAS;;UAEP,EAAE,SAAS;+BACU,EAAE,SAAS;;;;;;;IAOtC,CAAC;QACD,KAAK;YACH,OAAO,CAAC;MACR,EAAE,SAAS;;UAEP,EAAE,SAAS;YACT,EAAE,SAAS;;;MAGjB,EAAE,SAAS,+BAA+B,EAAE,SAAS;;;;;;;IAOvD,CAAC;QACD,KAAK;YACH,OAAO,CAAC,GAAG,EAAE,SAAS;;IAExB,EAAE,SAAS;kBACG,EAAE,SAAS;;;;;;;;;;;;;IAazB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;;;;GAOX,EAAE,SAAS;KACT,EAAE,SAAS;uBACO,EAAE,SAAS;;;MAG5B,EAAE,SAAS;QACT,EAAE,SAAS,IAAI,EAAE,SAAS;YACtB,EAAE,SAAS;8BACO,EAAE,SAAS;;;;;SAKhC,EAAE,SAAS;;;;;SAKX,EAAE,SAAS;;;IAGhB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;IAEV,EAAE,SAAS;MACT,EAAE,SAAS;0BACS,EAAE,SAAS;;;wBAGb,EAAE,SAAS;;;;;;CAMlC,CAAC;QACE,KAAK;YACH,OAAO,CAAC;2BACa,EAAE,SAAS;UAC5B,EAAE,SAAS;iBACJ,EAAE,SAAS;oBACR,EAAE,SAAS;;;WAGpB,EAAE,SAAS;;;4BAGM,EAAE,SAAS;;;;;;;;MAQjC,CAAC;QACH;YACE,mDAAmD;YACnD,OAAO,sBACL,UACA,WACA,aACA;IAEN;AACF;AAEA;;;CAGC,GACD,SAAS,0BACP,YAAoB,EACpB,QAAwB,EACxB,WAAmB,EACnB,UAAsB,EACtB,aAAsB,KAAK,EAC3B,SAAkB,KAAK;IAEvB,IAAI,eAAe;IACnB,MAAM,aAAuB,EAAE;IAE/B,0BAA0B;IAC1B,IAAI,oBAAoB,+IAAA,CAAA,oBAAuB,EAC7C,eAAe;SACZ,IAAI,oBAAoB,+IAAA,CAAA,oBAAuB,EAClD,eAAe;SACZ,IAAI,oBAAoB,+IAAA,CAAA,sBAAyB,EACpD,eAAe;SACZ,IAAI,oBAAoB,+IAAA,CAAA,qBAAwB,EACnD,eAAe;SACZ,IAAI,oBAAoB,+IAAA,CAAA,oBAAuB,EAClD,eAAe;SACZ,IAAI,oBAAoB,+IAAA,CAAA,qBAAwB,EACnD,eAAe;SACZ,IAAI,oBAAoB,+IAAA,CAAA,mBAAsB,EACjD,eAAe;SACZ,IAAI,oBAAoB,+IAAA,CAAA,uBAA0B,EACrD,eAAe;IAEjB,6CAA6C;IAC7C,OAAQ;QACN,KAAK;YACH,WAAW,IAAI,CAAC,mBAAmB,qBAAqB;YACxD;QACF,KAAK;YACH,WAAW,IAAI,CAAC,mBAAmB,kBAAkB;YACrD;QACF,KAAK;YACH,eAAe;YACf;QACF,KAAK;YACH,eAAe;YACf;QACF,KAAK;YACH,eAAe;YACf,WAAW,IAAI,CAAC,mBAAmB,cAAc;YACjD;QACF;YACC,IAAI,WAAW,YAAY,SAAS,KAAK,YAAY,+IAAA,CAAA,QAAW,EAAE;gBAC/D,MAAM,QAAQ,SAAS,KAAK;gBAC5B,WAAW,IAAI,CACb,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YAEhE;YACA,IAAI,eAAe,UACjB,WAAW,IAAI,CAAC,CAAC,WAAW,EAAE,AAAC,SAAiB,SAAS,EAAE;YAC7D,IAAI,eAAe,UACjB,WAAW,IAAI,CAAC,CAAC,WAAW,EAAE,AAAC,SAAiB,SAAS,EAAE;YAC7D,IAAI,aAAa,UACf,WAAW,IAAI,CAAC,CAAC,SAAS,EAAE,AAAC,SAAiB,OAAO,EAAE;YACzD,IAAI,iBAAiB,UACnB,WAAW,IAAI,CAAC,CAAC,aAAa,EAAE,AAAC,SAAiB,WAAW,EAAE;YACjE;IACJ;IAEA,OAAQ;QACN,KAAK;YACH,OAAO,CAAC;;;GAGX,EAAE,aAAa;;wBAEM,EAAE,aAAa;mBACpB,EAAE,aAAa;IAC9B,EAAE,WAAW,IAAI,CAAC,WAAW;;;AAGjC,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;OAEP,EAAE,aAAa;;4BAEM,EAAE,aAAa;uBACpB,EAAE,aAAa;QAC9B,EAAE,WAAW,IAAI,CAAC,KAAK;;;IAG3B,CAAC;QACD,KAAK;YACH,OAAO,CAAC,GAAG,EAAE,aAAa;;;;MAI1B,EAAE,aAAa;OACd,EAAE,aAAa;;;;;;;;;;QAUd,EAAE,aAAa,uBAAuB,GAAG;QACzC,EAAE,SAAS,mBAAmB,GAAG;;;;;;;QAOjC,EAAE,aAAa,uBAAuB,GAAG;QACzC,EAAE,SAAS,mBAAmB,GAAG;;;;YAI7B,EAAE,aAAa,0BAA0B,GAAG;YAC5C,EAAE,SAAS,kBAAkB,GAAG;;;;;;;;QAQpC,EAAE,aAAa,sBAAsB,GAAG;QACxC,EAAE,SAAS,kBAAkB,GAAG;;;;;YAK5B,EAAE,gBAAgB,cAClB,0CACA,gBAAgB,YACd,4DACA,gBAAgB,WACd,0CACA,wCACP;;;;;;;;;;;;;;AAcT,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;OAEP,EAAE,aAAa;;UAEZ,EAAE,aAAa;;;;;;YAMb,EAAE,WACH,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,GAAG,WAAW,KAAK,IAAI,KAAK,CAAC,GACnD,CAAC,EAAE,MAAM,EAAE,CAAC;YACjB,GACC,IAAI,CAAC,cAAc;;;IAG1B,CAAC;QACD,KAAK;YACH,OAAO,CAAC,EAAE,EAAE,aAAa;UACrB,EAAE,aAAa;;;;;;QAMjB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,GAAG,WAAW,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;YACpE,GACC,IAAI,CAAC,UAAU;;;IAGtB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;MACR,EAAE,aAAa;;UAEX,EAAE,aAAa;MACnB,EAAE,WACG,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,CAAC,YAAY,EAAE,IAAI,GAAG,EAAE,OAAO;YACxC,GACC,IAAI,CAAC,QAAQ;;;;QAIhB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;gBACzB,OAAO,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC;YACjC,GACC,IAAI,CAAC,UAAU;;;IAGtB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;MACR,EAAE,aAAa;;UAEX,EAAE,aAAa;QACjB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,CAAC,YAAY,EAAE,IAAI,GAAG,EAAE,OAAO;YACxC,GACC,IAAI,CAAC,UAAU;;;;YAId,EAAE,WACH,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;gBACzB,OAAO,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC;YACjC,GACC,IAAI,CAAC,cAAc;;;IAG1B,CAAC;QACD,KAAK;YACH,OAAO,CAAC;MACR,EAAE,aAAa;;UAEX,EAAE,aAAa;MACnB,EAAE,WACG,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO;YACT,GACC,IAAI,CAAC,QAAQ;;;;;QAKhB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;gBACzB,OAAO;YACT,GACC,IAAI,CAAC,UAAU;;;IAGtB,CAAC;QACD,KAAK;YACH,OAAO,CAAC,GAAG,EAAE,aAAa;;IAE5B,EAAE,aAAa;;;;UAIT,EAAE,WACD,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,CAAC,MAAM,EAAE,IAAI,IAAI,EAAE,OAAO;YACnC,GACC,IAAI,CAAC,YAAY;;;;IAIxB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;OAIP,EAAE,aAAa;;UAEZ,EAAE,aAAa;;QAEjB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACxB,GACC,IAAI,CAAC,UAAU;;QAElB,EAAE,aAAa;YACX,EAAE,WACH,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,GAAG,IAAI,GAAG,EAAE,MAAM,CAAC,CAAC;YAC7B,GACC,IAAI,CAAC,cAAc;;;;;YAKlB,EAAE,WACH,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;gBACzB,OAAO,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC;YACjC,GACC,IAAI,CAAC,cAAc;;;IAG1B,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;OAIP,EAAE,aAAa;SACb,EAAE,aAAa;QAChB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,GAAG,WAAW,KAAK,QAAQ,CAAC;YACrC,GACC,IAAI,CAAC,UAAU;;;UAGhB,EAAE,aAAa;YACb,EAAE,aAAa,IAAI,EAAE,aAAa;gBAC9B,EAAE,aAAa;YACnB,EAAE,WACH,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,GAAG,WAAW,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;YACxC,GACC,IAAI,CAAC,cAAc;;;;;aAKjB,EAAE,aAAa;;QAEpB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;gBACzB,OAAO,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC;YACjC,GACC,IAAI,CAAC,UAAU;;IAEtB,CAAC;QACD,KAAK;YACH,OAAO,CAAC,IAAI,EAAE,aAAa;eAClB,EAAE,aAAa;QACtB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC;YAC3B,GACC,IAAI,CAAC,UAAU;;;SAGjB,EAAE,aAAa;;;gBAGR,EAAE,WACP,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;YAC5B,GACC,IAAI,CAAC,kBAAkB;;;;;;YAMtB,EAAE,WACH,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;gBACzB,OAAO,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC;YACjC,GACC,IAAI,CAAC,cAAc;;;IAG1B,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;QAEN,EAAE,aAAa;UACb,EAAE,aAAa;QACjB,EAAE,WACC,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,CAAC,YAAY,EAAE,IAAI,UAAU,EAAE,OAAO;YAC/C,GACC,IAAI,CAAC,UAAU;;;;;;;;YAQd,EAAE,WACH,GAAG,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;gBACzB,OAAO,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC;YACjC,GACC,IAAI,CAAC,cAAc;;;IAG1B,CAAC;QACD;YACE,mDAAmD;YACnD,OAAO,0BACL,cACA,UACA,aACA,cACA,YACA;IAEN;AACF;AAEA;;;CAGC,GACD,SAAS,uBACP,aAAqB,EACrB,MAAkB,EAClB,SAAyB,EACzB,WAAmB,EACnB,UAAsB;IAEtB,MAAM,OAAO,SAAS,CAAC,WAAW;IAElC,OAAQ;QACN,KAAK;YACH,MAAM,cAAc,OACjB,GAAG,CAAC,CAAC,OAAS,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,gBAAgB,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,EACjE,IAAI,CAAC;YAER,MAAM,kBAAkB,UACrB,GAAG,CACF,CAAC,WACC,CAAC,OAAO,EAAE,SAAS,IAAI,CAAC,mBAAmB,EAAE,SAAS,IAAI,CAAC,EAAE,CAAC,EAEjE,IAAI,CAAC;YAER,MAAM,eAAe,OAClB,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,WAAW,EAAE,SAAS,IAAI,CAAC,MAAM,CAAC;YAC/D,GACC,IAAI,CAAC;YAER,OAAO,CAAC;;AAEd,EAAE,YAAY;AACd,EAAE,gBAAgB;;UAER,EAAE,cAAc;;;;;GAKvB,EAAE,cAAc;;;wBAGK,EAAE,cAAc,QAAQ,EAAE,cAAc;;;;;AAKhE,EAAE,aAAa;;;;AAIf,CAAC;QACG,KAAK;YACH,MAAM,gBAAgB,OACnB,GAAG,CAAC,CAAC,OAAS,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,gBAAgB,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,EACjE,IAAI,CAAC;YACR,MAAM,oBAAoB,UACvB,GAAG,CACF,CAAC,WACC,CAAC,OAAO,EAAE,SAAS,IAAI,CAAC,mBAAmB,EAAE,SAAS,IAAI,CAAC,EAAE,CAAC,EAEjE,IAAI,CAAC;YACR,MAAM,iBAAiB,OACpB,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,WAAW,EAAE,SAAS,IAAI,CAAC,MAAM,CAAC;YAC/D,GACC,IAAI,CAAC;YACR,OAAO,CAAC;;IAEV,EAAE,cAAc;IAChB,EAAE,kBAAkB;;OAEjB,EAAE,cAAc;;4BAEK,EAAE,cAAc;;;;IAIxC,EAAE,eAAe;;;;IAIjB,CAAC;QACD,KAAK;YACH,OAAO,CAAC,GAAG,EAAE,cAAc;;;;AAIjC,EAAE,OACS,GAAG,CAAC,CAAC,OAAS,CAAC,aAAa,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE,EAC7D,IAAI,CAAC,MAAM;AACtB,EAAE,UACS,GAAG,CAAC,CAAC,WAAa,CAAC,gBAAgB,EAAE,SAAS,IAAI,CAAC,QAAQ,EAAE,SAAS,IAAI,EAAE,EAC5E,IAAI,CAAC,MAAM;;MAEhB,EAAE,cAAc;OACf,EAAE,cAAc;;;;;;;;;QASf,EAAE,OACC,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,SAAS,EAAE,KAAK,IAAI,CAAC;QACjC,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,YAAY,EAAE,SAAS,IAAI,CAAC;QACtD,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,QAAQ,EAAE,KAAK,IAAI,CACtC,WAAW,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG;2BACzB,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;YAClD,GACC,IAAI,CAAC,cAAc;;;;;;;;;AAS9B,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;GACX,EAAE,cAAc;;AAEnB,EAAE,OAAO,GAAG,CAAC,CAAC,OAAS,CAAC,cAAc,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM;AACjE,EAAE,UAAU,GAAG,CAAC,CAAC,WAAa,CAAC,iBAAiB,EAAE,SAAS,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM;;aAElE,EAAE,cAAc;IACzB,EAAE,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EACnE,IAAI,CAAC,UAAU;;WAEf,EAAE,cAAc;;;;;QAKnB,EAAE,OACC,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,KAAK,IAAI,CAAC,KAAK,EAAE,SAAS,IAAI,CACtE,IAAI,CAAC;YACV,GACC,IAAI,CAAC,cAAc;;;;QAItB,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,EACpD,IAAI,CAAC,cAAc;;;;QAItB,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,EACrD,IAAI,CAAC,cAAc;;;AAG9B,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;AAEd,EAAE,OAAO,GAAG,CAAC,CAAC,OAAS,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,MAAM;AACnD,EAAE,UAAU,GAAG,CAAC,CAAC,WAAa,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,MAAM;;;IAGzD,EAAE,cAAc;;aAEP,EAAE,cAAc;;IAEzB,EAAE,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EACpE,IAAI,CAAC,UAAU;;WAEf,EAAE,cAAc;;;;;;;QAOnB,EAAE,OACC,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,KAAK,IAAI,CAAC,KAAK,EAAE,SAAS,IAAI,CACvE,IAAI,CAAC;YACV,GACC,IAAI,CAAC,cAAc;;;;;QAKtB,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,EACrD,IAAI,CAAC,cAAc;;;;;QAKtB,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,EACvD,IAAI,CAAC,cAAc;;;AAG9B,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;;AAGd,EAAE,OAAO,GAAG,CAAC,CAAC,OAAS,CAAC,iBAAiB,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM;AACtE,EAAE,UACS,GAAG,CAAC,CAAC,WAAa,CAAC,oBAAoB,EAAE,SAAS,IAAI,CAAC,GAAG,CAAC,EAC3D,IAAI,CAAC,MAAM;;;GAGnB,EAAE,cAAc;;MAEb,EAAE,cAAc;;IAElB,EAAE,OACK,GAAG,CACF,CAAC,MAAM,IAAM,CAAC,gBAAgB,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAEzE,IAAI,CAAC,UAAU;;;IAGtB,EAAE,cAAc;;;;KAIf,EAAE,cAAc;;;;;;QAMb,EAAE,OACC,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,oBAAoB,EAAE,KAAK,IAAI,CAC9D,mBAAmB,EAAE,SAAS,IAAI,CAAC,KAAK,CAAC;YAC9C,GACC,IAAI,CAAC,cAAc;;;;;QAKtB,EAAE,OACC,GAAG,CACF,CAAC,OACC,CAAC,IAAI,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,EAE1E,IAAI,CAAC,cAAc;;;;QAItB,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,EACnD,IAAI,CAAC,cAAc;;;AAG9B,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;AAEd,EAAE,OAAO,GAAG,CAAC,CAAC,OAAS,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,MAAM;AACvD,EAAE,UAAU,GAAG,CAAC,CAAC,WAAa,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,MAAM;;GAE9D,EAAE,cAAc;KACd,EAAE,cAAc;IACjB,EAAE,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,SAAS,EAAE,KAAK,IAAI,EAAE,EAClE,IAAI,CAAC,UAAU;;;MAGpB,EAAE,cAAc,eAAe,EAAE,cAAc;QAC7C,EAAE,cAAc,IAAI,EAAE,cAAc;kBAC1B,EAAE,cAAc;;;;;SAKzB,EAAE,cAAc;IACrB,EAAE,OACK,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,aAAa,EAAE,KAAK,IAAI,CACzD,cAAc,EAAE,SAAS,IAAI,CAAC,GAAG,CAAC;YACvC,GACC,IAAI,CAAC,UAAU;;;;SAIjB,EAAE,cAAc;IACrB,EAAE,OACK,GAAG,CACF,CAAC,OAAS,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG;UAC5C,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG;KAC/B,CAAC,EAEK,IAAI,CAAC,UAAU;;;;SAIjB,EAAE,cAAc;IACrB,EAAE,OACK,GAAG,CACF,CAAC,OAAS,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG;UAC5C,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG;KAC/B,CAAC,EAEK,IAAI,CAAC,UAAU;;AAE1B,CAAC;QAEG,KAAK;YACH,OAAO,GAAG,OACP,GAAG,CACF,CAAC,OACC,CAAC,mBAAmB,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,EAEjE,IAAI,CAAC,MAAM;AACpB,EAAE,UACS,GAAG,CACF,CAAC,WACC,CAAC,sBAAsB,EAAE,SAAS,IAAI,CAAC,WAAW,GAAG,EAAE,EAAE,SAAS,IAAI,CAAC,CAAC,CAAC,EAE5E,IAAI,CAAC,MAAM;;;IAGlB,EAAE,cAAc;WACT,EAAE,cAAc;IACvB,EAAE,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,EAC5D,IAAI,CAAC,UAAU;;;KAGrB,EAAE,cAAc;;;YAGT,EAAE,OACH,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,cAAc,EAAE,SAAS,IAAI,CAC1E,eAAe,CAAC;YACrB,GACC,IAAI,CAAC,kBAAkB;;;;;QAK1B,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,EACpE,IAAI,CAAC,cAAc;;;AAG9B,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;AACd,EAAE,OAAO,GAAG,CAAC,CAAC,OAAS,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,MAAM;AACnD,EAAE,UAAU,GAAG,CAAC,CAAC,WAAa,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,MAAM;;IAEzD,EAAE,cAAc;MACd,EAAE,cAAc;IAClB,EAAE,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,CAAC,YAAY,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,EAAE,EAAE,KAAK,IAAI,EAAE,EACvE,IAAI,CAAC,UAAU;;;QAGlB,EAAE,OACC,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,GAAG,EAAE,KAAK,IAAI,CAC7C,2BAA2B,EAAE,SAAS,IAAI,CAAC,iBAAiB,CAAC;YAClE,GACC,IAAI,CAAC,cAAc;;;;QAItB,EAAE,OACC,GAAG,CACF,CAAC,OACC,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,qCAAqC,CAAC,EAEpE,IAAI,CAAC,cAAc;;;AAG9B,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;OAEP,EAAE,cAAc;;UAEb,EAAE,cAAc;QAClB,EAAE,OACC,GAAG,CAAC,CAAC,MAAM,IAAM,CAAC,SAAS,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EACvD,IAAI,CAAC,UAAU;;;;;YAKd,EAAE,OACH,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,KAAK,IAAI,CACxD,KAAK,EAAE,SAAS,IAAI,CAAC,IAAI,CAAC;YAC/B,GACC,IAAI,CAAC,cAAc;;;YAGlB,EAAE,OACH,GAAG,CAAC,CAAC,OAAS,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,EAC5D,IAAI,CAAC,cAAc;;;IAG1B,CAAC;QACD,KAAK;YACH,OAAO,CAAC,EAAE,EAAE,cAAc;UACtB,EAAE,cAAc;MACpB,EAAE,OACG,GAAG,CAAC,CAAC,MAAM,IAAM,CAAC,aAAa,EAAE,KAAK,IAAI,CAAC,WAAW,IAAI,EAC1D,IAAI,CAAC,QAAQ;;;;;;QAMhB,EAAE,OACC,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO;YACT,GACC,IAAI,CAAC,UAAU;;;;QAIlB,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,sCACd,IAAI,CAAC,UAAU;;;IAGtB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;MACR,EAAE,cAAc;;UAEZ,EAAE,cAAc;MACpB,EAAE,OACG,GAAG,CACF,CAAC,MAAM,IACL,CAAC,YAAY,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,EAEhE,IAAI,CAAC,QAAQ;;;QAGhB,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,uCACd,IAAI,CAAC,UAAU;;;IAGtB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;QACN,EAAE,cAAc;;YAEZ,EAAE,cAAc;UAClB,EAAE,OACD,GAAG,CACF,CAAC,MAAM,IACL,CAAC,YAAY,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,GAAG,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,EAE5D,IAAI,CAAC,UAAU;;;cAGZ,EAAE,OACL,GAAG,CAAC,CAAC,OAAS,uCACd,IAAI,CAAC,cAAc;;;MAGxB,CAAC;QACH,KAAK;YACH,OAAO,CAAC;MACR,EAAE,cAAc;;UAEZ,EAAE,cAAc;MACpB,EAAE,OACG,GAAG,CAAC,CAAC,MAAM,IAAM,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EACjE,IAAI,CAAC,QAAQ;;MAElB,EAAE,cAAc;QACd,EAAE,OACC,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO;YACT,GACC,IAAI,CAAC,UAAU;;;;QAIlB,EAAE,OACC,GAAG,CAAC,CAAC,OAAS,wCACd,IAAI,CAAC,UAAU;;;IAGtB,CAAC;QACD,KAAK;YACH,OAAO,CAAC,GAAG,EAAE,cAAc;;IAE7B,EAAE,cAAc;;MAEd,EAAE,OACG,GAAG,CAAC,CAAC,MAAM;gBACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,IAAI,EAAE,KAAK,IAAI,CAAC,YAAY,EAAE,SAAS,IAAI,CAC1E,GAAG,CAAC;YACT,GACC,IAAI,CAAC,QAAQ;;;;QAIhB,EAAE,OACC,GAAG,CACF,CAAC,OAAS,GAAG,KAAK,IAAI,CAAC,WAAW,GAAG,GAAG,EAAE,KAAK,IAAI,CAAC,WAAW,IAAI,EAEpE,IAAI,CAAC,WAAW;;UAEjB,EAAE,OACD,GAAG,CAAC,CAAC,OAAS,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC,EAClE,IAAI,CAAC,YAAY;;;;IAIxB,CAAC;QAED;YACE,mDAAmD;YACnD,OAAO,uBACL,eACA,QACA,WACA,aACA;IAEN;AACF;AAEA,wFAAwF;AACxF,SAAS,oBACP,aAAqB,EACrB,UAAsB;IAEtB,MAAM,OAAO,SAAS,CAAC,WAAW;IAElC,OAAQ;QACN,KAAK;YACH,OAAO,CAAC;;;OAGP,EAAE,cAAc,oBAAoB,EAAE,cAAc;;;6CAGd,EAAE,cAAc;;wBAErC,EAAE,cAAc;;;;;;;;;;;;;SAa/B,EAAE,cAAc;;;;;;;;;;;;;AAazB,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;;WAGH,EAAE,cAAc,oBAAoB,EAAE,cAAc;;wBAEvC,EAAE,cAAc;;4BAEZ,EAAE,cAAc;;;;;;aAM/B,EAAE,cAAc;;;;;;;IAOzB,CAAC;QACD,KAAK;YACH,OAAO,CAAC,2BAA2B,EAAE,cAAc;;;;;;MAMnD,EAAE,cAAc,QAAQ,EAAE,cAAc;;MAExC,EAAE,cAAc;;;;mEAI6C,EAAE,cAAc;;;;;;;;qBAQ9D,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAoC3B,EAAE,cAAc;;AAE1B,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;2BACa,EAAE,cAAc;;OAEpC,EAAE,cAAc;;;;;aAKV,EAAE,cAAc;;YAEjB,EAAE,cAAc;;;;;;;;;;;;;;;kDAesB,EAAE,cAAc;;;;;;;;;oBAS9C,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;YAwBxB,EAAE,cAAc;;;AAG5B,CAAC;QAEG,KAAK;YACH,OAAO,CAAC;;;;;;4BAMc,EAAE,cAAc;;aAE/B,EAAE,cAAc;;YAEjB,EAAE,cAAc;;WAEjB,EAAE,cAAc;;;;qBAIN,EAAE,cAAc;;;;;;;;;;;;qBAYhB,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;4BAsBT,EAAE,cAAc;;;;AAI5C,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;+BAEiB,EAAE,cAAc;;;;;UAKrC,EAAE,cAAc;;;;;;;kDAOwB,EAAE,cAAc;;+BAEnC,EAAE,cAAc;;;;;;;;;;;;;mBAa5B,EAAE,cAAc;;;IAG/B,CAAC;QACD,KAAK;YACH,OAAO,CAAC,0BAA0B,EAAE,cAAc;;;;UAI9C,EAAE,cAAc;;;;;0BAKA,EAAE,cAAc;;iBAEzB,EAAE,cAAc;;;;;;;;;;;;;;;;;YAiBrB,EAAE,cAAc;;;IAGxB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;+BAGiB,EAAE,cAAc;;WAEpC,EAAE,cAAc;;;;;;;;;iDASsB,EAAE,cAAc;;;;;;;;;;wBAUzC,EAAE,cAAc;;;;;;;;;;;;;;;;;IAiBpC,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;+BAGiB,EAAE,cAAc;;WAEpC,EAAE,cAAc;;;;;;;;;;qDAU0B,EAAE,cAAc;;;;;;;;;;wBAU7C,EAAE,cAAc;;;;;;;;;;;;;;;;;IAiBpC,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;+BAIiB,EAAE,cAAc;;UAErC,EAAE,cAAc;;OAEnB,EAAE,cAAc,4BAA4B,EAAE,cAAc;;;WAGxD,EAAE,cAAc,wBAAwB,EAAE,cAAc;;;WAGxD,EAAE,cAAc;;;;;;;;;mBASR,EAAE,cAAc;;;;;;;;;;;;;;;;;;sCAkBG,EAAE,cAAc;;;;;0BAK5B,EAAE,cAAc;;;;;;;;;;;;;;;WAe/B,EAAE,cAAc;;YAEf,EAAE,cAAc;;;OAGrB,EAAE,cAAc;;;;;;;;;;;;;;;;;IAiBnB,CAAC;QACD,KAAK;YACH,OAAO,CAAC,2BAA2B,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA8C1C,EAAE,cAAc;;;;;;;;;;IAU3B,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;yBAEW,EAAE,cAAc;;;+BAGV,EAAE,cAAc;;;;;;;;;yDASU,EAAE,cAAc;;;;;;;;;;;;;QAajE,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;IAsBpB,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;oDAoBsC,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA6BrC,EAAE,cAAc;;;;;;;;;;;;;;;;;;IAkB3C,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;;;QAMN,EAAE,cAAc;;gCAEQ,EAAE,cAAc;;;;;;;eAOjC,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAoCP,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;6BA0BX,EAAE,cAAc;;;;;iCAKZ,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBA4BxB,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiDrC,CAAC;QACD,KAAK;YACH,OAAO,CAAC;;;;4BAIc,EAAE,cAAc;UAClC,EAAE,cAAc;sBACJ,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;uBAoBf,EAAE,cAAc;;;;;;;;;qBASlB,EAAE,cAAc;UAC3B,EAAE,cAAc;;;mBAGP,EAAE,cAAc;;;;;;;;;;;;;oBAaf,EAAE,cAAc;;;;cAItB,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAiCF,EAAE,cAAc;;;;;;;;;iCASX,EAAE,cAAc;;;;;;;;;IAS7C,CAAC;QACD;YACE,mDAAmD;YACnD,OAAO,oBAAoB,eAAe;IAC9C;AACF;AAEA,SAAS,wBAAwB,IAAY,EAAE,UAAsB;IACnE,0BAA0B;IAC1B,IAAI,WAAW,KAAK,OAAO,CAAC,kBAAkB;IAC9C,iCAAiC;IACjC,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW;QAChC,WAAW,MAAM;IACnB;IACA,2BAA2B;IAC3B,MAAM,mBAAmB;QACvB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,IAAI,iBAAiB,QAAQ,CAAC,SAAS,WAAW,KAAK;QACrD,WAAW,MAAM;IACnB;IAEA,OAAQ;QACN,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACH,yCAAyC;YACzC,OAAO,SAAS,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,IAAM,EAAE,WAAW;QAEnE,KAAK;QACL,KAAK;YACH,wCAAwC;YACxC,OACE,SAAS,MAAM,CAAC,GAAG,WAAW,KAC9B,SAAS,KAAK,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,GAAG,IAAI,IAAM,EAAE,WAAW;QAGrE,KAAK;YACH,wCAAwC;YACxC,OAAO,SAAS,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,IAAM,EAAE,WAAW;QAEnE,KAAK;YACH,+CAA+C;YAC/C,OAAO,SAAS,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,IAAM,EAAE,WAAW;QAEnE,KAAK;YACH,iDAAiD;YACjD,OAAO,SAAS,WAAW,GAAG,OAAO,CAAC,cAAc;QAEtD;YACE,wDAAwD;YACxD,OAAO,SAAS,MAAM,CAAC,GAAG,WAAW,KAAK,SAAS,KAAK,CAAC;IAC7D;AACF","debugId":null}},
    {"offset": {"line": 3339, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/components/uploadbutton.tsx"],"sourcesContent":["import React from 'react';\n\ninterface UploadButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  label?: string;\n}\n\nconst UploadButton: React.FC<UploadButtonProps> = ({ label = 'Convert to GLB File', ...props }) => {\n  return (\n    <button\n      type=\"button\"\n      className=\"\n        inline-flex items-center justify-center\n        px-5 py-3\n        font-medium text-sm text-gray-100\n        border border-white/20\n        rounded-xl\n        hover:bg-gray-700 hover:border-gray-600\n        focus:outline-none\n        transition\n        \"\n      {...props}\n    >\n      {label}\n    </button>\n  );\n};\n\nexport default UploadButton;\n"],"names":[],"mappings":";;;;;AAMA,MAAM,eAA4C,CAAC,EAAE,QAAQ,qBAAqB,EAAE,GAAG,OAAO;IAC5F,qBACE,8OAAC;QACC,MAAK;QACL,WAAU;QAUT,GAAG,KAAK;kBAER;;;;;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 3361, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/types/constant.ts"],"sourcesContent":["export const LANGUAGES = [\n  {\n    id: \"typescript\",\n    name: \"TypeScript\",\n    extension: \"tsx\",\n    geometryExtension: \"ts\",\n    group: \"Web\",\n  },\n  {\n    id: \"javascript\",\n    name: \"JavaScript\",\n    extension: \"jsx\",\n    geometryExtension: \"js\",\n    group: \"Web\",\n  },\n  {\n    id: \"python\",\n    name: \"Python\",\n    extension: \"py\",\n    geometryExtension: \"py\",\n    group: \"General\",\n  },\n  {\n    id: \"java\",\n    name: \"Java\",\n    extension: \"java\",\n    geometryExtension: \"java\",\n    group: \"General\",\n  },\n  {\n    id: \"csharp\",\n    name: \"C#\",\n    extension: \"cs\",\n    geometryExtension: \"cs\",\n    group: \"General\",\n  },\n  {\n    id: \"cpp\",\n    name: \"C++\",\n    extension: \"cpp\",\n    geometryExtension: \"h\",\n    group: \"Systems\",\n  },\n  {\n    id: \"go\",\n    name: \"Go\",\n    extension: \"go\",\n    geometryExtension: \"go\",\n    group: \"Systems\",\n  },\n  {\n    id: \"rust\",\n    name: \"Rust\",\n    extension: \"rs\",\n    geometryExtension: \"rs\",\n    group: \"Systems\",\n  },\n  {\n    id: \"swift\",\n    name: \"Swift\",\n    extension: \"swift\",\n    geometryExtension: \"swift\",\n    group: \"Mobile\",\n  },\n  {\n    id: \"kotlin\",\n    name: \"Kotlin\",\n    extension: \"kt\",\n    geometryExtension: \"kt\",\n    group: \"Mobile\",\n  },\n  {\n    id: \"ruby\",\n    name: \"Ruby\",\n    extension: \"rb\",\n    geometryExtension: \"rb\",\n    group: \"Web\",\n  },\n  {\n    id: \"php\",\n    name: \"PHP\",\n    extension: \"php\",\n    geometryExtension: \"php\",\n    group: \"Web\",\n  },\n  {\n    id: \"scala\",\n    name: \"Scala\",\n    extension: \"scala\",\n    geometryExtension: \"scala\",\n    group: \"General\",\n  },\n  {\n    id: \"dart\",\n    name: \"Dart\",\n    extension: \"dart\",\n    geometryExtension: \"dart\",\n    group: \"Mobile\",\n  },\n  {\n    id: \"r\",\n    name: \"R\",\n    extension: \"R\",\n    geometryExtension: \"R\",\n    group: \"Data Science\",\n  },\n] as const;\n\n\nexport const LANGUAGE_SETUP = {\n  typescript: {\n    packageManager: \"npm\",\n    dependencies: [\n      \"three\",\n      \"@react-three/fiber\",\n      \"@react-three/drei\",\n      \"react\",\n      \"react-dom\",\n      \"@types/three\",\n    ],\n    devDependencies: [\"typescript\", \"@types/react\", \"@types/react-dom\"],\n    installCommand:\n      \"npm install three @react-three/fiber @react-three/drei react react-dom @types/three\",\n    devInstallCommand:\n      \"npm install -D typescript @types/react @types/react-dom\",\n    setupSteps: [\n      \"Create a new Next.js project with TypeScript\",\n      \"Install the required dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Import and use the component in your pages\",\n    ],\n    importExample: `import ${\"{componentName}\"} from '@/components/${\"{componentName}\"}';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nexport default function ModelPage() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas camera={{ '{' } position: [0, 0, 5], fov: 50 {'}'} >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${\"{componentName}\"} />\n        <OrbitControls />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`,\n    customizationExample: `// Access individual parts\nimport { MeshName } from '@/components/${\"{componentName}\"}/meshes/MeshName';\nimport { MeshNameGeometry } from '@/components/${\"{componentName}\"}/geometries/MeshNameGeometry';\nimport MaterialName from '@/components/${\"{componentName}\"}/materials/MaterialName';\nfunction CustomModel() {\n  return (\n    <group>\n      <mesh geometry={MeshNameGeometry} material={MaterialName()} />\n    </group>\n  );\n}`,\n  },\n  javascript: {\n    packageManager: \"npm\",\n    dependencies: [\n      \"three\",\n      \"@react-three/fiber\",\n      \"@react-three/drei\",\n      \"react\",\n      \"react-dom\",\n    ],\n    devDependencies: [],\n    installCommand:\n      \"npm install three @react-three/fiber @react-three/drei react react-dom\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new React project\",\n      \"Install the required dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Import and use the component in your pages\",\n    ],\n    importExample: `import ${\"{componentName}\"} from './components/${\"{componentName}\"}';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nexport default function ModelPage() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${\"{componentName}\"} />\n        <OrbitControls />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`,\n    customizationExample: `// Access individual parts\nimport { MeshName } from './components/${\"{componentName}\"}/meshes/MeshName';\nimport { MeshNameGeometry } from './components/${\"{componentName}\"}/geometries/MeshNameGeometry';\nimport MaterialName from './components/${\"{componentName}\"}/materials/MaterialName';\nfunction CustomModel() {\n  return (\n    <group>\n      <mesh geometry={MeshNameGeometry} material={MaterialName()} />\n    </group>\n  );\n}`,\n  },\n  python: {\n    packageManager: \"pip\",\n    dependencies: [\"moderngl\", \"pyglet\", \"numpy\", \"pyrr\"],\n    devDependencies: [],\n    installCommand: \"pip install moderngl pyglet numpy pyrr\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Python project\",\n      \"Install the required dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `from ${\"{componentName}\"} import ${\"{componentName}\"}\nimport pyglet\nimport moderngl\nfrom pyrr import Matrix44\nclass ModelApp:\n    def __init__(self):\n        self.window = pyglet.window.Window(800, 600, caption='${\"{componentName}\"} Viewer')\n        self.ctx = moderngl.create_context()\n        self.scene = ${\"{componentName}\"}(self.ctx)\n    def run(self):\n        pyglet.app.run()\nif __name__ == '__main__':\n    app = ModelApp()\n    app.run()`,\n    customizationExample: `# Access individual parts\nfrom meshes.MeshName import MeshName\nfrom geometries.MeshNameGeometry import MeshNameGeometry\nfrom materials.MaterialName import MaterialName\nclass CustomModel:\n    def __init__(self, ctx):\n        self.geometry = MeshNameGeometry()\n        self.material = MaterialName(ctx)\n        self.mesh = MeshName(ctx, self.material)`,\n  },\n  java: {\n    packageManager: \"maven/gradle\",\n    dependencies: [\n      \"org.lwjgl:lwjgl:3.3.3\",\n      \"org.lwjgl:lwjgl-opengl:3.3.3\",\n      \"org.lwjgl:lwjgl-glfw:3.3.3\",\n    ],\n    devDependencies: [],\n    installCommand: `// Maven\n<dependency>\n    <groupId>org.lwjgl</groupId>\n    <artifactId>lwjgl</artifactId>\n    <version>3.3.3</version>\n</dependency>\n// Gradle\nimplementation 'org.lwjgl:lwjgl:3.3.3'\nimplementation 'org.lwjgl:lwjgl-opengl:3.3.3'`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Java project with Maven or Gradle\",\n      \"Add LWJGL dependencies to your build file\",\n      \"Extract the downloaded component files to your src folder\",\n      \"Run the example application\",\n    ],\n    importExample: `import ${\"{componentName}\"};\npublic class ModelApp {\n    public static void main(String[] args) {\n        // Initialize LWJGL and OpenGL context\n        // Create and render the model\n        ${\"{componentName}\"} model = new ${\"{componentName}\"}();\n        model.render();\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName;\nimport geometries.MeshNameGeometry;\nimport materials.MaterialName;\npublic class CustomModel {\n    private MeshNameGeometry geometry;\n    private MaterialName material;\n    public CustomModel() {\n        this.geometry = new MeshNameGeometry();\n        this.material = new MaterialName();\n    }\n}`,\n  },\n  csharp: {\n    packageManager: \"NuGet\",\n    dependencies: [\"OpenTK\", \"OpenTK.Graphics\", \"OpenTK.Mathematics\"],\n    devDependencies: [],\n    installCommand: \"dotnet add package OpenTK --version 4.8.2\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new .NET project\",\n      \"Install OpenTK via NuGet\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `using ${\"{componentName}\"};\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Windowing.Desktop;\nclass Program\n{\n    static void Main()\n    {\n        var model = new ${\"{componentName}\"}();\n        model.Render();\n    }\n}`,\n    customizationExample: `// Access individual parts\nusing Meshes;\nusing Geometries;\nusing Materials;\npublic class CustomModel\n{\n    private MeshNameGeometry geometry;\n    private MaterialName material;\n    public CustomModel()\n    {\n        geometry = new MeshNameGeometry();\n        material = new MaterialName();\n    }\n}`,\n  },\n  cpp: {\n    packageManager: \"vcpkg/conan\",\n    dependencies: [\"glew\", \"glfw3\", \"glm\"],\n    devDependencies: [],\n    installCommand: `// vcpkg\nvcpkg install glew glfw3 glm\n// Or with CMake\nfind_package(glfw3 REQUIRED)\nfind_package(GLEW REQUIRED)\nfind_package(glm REQUIRED)`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new C++ project with CMake\",\n      \"Install OpenGL dependencies (GLEW, GLFW, GLM)\",\n      \"Extract the downloaded component files to your project\",\n      \"Compile and run the example application\",\n    ],\n    importExample: `#include \"${\"{componentName}\"}.h\"\n#include <GL/glew.h>\n#include <GLFW/glfw3.h>\nint main() {\n    // Initialize GLFW and OpenGL\n    glfwInit();\n    GLFWwindow* window = glfwCreateWindow(800, 600, \"${\"{componentName}\"} Viewer\", NULL, NULL);\n    glfwMakeContextCurrent(window);\n    glewInit();\n    ${\"{componentName}\"} model;\n    while (!glfwWindowShouldClose(window)) {\n        model.render();\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n    return 0;\n}`,\n    customizationExample: `// Access individual parts\n#include \"meshes/MeshName.h\"\n#include \"geometries/MeshNameGeometry.h\"\n#include \"materials/MaterialName.h\"\nclass CustomModel {\nprivate:\n    MeshNameGeometry geometry;\n    MaterialName material;\npublic:\n    CustomModel() : geometry(), material() {}\n    void render() { /* custom rendering */ }\n};`,\n  },\n  go: {\n    packageManager: \"go mod\",\n    dependencies: [\n      \"github.com/go-gl/gl/v4.1-core/gl\",\n      \"github.com/go-gl/glfw/v3.3/glfw\",\n      \"github.com/go-gl/mathgl/mgl32\",\n    ],\n    devDependencies: [],\n    installCommand: `go mod init your-project\ngo get github.com/go-gl/gl/v4.1-core/gl\ngo get github.com/go-gl/glfw/v3.3/glfw\ngo get github.com/go-gl/mathgl/mgl32`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Go module\",\n      \"Install OpenGL dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `package main\nimport (\n    \"./${\"{componentName}\"}\"\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"github.com/go-gl/glfw/v3.3/glfw\"\n)\nfunc main() {\n    // Initialize GLFW and OpenGL\n    glfw.Init()\n    defer glfw.Terminate()\n    window, _ := glfw.CreateWindow(800, 600, \"${\"{componentName}\"} Viewer\", nil, nil)\n    window.MakeContextCurrent()\n    gl.Init()\n    model := ${\"{componentName}\"}.New${\"{componentName}\"}()\n    for !window.ShouldClose() {\n        model.Render()\n        window.SwapBuffers()\n        glfw.PollEvents()\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport (\n    \"./meshes\"\n    \"./geometries\"\n    \"./materials\"\n)\ntype CustomModel struct {\n    geometry *geometries.MeshNameGeometry\n    material *materials.MaterialName\n}\nfunc NewCustomModel() *CustomModel {\n    return &CustomModel{\n        geometry: geometries.NewMeshNameGeometry(),\n        material: materials.NewMaterialName(),\n    }\n}`,\n  },\n  rust: {\n    packageManager: \"cargo\",\n    dependencies: [\"wgpu\", \"winit\", \"bytemuck\", \"glam\"],\n    devDependencies: [],\n    installCommand: `# Add to Cargo.toml\n[dependencies]\nwgpu = \"0.18\"\nwinit = \"0.28\"\nbytemuck = \"1.14\"\nglam = \"0.24\"`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Rust project with Cargo\",\n      \"Add wgpu dependencies to Cargo.toml\",\n      \"Extract the downloaded component files to your src folder\",\n      \"Run the example application\",\n    ],\n    importExample: `use ${\"{componentName}\"}::${\"{componentName}\"};\nuse wgpu::Device;\nuse winit::event_loop::EventLoop;\nfn main() {\n    let event_loop = EventLoop::new();\n    // Initialize wgpu and create device\n    let device = /* initialize device */;\n    let model = ${\"{componentName}\"}::new(&device);\n    event_loop.run(move |event, _, control_flow| {\n        // Render model\n        model.render(&mut render_pass);\n    });\n}`,\n    customizationExample: `// Access individual parts\nuse meshes::MeshName;\nuse geometries::MeshNameGeometry;\nuse materials::MaterialName;\nstruct CustomModel {\n    geometry: MeshNameGeometry,\n    material: MaterialName,\n}\nimpl CustomModel {\n    fn new(device: &Device) -> Self {\n        Self {\n            geometry: MeshNameGeometry::new(device),\n            material: MaterialName::new(device),\n        }\n    }\n}`,\n  },\n  swift: {\n    packageManager: \"Swift Package Manager\",\n    dependencies: [\"Metal\", \"MetalKit\", \"simd\"],\n    devDependencies: [],\n    installCommand: `// Add to Package.swift\ndependencies: [\n    .package(url: \"https://github.com/apple/swift-numerics\", from: \"1.0.0\")\n]`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new iOS/macOS project\",\n      \"Import Metal and MetalKit frameworks\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `import ${\"{componentName}\"}\nimport Metal\nimport MetalKit\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        guard let device = MTLCreateSystemDefaultDevice() else { return }\n        let model = ${\"{componentName}\"}(device: device)\n        // Setup Metal rendering\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport Meshes\nimport Geometries\nimport Materials\nclass CustomModel {\n    private let geometry: MeshNameGeometry\n    private let material: MaterialName\n    init(device: MTLDevice) {\n        geometry = MeshNameGeometry(device: device)\n        material = MaterialName(device: device)\n    }\n}`,\n  },\n  kotlin: {\n    packageManager: \"Gradle\",\n    dependencies: [\"org.lwjgl:lwjgl:3.3.3\", \"org.lwjgl:lwjgl-opengl:3.3.3\"],\n    devDependencies: [],\n    installCommand: `// build.gradle.kts\ndependencies {\n    implementation(\"org.lwjgl:lwjgl:3.3.3\")\n    implementation(\"org.lwjgl:lwjgl-opengl:3.3.3\")\n}`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Kotlin project with Gradle\",\n      \"Add LWJGL dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `import ${\"{componentName}\"}\nimport org.lwjgl.opengl.GL\nfun main() {\n    // Initialize LWJGL and OpenGL\n    val model = ${\"{componentName}\"}()\n    // Render loop\n    model.render()\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName\nimport geometries.MeshNameGeometry\nimport materials.MaterialName\nclass CustomModel {\n    private val geometry = MeshNameGeometry()\n    private val material = MaterialName()\n    fun render() {\n        // Custom rendering logic\n    }\n}`,\n  },\n  ruby: {\n    packageManager: \"gem\",\n    dependencies: [\"opengl\", \"glfw\", \"matrix\"],\n    devDependencies: [],\n    installCommand: \"gem install opengl glfw matrix\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Install Ruby and required gems\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `require './${\"{componentName}\"}'\nrequire 'opengl'\nrequire 'glfw'\nclass ModelApp\n  def initialize\n    @model = ${\"{componentName}\"}::${\"{componentName}\"}.new\n  end\n  def run\n    # Initialize OpenGL and render\n    @model.render\n  end\nend\napp = ModelApp.new\napp.run`,\n    customizationExample: `# Access individual parts\nrequire './meshes/mesh_name'\nrequire './geometries/mesh_name_geometry'\nrequire './materials/material_name'\nclass CustomModel\n  def initialize\n    @geometry = MeshNameGeometry.new\n    @material = MaterialName.new\n  end\nend`,\n  },\n  php: {\n    packageManager: \"composer\",\n    dependencies: [\"php-opengl/opengl\", \"php-gl/math\"],\n    devDependencies: [],\n    installCommand: \"composer require php-opengl/opengl php-gl/math\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Install PHP and Composer\",\n      \"Install OpenGL PHP extensions\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `<?php\nrequire_once './${\"{componentName}\"}.php';\nuse OpenGL\\\\GL;\nclass ModelApp {\n    private $model;\n    public function __construct() {\n        $this->model = new ${\"{componentName}\"}();\n    }\n    public function run() {\n        $this->model->render();\n    }\n}\n$app = new ModelApp();\n$app->run();`,\n    customizationExample: `<?php\n// Access individual parts\nrequire_once './meshes/MeshName.php';\nrequire_once './geometries/MeshNameGeometry.php';\nrequire_once './materials/MaterialName.php';\nclass CustomModel {\n    private $geometry;\n    private $material;\n    public function __construct() {\n        $this->geometry = new MeshNameGeometry();\n        $this->material = new MaterialName();\n    }\n}`,\n  },\n  scala: {\n    packageManager: \"sbt\",\n    dependencies: [\"org.lwjgl:lwjgl:3.3.3\", \"org.lwjgl:lwjgl-opengl:3.3.3\"],\n    devDependencies: [],\n    installCommand: `// build.sbt\nlibraryDependencies ++= Seq(\n  \"org.lwjgl\" % \"lwjgl\" % \"3.3.3\",\n  \"org.lwjgl\" % \"lwjgl-opengl\" % \"3.3.3\"\n)`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Scala project with sbt\",\n      \"Add LWJGL dependencies to build.sbt\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `import ${\"{componentName}\"}._\nimport org.lwjgl.opengl.GL\nobject ModelApp extends App {\n  // Initialize LWJGL and OpenGL\n  val model = new ${\"{componentName}\"}()\n  // Render loop\n  model.render()\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName\nimport geometries.MeshNameGeometry\nimport materials.MaterialName\nclass CustomModel {\n  private val geometry = new MeshNameGeometry()\n  private val material = new MaterialName()\n  def render(): Unit = {\n    // Custom rendering logic\n  }\n}`,\n  },\n  dart: {\n    packageManager: \"pub\",\n    dependencies: [\"flutter\", \"vector_math\", \"flutter_gl\"],\n    devDependencies: [],\n    installCommand: `# pubspec.yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  vector_math: ^2.1.4\n  flutter_gl: ^0.0.1`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Flutter project\",\n      \"Add dependencies to pubspec.yaml\",\n      \"Extract the downloaded component files to your lib folder\",\n      \"Run the example application\",\n    ],\n    importExample: `import 'package:flutter/material.dart';\nimport './${\"{componentName}\"}.dart';\nclass ModelPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ${\"{componentName}\"}(),\n    );\n  }\n}`,\n    customizationExample: `// Access individual parts\nimport './meshes/mesh_name.dart';\nimport './geometries/mesh_name_geometry.dart';\nimport './materials/material_name.dart';\nclass CustomModel {\n  final MeshNameGeometry geometry;\n  final MaterialName material;\n  CustomModel() : \n    geometry = MeshNameGeometry(),\n    material = MaterialName();\n}`,\n  },\n  r: {\n    packageManager: \"CRAN\",\n    dependencies: [\"rgl\", \"geometry\", \"matrix\"],\n    devDependencies: [],\n    installCommand: 'install.packages(c(\"rgl\", \"geometry\", \"matrix\"))',\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Install R and required packages\",\n      \"Extract the downloaded component files to your project\",\n      \"Source the example script\",\n    ],\n    importExample: `library(rgl)\nsource(\"./${\"{componentName}\"}.R\")\n# Create and display the model\nmodel <- ${\"{componentName}\"}$new()\nmodel$render()`,\n    customizationExample: `# Access individual parts\nsource(\"./meshes/MeshName.R\")\nsource(\"./geometries/MeshNameGeometry.R\")\nsource(\"./materials/MaterialName.R\")\nCustomModel <- setRefClass(\"CustomModel\",\n  fields = list(\n    geometry = \"MeshNameGeometry\",\n    material = \"MaterialName\"\n  ),\n  methods = list(\n    initialize = function() {\n      geometry <<- MeshNameGeometry$new()\n      material <<- MaterialName$new()\n    }\n  )\n)`,\n  },\n};\nexport type LanguageId = (typeof LANGUAGES)[number][\"id\"];\n\n"],"names":[],"mappings":";;;;AAAO,MAAM,YAAY;IACvB;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;CACD;AAGM,MAAM,iBAAiB;IAC5B,YAAY;QACV,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;YACA;YACA;YACA;SACD;QACD,iBAAiB;YAAC;YAAc;YAAgB;SAAmB;QACnE,gBACE;QACF,mBACE;QACF,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAe,CAAC,OAAO,EAAE,kBAAkB,oBAAoB,EAAE,kBAAkB;;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","debugId":null}},
    {"offset": {"line": 4147, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/components/code-editor.tsx"],"sourcesContent":["import { Copy } from \"lucide-react\";\nimport { LanguageId, LANGUAGES } from \"../types/constant\";\n\nexport default function CodeEditor({\n  code,\n  languageId,\n}: {\n  code: string;\n  languageId: LanguageId;\n}) {\n\nconst copyToClipboard = (text: string) => {\n  navigator.clipboard.writeText(text).then(() => {\n    console.log(\"Copied to clipboard\");\n  });\n};\n\n  const language = LANGUAGES.find((lang) => lang.id === languageId);\n  const lines = code.split(\"\\n\");\n  const getSyntaxClass = (line: string): string => {\n    if (line.trim().startsWith(\"//\") || line.trim().startsWith(\"#\")) {\n      return \"text-[#6A9955]\"; // Comments\n    }\n    if (\n      line.includes(\"import\") ||\n      line.includes(\"from\") ||\n      line.includes(\"require\")\n    ) {\n      return \"text-[#C586C0]\"; // Imports\n    }\n    if (\n      line.includes(\"function\") ||\n      line.includes(\"def\") ||\n      line.includes(\"class\")\n    ) {\n      return \"text-[#569CD6]\"; // Keywords\n    }\n    if (\n      line.includes(\"const\") ||\n      line.includes(\"let\") ||\n      line.includes(\"var\") ||\n      line.includes(\"final\") ||\n      line.includes(\"static\") ||\n      line.includes(\"public\")\n    ) {\n      return \"text-[#9CDCFE]\"; // Variables\n    }\n    if (\n      line.includes(\"{\") ||\n      line.includes(\"}\") ||\n      line.includes(\"[\") ||\n      line.includes(\"]\") ||\n      line.includes(\"(\") ||\n      line.includes(\")\")\n    ) {\n      return \"text-[#D4D4D4]\"; // Brackets\n    }\n    if (\n      line.includes(\"=\") ||\n      line.includes(\"+\") ||\n      line.includes(\"-\") ||\n      line.includes(\"*\") ||\n      line.includes(\"/\") ||\n      line.includes(\"%\")\n    ) {\n      return \"text-[#D4D4D4]\"; // Operators\n    }\n    if (line.includes('\"') || line.includes(\"'\") || line.includes(\"`\")) {\n      return \"text-[#CE9178]\"; // Strings\n    }\n    if (!isNaN(Number(line.trim())) || line.trim().match(/0x[0-9A-Fa-f]+/)) {\n      return \"text-[#B5CEA8]\"; // Numbers\n    }\n    return \"text-[#D4D4D4]\"; // Default\n  };\n\n  return (\n    <div className=\"bg-[#1E1E1E] rounded-lg overflow-hidden font-mono text-sm h-full flex flex-col\">\n      <div className=\"bg-[#252526] px-4 py-2 flex items-center justify-between border-b border-[#333333]\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-full bg-[#FF5F56]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#FFBD2E]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#27C93F]\"></div>\n        </div>\n        <div className=\"text-[#CCCCCC] text-xs flex items-center gap-2\">\n          <span>{language?.name}</span>\n          <span className=\"text-[#858585]\">●</span>\n          <span className=\"text-[#858585]\">{lines.length} lines</span>\n          <button\n            onClick={() => copyToClipboard(code)}\n            className=\"ml-2 p-1 hover:bg-[#404040] rounded\"\n            title=\"Copy to clipboard\"\n          >\n            <Copy className=\"w-3 h-3\" />\n          </button>\n        </div>\n      </div>\n      <div className=\"flex-1 overflow-auto p-4\">\n        <div className=\"flex\">\n          <div className=\"text-[#858585] w-8 select-none flex-shrink-0 pr-4 text-right\">\n            {lines.map((_, i) => (\n              <div key={i} className=\"select-none\">\n                {i + 1}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            {lines.map((line, i) => (\n              <div key={i} className={`whitespace-pre ${getSyntaxClass(line)}`}>\n                {line}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS,WAAW,EACjC,IAAI,EACJ,UAAU,EAIX;IAED,MAAM,kBAAkB,CAAC;QACvB,UAAU,SAAS,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC;YACvC,QAAQ,GAAG,CAAC;QACd;IACF;IAEE,MAAM,WAAW,wHAAA,CAAA,YAAS,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;IACtD,MAAM,QAAQ,KAAK,KAAK,CAAC;IACzB,MAAM,iBAAiB,CAAC;QACtB,IAAI,KAAK,IAAI,GAAG,UAAU,CAAC,SAAS,KAAK,IAAI,GAAG,UAAU,CAAC,MAAM;YAC/D,OAAO,kBAAkB,WAAW;QACtC;QACA,IACE,KAAK,QAAQ,CAAC,aACd,KAAK,QAAQ,CAAC,WACd,KAAK,QAAQ,CAAC,YACd;YACA,OAAO,kBAAkB,UAAU;QACrC;QACA,IACE,KAAK,QAAQ,CAAC,eACd,KAAK,QAAQ,CAAC,UACd,KAAK,QAAQ,CAAC,UACd;YACA,OAAO,kBAAkB,WAAW;QACtC;QACA,IACE,KAAK,QAAQ,CAAC,YACd,KAAK,QAAQ,CAAC,UACd,KAAK,QAAQ,CAAC,UACd,KAAK,QAAQ,CAAC,YACd,KAAK,QAAQ,CAAC,aACd,KAAK,QAAQ,CAAC,WACd;YACA,OAAO,kBAAkB,YAAY;QACvC;QACA,IACE,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,MACd;YACA,OAAO,kBAAkB,WAAW;QACtC;QACA,IACE,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,QACd,KAAK,QAAQ,CAAC,MACd;YACA,OAAO,kBAAkB,YAAY;QACvC;QACA,IAAI,KAAK,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,MAAM;YAClE,OAAO,kBAAkB,UAAU;QACrC;QACA,IAAI,CAAC,MAAM,OAAO,KAAK,IAAI,QAAQ,KAAK,IAAI,GAAG,KAAK,CAAC,mBAAmB;YACtE,OAAO,kBAAkB,UAAU;QACrC;QACA,OAAO,kBAAkB,UAAU;IACrC;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;;;;;0CACf,8OAAC;gCAAI,WAAU;;;;;;0CACf,8OAAC;gCAAI,WAAU;;;;;;;;;;;;kCAEjB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAM,UAAU;;;;;;0CACjB,8OAAC;gCAAK,WAAU;0CAAiB;;;;;;0CACjC,8OAAC;gCAAK,WAAU;;oCAAkB,MAAM,MAAM;oCAAC;;;;;;;0CAC/C,8OAAC;gCACC,SAAS,IAAM,gBAAgB;gCAC/B,WAAU;gCACV,OAAM;0CAEN,cAAA,8OAAC,kMAAA,CAAA,OAAI;oCAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;0BAItB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;sCACZ,MAAM,GAAG,CAAC,CAAC,GAAG,kBACb,8OAAC;oCAAY,WAAU;8CACpB,IAAI;mCADG;;;;;;;;;;sCAKd,8OAAC;4BAAI,WAAU;sCACZ,MAAM,GAAG,CAAC,CAAC,MAAM,kBAChB,8OAAC;oCAAY,WAAW,CAAC,eAAe,EAAE,eAAe,OAAO;8CAC7D;mCADO;;;;;;;;;;;;;;;;;;;;;;;;;;;AASxB","debugId":null}},
    {"offset": {"line": 4341, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/glb-convertor/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, Environment, Html } from \"@react-three/drei\";\nimport {\n  Download,\n  Upload,\n  Eye,\n  Code,\n  Loader2,\n  AlertCircle,\n  File,\n  FileText,\n  Folder,\n  Layout,\n  Languages,\n  Package,\n  Terminal,\n  Copy,\n  ChevronRight,\n  ChevronDown,\n  X,\n} from \"lucide-react\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport JSZip from \"jszip\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { saveAs } from \"file-saver\";\nimport { generateProjectStructure } from \"@/app/lib/glb-converter\";\nimport type {\n  MeshData,\n  MaterialData,\n  ProjectStructure,\n  GeometryData,\n} from \"@/app/types/glb-convertor\";\nimport UploadButton from \"../components/uploadbutton\";\nimport { LANGUAGES } from \"../types/constant\";\nimport CodeEditor from \"../components/code-editor\";\n\n// Language configuration for syntax highlighting and code generation\n\ntype LanguageId = (typeof LANGUAGES)[number][\"id\"];\n\n// VS Code-like editor component with syntax highlighting\n\n\n// Language selector component with grouping\nfunction LanguageSelector({\n  selectedLanguage,\n  onChange,\n}: {\n  selectedLanguage: LanguageId;\n  onChange: (language: LanguageId) => void;\n}) {\n  const groups = Array.from(new Set(LANGUAGES.map((lang) => lang.group)));\n  return (\n    <div className=\"relative\">\n      <div className=\"flex items-center gap-2\">\n        <Languages className=\"w-4 h-4 text-purple-400\" />\n        <select\n          value={selectedLanguage}\n          onChange={(e) => onChange(e.target.value as LanguageId)}\n          className=\"bg-[#252526] text-white px-3 py-1.5 rounded border border-[#3c3c3c] focus:border-purple-500 outline-none text-sm appearance-none pr-8 bg-[url('data:image/svg+xml;utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 24 24%22 fill=%22%239CA3AF%22><path d=%22M7 10l5 5 5-5z%22/></svg>')] bg-no-repeat bg-[right_0.5rem_center] bg-[length:1rem] cursor-pointer\"\n        >\n          {groups.map((group) => (\n            <optgroup key={group} label={group}>\n              {LANGUAGES.filter((lang) => lang.group === group).map((lang) => (\n                <option key={lang.id} value={lang.id}>\n                  {lang.name}\n                </option>\n              ))}\n            </optgroup>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n}\n\n// File tree component for VS Code sidebar\nfunction FileTree({\n  projectStructure,\n  selectedLanguage,\n  onSelectFile,\n  expandedFolders,\n  toggleFolder,\n  activeFile,\n}: {\n  projectStructure: ProjectStructure | null;\n  selectedLanguage: LanguageId;\n  onSelectFile: (path: string, content: string) => void;\n  expandedFolders: Record<string, boolean>;\n  toggleFolder: (folder: string) => void;\n  activeFile: string | null;\n}) {\n  if (!projectStructure) return null;\n\n  const lang = LANGUAGES.find((l) => l.id === selectedLanguage);\n  if (!lang) return null;\n\n  const getIcon = (fileName: string) => {\n    if (fileName.includes(\"Geometry\")) return \"text-cyan-400\";\n    if (fileName.includes(\"index\")) return \"text-green-400\";\n    if (fileName.includes(\"meshes\")) return \"text-cyan-400\";\n    if (fileName.includes(\"geometries\")) return \"text-cyan-400\";\n    if (fileName.includes(\"materials\")) return \"text-orange-400\";\n    if (fileName.includes(\"page\")) return \"text-purple-400\";\n    return \"text-white\";\n  };\n\n  return (\n    <div className=\"text-sm\">\n      <div\n        className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n        onClick={() => toggleFolder(\"components\")}\n      >\n        {expandedFolders.components ? (\n          <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n        ) : (\n          <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n        )}\n        <Folder className=\"w-4 h-4 mr-2 text-yellow-400\" />\n        <span className=\"text-[#C5C5C5]\">components</span>\n      </div>\n\n      {expandedFolders.components && (\n        <div className=\"pl-4\">\n          <div\n            className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n            onClick={() => toggleFolder(\"componentName\")}\n          >\n            {expandedFolders.componentName ? (\n              <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n            ) : (\n              <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n            )}\n            <Folder className=\"w-4 h-4 mr-2 text-blue-400\" />\n            <span className=\"text-[#C5C5C5]\">Model</span>\n          </div>\n\n          {expandedFolders.componentName && (\n            <div className=\"pl-4\">\n              <div\n                className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                  activeFile === \"index\" ? \"bg-[#2A2D2E]\" : \"\"\n                }`}\n                onClick={() =>\n                  onSelectFile(\"index\", projectStructure.indexContent)\n                }\n              >\n                <FileText className={`w-4 h-4 mr-2 ${getIcon(\"index\")}`} />\n                <span className=\"text-[#C5C5C5]\">index.{lang.extension}</span>\n              </div>\n\n              <div\n                className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n                onClick={() => toggleFolder(\"geometries\")}\n              >\n                {expandedFolders.geometries ? (\n                  <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n                ) : (\n                  <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n                )}\n                <Folder className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                <span className=\"text-[#C5C5C5]\">geometries</span>\n              </div>\n\n              {expandedFolders.geometries && (\n                <div className=\"pl-4\">\n                  {projectStructure.geometries?.map((geometry, i) => (\n                    <div\n                      key={i}\n                      className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                        activeFile === `geometry-${i}` ? \"bg-[#2A2D2E]\" : \"\"\n                      }`}\n                      onClick={() =>\n                        onSelectFile(`geometry-${i}`, geometry.content)\n                      }\n                    >\n                      <File\n                        className={`w-4 h-4 mr-2 ${getIcon(geometry.name)}`}\n                      />\n                      <span className=\"text-[#C5C5C5]\">\n                        {geometry.name}Geometry.{lang.geometryExtension}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              <div\n                className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n                onClick={() => toggleFolder(\"meshes\")}\n              >\n                {expandedFolders.meshes ? (\n                  <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n                ) : (\n                  <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n                )}\n                <Folder className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                <span className=\"text-[#C5C5C5]\">meshes</span>\n              </div>\n\n              {expandedFolders.meshes && (\n                <div className=\"pl-4\">\n                  {projectStructure.meshes.map((mesh, i) => (\n                    <div\n                      key={i}\n                      className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                        activeFile === `mesh-${i}` ? \"bg-[#2A2D2E]\" : \"\"\n                      }`}\n                      onClick={() => onSelectFile(`mesh-${i}`, mesh.content)}\n                    >\n                      <File className={`w-4 h-4 mr-2 ${getIcon(mesh.name)}`} />\n                      <span className=\"text-[#C5C5C5]\">\n                        {mesh.name}.{lang.extension}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              <div\n                className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n                onClick={() => toggleFolder(\"materials\")}\n              >\n                {expandedFolders.materials ? (\n                  <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n                ) : (\n                  <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n                )}\n                <Folder className=\"w-4 h-4 mr-2 text-orange-400\" />\n                <span className=\"text-[#C5C5C5]\">materials</span>\n              </div>\n\n              {expandedFolders.materials && (\n                <div className=\"pl-4\">\n                  {projectStructure.materials.map((material, i) => (\n                    <div\n                      key={i}\n                      className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                        activeFile === `material-${i}` ? \"bg-[#2A2D2E]\" : \"\"\n                      }`}\n                      onClick={() =>\n                        onSelectFile(`material-${i}`, material.content)\n                      }\n                    >\n                      <File\n                        className={`w-4 h-4 mr-2 ${getIcon(material.name)}`}\n                      />\n                      <span className=\"text-[#C5C5C5]\">\n                        {material.name}.{lang.extension}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      <div\n        className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n        onClick={() => toggleFolder(\"app\")}\n      >\n        {expandedFolders.app ? (\n          <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n        ) : (\n          <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n        )}\n        <Folder className=\"w-4 h-4 mr-2 text-purple-400\" />\n        <span className=\"text-[#C5C5C5]\">app</span>\n      </div>\n\n      {expandedFolders.app && (\n        <div className=\"pl-4\">\n          <div\n            className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n            onClick={() => toggleFolder(\"modelPage\")}\n          >\n            {expandedFolders.modelPage ? (\n              <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n            ) : (\n              <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />\n            )}\n            <Folder className=\"w-4 h-4 mr-2 text-blue-400\" />\n            <span className=\"text-[#C5C5C5]\">model-page</span>\n          </div>\n\n          {expandedFolders.modelPage && (\n            <div className=\"pl-4\">\n              <div\n                className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                  activeFile === \"examplePage\" ? \"bg-[#2A2D2E]\" : \"\"\n                }`}\n                onClick={() =>\n                  onSelectFile(\n                    \"examplePage\",\n                    projectStructure.examplePageContent\n                  )\n                }\n              >\n                <FileText className={`w-4 h-4 mr-2 ${getIcon(\"page\")}`} />\n                <span className=\"text-[#C5C5C5]\">page.{lang.extension}</span>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function GLBConverter() {\n  const [file, setFile] = useState<File | null>(null);\n  const [modelUrl, setModelUrl] = useState(\"\");\n  const [projectStructure, setProjectStructure] =\n    useState<ProjectStructure | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [activeTab, setActiveTab] = useState<\"upload\" | \"preview\" | \"code\">(\n    \"upload\"\n  );\n  const [gltfData, setGltfData] = useState<any>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  // Display options\n  const [displayMode, setDisplayMode] = useState<\n    \"original\" | \"wireframe\" | \"solid\" | \"normals\" | \"depth\" | \"points\"\n  >(\"original\");\n  const [autoRotate, setAutoRotate] = useState(true);\n  const [showGrid, setShowGrid] = useState(false);\n  const [showAxes, setShowAxes] = useState(false);\n  const [componentName, setComponentName] = useState(\"Model\");\n  const [selectedLanguage, setSelectedLanguage] =\n    useState<LanguageId>(\"typescript\");\n  const [expandedFolders, setExpandedFolders] = useState({\n    components: true,\n    componentName: true,\n    geometries: false,\n    meshes: true,\n    materials: false,\n    app: true,\n    modelPage: true,\n  });\n  const [activeFile, setActiveFile] = useState<string | null>(\"index\");\n  const [currentFileContent, setCurrentFileContent] = useState(\"\");\n\n  useEffect(() => {\n    if (projectStructure) {\n      setCurrentFileContent(projectStructure.indexContent);\n    }\n  }, [projectStructure]);\n\n  const toggleFolder = (folder: keyof typeof expandedFolders) => {\n    setExpandedFolders((prev) => ({\n      ...prev,\n      [folder]: !prev[folder],\n    }));\n  };\n\n  const handleFileSelect = (path: string, content: string) => {\n    setActiveFile(path);\n    setCurrentFileContent(content);\n  };\n\n  const handleFileUpload = async (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const uploadedFile = event.target.files?.[0];\n    if (uploadedFile && uploadedFile.name.endsWith(\".glb\")) {\n      setFile(uploadedFile);\n      setError(\"\");\n      setIsLoading(true);\n      setProgress(0);\n      try {\n        // Create object URL for preview\n        const url = URL.createObjectURL(uploadedFile);\n        setModelUrl(url);\n        // Load GLTF with progress tracking for large files\n        await loadGLTFWithProgress(url, uploadedFile);\n        // Generate component name from filename\n        const name = uploadedFile.name\n          .replace(\".glb\", \"\")\n          .replace(/[^a-zA-Z0-9]/g, \"\");\n        const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n        setComponentName(capitalizedName);\n        setActiveTab(\"preview\");\n      } catch (err) {\n        console.error(\"Error loading GLTF\", err);\n        setError(\n          \"Error processing GLB file. The file may be too large or corrupted.\"\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setError(\"Please upload a valid .glb file\");\n    }\n  };\n\n  const loadGLTFWithProgress = async (\n    url: string,\n    file: File\n  ): Promise<void> => {\n    setIsProcessing(true);\n    setProgress(0);\n    return new Promise<void>((resolve, reject) => {\n      try {\n        // Set up DRACO decoder for compressed models (common in large GLBs)\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath(\n          \"https://www.gstatic.com/draco/versioned/decoders/1.5.6/\"\n        );\n        // Track progress for large files\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", url, true);\n        xhr.responseType = \"arraybuffer\";\n        xhr.onload = function () {\n          if (xhr.status === 200) {\n            try {\n              // Process the GLB data\n              const loader = new GLTFLoader();\n              loader.setDRACOLoader(dracoLoader);\n              loader.parse(\n                xhr.response,\n                \"\",\n                (gltf: any) => {\n                  // Store GLTF data for transpilation\n                  setGltfData(gltf);\n                  // Generate project structure\n                  const structure = generateProjectStructure(\n                    gltf,\n                    componentName,\n                    displayMode,\n                    selectedLanguage\n                  );\n                  setProjectStructure(structure);\n                  setIsProcessing(false);\n                  resolve();\n                },\n                (error: any) => {\n                  console.error(\"Error parsing GLTF\", error);\n                  setIsProcessing(false);\n                  reject(error);\n                }\n              );\n            } catch (parseError) {\n              console.error(\"Error parsing GLTF data\", parseError);\n              setIsProcessing(false);\n              reject(parseError);\n            }\n          } else {\n            reject(new Error(`Failed to load file: ${xhr.statusText}`));\n          }\n        };\n        xhr.onprogress = function (event) {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            setProgress(percentComplete);\n          }\n        };\n        xhr.onerror = function () {\n          reject(new Error(\"Network error occurred while loading the file\"));\n        };\n        xhr.send();\n      } catch (err) {\n        setIsProcessing(false);\n        reject(err);\n      }\n    });\n  };\n\n  // Add this useEffect hook to regenerate code when language changes\n  useEffect(() => {\n    if (gltfData && componentName && activeTab === \"code\") {\n      setIsProcessing(true);\n      setProgress(0);\n      try {\n        console.log(\n          `Regenerating project structure for ${selectedLanguage}...`\n        );\n        // Generate project structure with current settings\n        const structure = generateProjectStructure(\n          gltfData,\n          componentName,\n          displayMode,\n          selectedLanguage\n        );\n        setProjectStructure(structure);\n        setProgress(100);\n        console.log(\"Project structure regenerated successfully\");\n      } catch (err) {\n        console.error(\"Error regenerating project structure\", err);\n        setError(\n          \"Failed to regenerate project structure for the selected language\"\n        );\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  }, [selectedLanguage, gltfData, componentName, displayMode, activeTab]);\n\n  const downloadZip = (includeExamplePage: boolean = false) => {\n    if (!projectStructure) return;\n    setIsProcessing(true);\n    try {\n      const zip = new JSZip();\n      const lang = LANGUAGES.find((l) => l.id === selectedLanguage);\n      if (!lang) return;\n      // Create folder structure\n      const componentFolder = zip.folder(`components/${componentName}`);\n      const meshesFolder = componentFolder?.folder(\"meshes\");\n      const geometriesFolder = componentFolder?.folder(\"geometries\");\n      const materialsFolder = componentFolder?.folder(\"materials\");\n      // Add index file\n      componentFolder?.file(\n        `index.${lang.extension}`,\n        projectStructure.indexContent\n      );\n      // Add geometry files\n      projectStructure.geometries?.forEach((geometry) => {\n        geometriesFolder?.file(\n          `${geometry.name}Geometry.${lang.geometryExtension}`,\n          geometry.content\n        );\n      });\n      // Add mesh files\n      projectStructure.meshes.forEach((mesh) => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n      // Add material files\n      projectStructure.materials.forEach((material) => {\n        materialsFolder?.file(\n          `${material.name}.${lang.extension}`,\n          material.content\n        );\n      });\n      // Add example page if requested\n      if (includeExamplePage) {\n        const appFolder = zip.folder(\"app\");\n        const modelPageFolder = appFolder?.folder(\n          `${componentName.toLowerCase()}-page`\n        );\n        modelPageFolder?.file(\n          `page.${lang.extension}`,\n          projectStructure.examplePageContent\n        );\n      }\n      // Generate and download zip\n      zip.generateAsync({ type: \"blob\" }).then((content) => {\n        const suffix = includeExamplePage ? \"-with-example\" : \"\";\n        saveAs(content, `${componentName}-${selectedLanguage}${suffix}.zip`);\n      });\n    } catch (err) {\n      console.error(\"Error generating ZIP\", err);\n      setError(\"Failed to generate ZIP file. The model might be too large.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadCurrentView = () => {\n    if (!gltfData) return;\n    setIsProcessing(true);\n    try {\n      // Generate project structure with current display mode\n      const structure = generateProjectStructure(\n        gltfData,\n        componentName,\n        displayMode,\n        selectedLanguage\n      );\n      const zip = new JSZip();\n      const lang = LANGUAGES.find((l) => l.id === selectedLanguage);\n      if (!lang) return;\n      // Create folder structure\n      const componentFolder = zip.folder(\n        `components/${componentName}-${displayMode}`\n      );\n      const meshesFolder = componentFolder?.folder(\"meshes\");\n      const geometriesFolder = componentFolder?.folder(\"geometries\");\n      const materialsFolder = componentFolder?.folder(\"materials\");\n      // Add index file\n      componentFolder?.file(`index.${lang.extension}`, structure.indexContent);\n      // Add geometry files\n      structure.geometries?.forEach((geometry) => {\n        geometriesFolder?.file(\n          `${geometry.name}Geometry.${lang.geometryExtension}`,\n          geometry.content\n        );\n      });\n      // Add mesh files\n      structure.meshes.forEach((mesh) => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n      // Add material files\n      structure.materials.forEach((material) => {\n        materialsFolder?.file(\n          `${material.name}.${lang.extension}`,\n          material.content\n        );\n      });\n      // Add example page\n      const appFolder = zip.folder(\"app\");\n      const modelPageFolder = appFolder?.folder(\n        `${componentName.toLowerCase()}-${displayMode}-page`\n      );\n      modelPageFolder?.file(\n        `page.${lang.extension}`,\n        structure.examplePageContent\n      );\n      // Generate and download zip\n      zip.generateAsync({ type: \"blob\" }).then((content) => {\n        saveAs(\n          content,\n          `${componentName}-${displayMode}-${selectedLanguage}.zip`\n        );\n      });\n    } catch (err) {\n      console.error(\"Error generating ZIP for current view\", err);\n      setError(\n        `Failed to generate ZIP for ${displayMode} view. The model might be too large.`\n      );\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadModel = () => {\n    if (!file) return;\n    const url = URL.createObjectURL(file);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#1E1E1E] text-slate-100\">\n      <div className=\"flex h-[calc(100vh-2rem)]\">\n        {/* Sidebar */}\n        <div className=\"w-64 bg-[#252526] border-r border-[#3c3c3c] flex flex-col\">\n          <div className=\"p-3 border-b border-[#3c3c3c]\">\n            <h2 className=\"text-sm font-medium text-[#CCCCCC] flex items-center\">\n              <Folder className=\"w-4 h-4 mr-2 text-yellow-400\" />\n              EXPLORER\n            </h2>\n          </div>\n\n          {activeTab === \"code\" && projectStructure ? (\n            <div className=\"flex-1 overflow-y-auto p-1\">\n              <FileTree\n                projectStructure={projectStructure}\n                selectedLanguage={selectedLanguage}\n                onSelectFile={handleFileSelect}\n                expandedFolders={expandedFolders}\n                toggleFolder={toggleFolder as (folder: string) => void}\n                activeFile={activeFile}\n              />\n            </div>\n          ) : (\n            <div className=\"flex-1 overflow-y-auto p-3\">\n              <div className=\"text-[#858585] text-sm\">\n                {activeTab === \"upload\" ? (\n                  <div className=\"space-y-2\">\n                    <p>Upload a GLB file to get started.</p>\n                    <p>Supported file: .glb</p>\n                    <p className=\"text-yellow-400\">\n                      {`If you have a different 3D model format (like .obj, .fbx, .stl), please convert it to <strong>.glb</strong> before uploading.`}\n                    </p>\n                    <UploadButton\n                      onClick={() =>\n                        window.open(\n                          \"https://imagetostl.com/convert/file/obj/to/glb\"\n                        )\n                      }\n                    />\n                  </div>\n                ) : activeTab === \"preview\" ? (\n                  <div className=\"space-y-2\">\n                    <p>Preview your 3D model with different display modes.</p>\n                    <p>Use the controls to rotate, zoom, and pan.</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <p>\n                      Select a file from the project structure to view its code.\n                    </p>\n                    <p>\n                      Use the language selector to switch between programming\n                      languages.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          <div className=\"p-3 border-t border-[#3c3c3c]\">\n            <div className=\"text-xs text-[#858585]\">\n              {activeTab === \"code\" && projectStructure ? (\n                <div className=\"flex items-center\">\n                  <Folder className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                  <span className=\"overflow-hidden whitespace-nowrap text-ellipsis\">\n                    {componentName}\n                  </span>\n                </div>\n              ) : (\n                <div className=\"text-[#858585]\">No project loaded</div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Navigation Tabs */}\n          <div className=\"bg-[#2D2D2D] border-b border-[#3c3c3c] h-10 flex items-center px-4\">\n            <div className=\"flex space-x-4\">\n              <button\n                onClick={() => setActiveTab(\"upload\")}\n                className={`text-sm flex items-center gap-1 px-2 py-1 rounded ${\n                  activeTab === \"upload\"\n                    ? \"bg-[#3C3C3C] text-[#FFFFFF]\"\n                    : \"text-[#B8B8B8] hover:bg-[#3C3C3C] hover:text-[#FFFFFF]\"\n                }`}\n              >\n                <Upload className=\"w-3 h-3\" />\n                Upload\n              </button>\n              <button\n                onClick={() => setActiveTab(\"preview\")}\n                disabled={!file}\n                className={`text-sm flex items-center gap-1 px-2 py-1 rounded ${\n                  activeTab === \"preview\" && file\n                    ? \"bg-[#3C3C3C] text-[#FFFFFF]\"\n                    : \"text-[#B8B8B8] hover:bg-[#3C3C3C] hover:text-[#FFFFFF] disabled:opacity-50\"\n                }`}\n              >\n                <Eye className=\"w-3 h-3\" />\n                Preview\n              </button>\n              <button\n                onClick={() => setActiveTab(\"code\")}\n                disabled={!projectStructure}\n                className={`text-sm flex items-center gap-1 px-2 py-1 rounded ${\n                  activeTab === \"code\" && projectStructure\n                    ? \"bg-[#3C3C3C] text-[#FFFFFF]\"\n                    : \"text-[#B8B8B8] hover:bg-[#3C3C3C] hover:text-[#FFFFFF] disabled:opacity-50\"\n                }`}\n              >\n                <Code className=\"w-3 h-3\" />\n                Code\n              </button>\n            </div>\n          </div>\n\n          {/* Content Area */}\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Error Display */}\n            {error && (\n              <div className=\"bg-[#6A0000] border border-[#FF5252] rounded p-3 mb-4 max-w-2xl mx-auto\">\n                <div className=\"flex items-center\">\n                  <AlertCircle className=\"w-4 h-4 text-[#FF5252] mr-2\" />\n                  <span className=\"text-[#FF5252] text-sm\">{error}</span>\n                </div>\n              </div>\n            )}\n\n            {/* Upload Tab */}\n            {activeTab === \"upload\" && (\n              <div className=\"max-w-2xl mx-auto mt-8\">\n                <div className=\"bg-[#252526] rounded p-8 border border-[#3c3c3c]\">\n                  <div className=\"text-center\">\n                    <div\n                      className={`border-2 border-dashed rounded p-12 transition-colors ${\n                        isDragging\n                          ? \"border-purple-500 bg-purple-500/10\"\n                          : \"border-[#3c3c3c] hover:border-purple-500\"\n                      }`}\n                      onDragOver={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setIsDragging(true);\n                      }}\n                      onDragLeave={() => setIsDragging(false)}\n                      onDrop={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setIsDragging(false);\n                        const droppedFile = e.dataTransfer.files?.[0];\n                        if (droppedFile && droppedFile.name.endsWith(\".glb\")) {\n                          const fakeEvent = {\n                            target: { files: [droppedFile] },\n                          } as unknown as React.ChangeEvent<HTMLInputElement>;\n                          handleFileUpload(fakeEvent);\n                        } else {\n                          setError(\"Please drop a valid .glb file\");\n                        }\n                      }}\n                    >\n                      <Upload className=\"w-12 h-12 text-[#858585] mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-[#CCCCCC] mb-2\">\n                        Upload your GLB model\n                      </h3>\n                      <p className=\"text-[#858585] mb-6\">\n                        Drop your .glb file here or click to browse\n                      </p>\n                      <input\n                        type=\"file\"\n                        accept=\".glb\"\n                        onChange={handleFileUpload}\n                        className=\"hidden\"\n                        id=\"file-upload\"\n                        disabled={isLoading}\n                      />\n                      <label\n                        htmlFor=\"file-upload\"\n                        className={`bg-[#0E639C] hover:bg-[#107FC9] text-white px-4 py-2 rounded cursor-pointer transition-colors inline-block ${\n                          isLoading ? \"opacity-50 cursor-not-allowed\" : \"\"\n                        }`}\n                      >\n                        {isLoading ? (\n                          <>\n                            <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n                            Processing...\n                          </>\n                        ) : (\n                          \"Choose File\"\n                        )}\n                      </label>\n                    </div>\n                  </div>\n                  {/* Progress Bar for Large Files */}\n                  {(isLoading || isProcessing) && (\n                    <div className=\"mt-6\">\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-[#CCCCCC] text-sm\">\n                          {isProcessing\n                            ? \"Processing model...\"\n                            : \"Loading file...\"}\n                        </span>\n                        <span className=\"text-[#CCCCCC] text-sm\">\n                          {Math.round(progress)}%\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-[#3c3c3c] rounded h-1.5\">\n                        <div\n                          className=\"bg-[#0E70C0] h-1.5 rounded transition-all duration-300\"\n                          style={{ width: `${progress}%` }}\n                        ></div>\n                      </div>\n                      <p className=\"text-[#858585] text-xs mt-2\">\n                        {progress < 100\n                          ? \"Loading large model. This may take a few moments...\"\n                          : \"Optimizing model data for transpilation...\"}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Preview Tab */}\n            {activeTab === \"preview\" && modelUrl && (\n              <div className=\"max-w-6xl mx-auto\">\n                <div className=\"bg-[#252526] rounded p-6 border border-[#3c3c3c]\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h3 className=\"text-lg font-medium text-[#CCCCCC]\">\n                      3D Model Preview\n                    </h3>\n                    <div className=\"flex items-center gap-4\">\n                      {/* Display Mode Controls */}\n                      <div className=\"flex items-center gap-2\">\n                        <label className=\"text-[#CCCCCC] text-sm\">\n                          Display Mode:\n                        </label>\n                        <select\n                          value={displayMode}\n                          onChange={(e) =>\n                            setDisplayMode(e.target.value as any)\n                          }\n                          className=\"bg-[#3C3C3C] text-[#CCCCCC] px-2 py-1 rounded border border-[#3c3c3c] focus:border-purple-500 outline-none text-sm\"\n                        >\n                          <option value=\"original\">Original</option>\n                          <option value=\"wireframe\">Wireframe</option>\n                          <option value=\"solid\">Solid Color</option>\n                          <option value=\"normals\">Normals</option>\n                          <option value=\"depth\">Depth</option>\n                          <option value=\"points\">Point Cloud</option>\n                        </select>\n                      </div>\n                      {/* Toggle Controls */}\n                      <div className=\"flex items-center gap-4\">\n                        <label className=\"flex items-center gap-2 text-[#CCCCCC] text-sm\">\n                          <input\n                            type=\"checkbox\"\n                            checked={autoRotate}\n                            onChange={(e) => setAutoRotate(e.target.checked)}\n                            className=\"rounded border-[#3c3c3c] bg-[#3C3C3C] text-[#0E70C0] focus:ring-[#0E70C0]\"\n                          />\n                          Auto Rotate\n                        </label>\n                        <label className=\"flex items-center gap-2 text-[#CCCCCC] text-sm\">\n                          <input\n                            type=\"checkbox\"\n                            checked={showGrid}\n                            onChange={(e) => setShowGrid(e.target.checked)}\n                            className=\"rounded border-[#3c3c3c] bg-[#3C3C3C] text-[#0E70C0] focus:ring-[#0E70C0]\"\n                          />\n                          Grid\n                        </label>\n                        <label className=\"flex items-center gap-2 text-[#CCCCCC] text-sm\">\n                          <input\n                            type=\"checkbox\"\n                            checked={showAxes}\n                            onChange={(e) => setShowAxes(e.target.checked)}\n                            className=\"rounded border-[#3c3c3c] bg-[#3C3C3C] text-[#0E70C0] focus:ring-[#0E70C0]\"\n                          />\n                          Axes\n                        </label>\n                      </div>\n                      <button\n                        onClick={downloadCurrentView}\n                        disabled={isProcessing}\n                        className={`bg-[#0E639C] hover:bg-[#107FC9] text-white px-3 py-1.5 rounded transition-colors flex items-center gap-2 ${\n                          isProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"\n                        }`}\n                      >\n                        {isProcessing ? (\n                          <>\n                            <Loader2 className=\"w-4 h-4 animate-spin\" />\n                            Processing...\n                          </>\n                        ) : (\n                          <>\n                            <File className=\"w-4 h-4\" />\n                            Download {displayMode} Version\n                          </>\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                  {/* Display Mode Description */}\n                  <div className=\"mb-4\">\n                    <div className=\"bg-[#2D2D2D] rounded p-3\">\n                      <p className=\"text-[#858585] text-sm\">\n                        {displayMode === \"original\" &&\n                          \"Showing the original model with its materials and textures.\"}\n                        {displayMode === \"wireframe\" &&\n                          \"Displaying the model as a wireframe structure showing the mesh geometry.\"}\n                        {displayMode === \"solid\" &&\n                          \"Rendering the model with a uniform solid color material.\"}\n                        {displayMode === \"normals\" &&\n                          \"Visualizing surface normals with color-coded directions (RGB = XYZ).\"}\n                        {displayMode === \"depth\" &&\n                          \"Showing depth information - closer surfaces appear lighter.\"}\n                        {displayMode === \"points\" &&\n                          \"Displaying the model as a point cloud of vertices.\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div\n                    className=\"bg-[#1E1E1E] rounded overflow-hidden\"\n                    style={{ height: \"500px\" }}\n                  >\n                    <Canvas\n                      camera={{ position: [0, 0, 5], fov: 50 }}\n                      gl={{\n                        powerPreference: \"high-performance\",\n                        antialias: true,\n                        alpha: true,\n                      }}\n                    >\n                      <ambientLight intensity={0.5} />\n                      <pointLight position={[10, 10, 10]} />\n                      <pointLight position={[-10, -10, -10]} intensity={0.3} />\n                      {/* Memory-optimized loading for large models */}\n                      {modelUrl && (\n                        <React.Suspense\n                          fallback={\n                            <Html center>\n                              <div className=\"text-white bg-black/50 p-2 rounded\">\n                                <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n                                Loading model...\n                              </div>\n                            </Html>\n                          }\n                        >\n                          <ModelPreview\n                            url={modelUrl}\n                            displayMode={displayMode}\n                            autoRotate={autoRotate}\n                          />\n                        </React.Suspense>\n                      )}\n                      {showGrid && (\n                        <gridHelper args={[10, 10, \"#444444\", \"#666666\"]} />\n                      )}\n                      {showAxes && <axesHelper args={[2]} />}\n                      <OrbitControls\n                        enableZoom\n                        enablePan\n                        enableRotate\n                        minDistance={0.1}\n                        maxDistance={100}\n                      />\n                      <Environment preset=\"city\" />\n                    </Canvas>\n                  </div>\n                  <p className=\"text-[#858585] text-sm mt-4 text-center\">\n                    Use mouse to rotate, zoom, and pan around the model. Try\n                    different display modes to analyze the model structure.\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Code Tab - VS Code Style */}\n            {activeTab === \"code\" && projectStructure && (\n              <div className=\"h-full flex flex-col\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <h3 className=\"text-lg font-medium text-[#CCCCCC]\">\n                      {activeFile\n                        ? (activeFile === \"index\"\n                            ? \"index\"\n                            : activeFile === \"examplePage\"\n                            ? \"page\"\n                            : activeFile.includes(\"geometry\")\n                            ? \"Geometry\"\n                            : activeFile.includes(\"mesh\")\n                            ? \"Mesh\"\n                            : \"Material\") +\n                          `.${\n                            LANGUAGES.find((l) => l.id === selectedLanguage)\n                              ?.extension || \"ts\"\n                          }`\n                        : \"Code Editor\"}\n                    </h3>\n                    <div className=\"flex items-center gap-2\">\n                      <LanguageSelector\n                        selectedLanguage={selectedLanguage}\n                        onChange={setSelectedLanguage}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <button\n                      onClick={() => downloadZip(true)}\n                      disabled={isProcessing}\n                      className={`bg-[#0E639C] hover:bg-[#107FC9] text-white px-3 py-1.5 rounded transition-colors flex items-center gap-2 ${\n                        isProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"\n                      }`}\n                    >\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <Layout className=\"w-4 h-4\" />\n                          Download Full Project\n                        </>\n                      )}\n                    </button>\n                    <button\n                      onClick={() => downloadZip(false)}\n                      disabled={isProcessing}\n                      className={`bg-[#0E639C] hover:bg-[#107FC9] text-white px-3 py-1.5 rounded transition-colors flex items-center gap-2 ${\n                        isProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"\n                      }`}\n                    >\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <File className=\"w-4 h-4\" />\n                          Download Component\n                        </>\n                      )}\n                    </button>\n                    <button\n                      onClick={downloadModel}\n                      className=\"bg-[#237A57] hover:bg-[#2B9348] text-white px-3 py-1.5 rounded transition-colors flex items-center gap-2\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                      Download GLB\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"flex-1 min-h-0\">\n                  <CodeEditor\n                    code={currentFileContent}\n                    languageId={selectedLanguage}\n                  />\n                </div>\n\n                {/* Statistics Section - Now in a collapsible panel at the bottom */}\n                <div className=\"mt-4 border-t border-[#3c3c3c] pt-4\">\n                  <div className=\"flex justify-between items-center mb-3\">\n                    <h4 className=\"text-sm font-medium text-[#CCCCCC] flex items-center\">\n                      <Terminal className=\"w-4 h-4 mr-2 text-purple-400\" />\n                      Model Statistics\n                    </h4>\n                    <div className=\"flex space-x-2\">\n                      <span className=\"text-xs text-[#858585]\">\n                        {file\n                          ? (file.size / 1024 / 1024).toFixed(2) + \" MB\"\n                          : \"N/A\"}{\" \"}\n                        • {projectStructure.meshes.length} meshes\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-6 gap-3 text-sm\">\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Meshes</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">\n                        {projectStructure.meshes.length}\n                      </div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Geometry Files</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">\n                        {projectStructure.geometries?.length || 0}\n                      </div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Materials</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">\n                        {projectStructure.materials.length}\n                      </div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Total Vertices</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">\n                        {projectStructure.totalVertices.toLocaleString()}\n                      </div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Total Triangles</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">\n                        {projectStructure.totalTriangles.toLocaleString()}\n                      </div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">File Size</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">\n                        {file\n                          ? (file.size / 1024 / 1024).toFixed(2) + \" MB\"\n                          : \"N/A\"}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Status Bar */}\n          <div className=\"bg-[#2D2D2D] border-t border-[#3c3c3c] h-8 flex items-center px-4 text-xs text-[#858585]\">\n            <div className=\"flex space-x-4\">\n              <span>UTF-8</span>\n              <span>LF</span>\n              <span>\n                {activeTab === \"code\" && projectStructure\n                  ? projectStructure.meshes.length + \" meshes\"\n                  : \"\"}\n              </span>\n            </div>\n            <div className=\"ml-auto flex space-x-4\">\n              <span>{selectedLanguage.toUpperCase()}</span>\n              <span>\n                Line {activeFile ? \"1\" : \"\"}, Column {activeFile ? \"1\" : \"\"}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction isMesh(object: THREE.Object3D): object is THREE.Mesh {\n  return \"isMesh\" in object && object.isMesh === true;\n}\n// Component to display the GLB model in the preview with memory optimization\nfunction ModelPreview({\n  url,\n  displayMode,\n  autoRotate,\n}: {\n  url: string;\n  displayMode: string;\n  autoRotate: boolean;\n}) {\n  const [gltf, setGltf] = useState<any>(null);\n  const meshRef = useRef<THREE.Group>(null);\n  // Load GLTF with memory optimization for large files\n  useEffect(() => {\n    let isMounted = true;\n    const loader = new GLTFLoader();\n    // Set up DRACO for compressed models\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath(\n      \"https://www.gstatic.com/draco/versioned/decoders/1.5.6/\"\n    );\n    loader.setDRACOLoader(dracoLoader);\n    // For large files, use a more memory-efficient approach\n    fetch(url)\n      .then((response) => response.arrayBuffer())\n      .then((data) => {\n        if (!isMounted) return;\n        loader.parse(\n          data,\n          \"\",\n          (gltf: any) => {\n            // For extremely large models, simplify geometries to prevent memory issues\n            if (gltf.scene) {\n              gltf.scene.traverse((object: THREE.Object3D) => {\n                if (isMesh(object)) {\n                  const mesh = object as THREE.Mesh;\n                  const geometry = mesh.geometry;\n                  // Check if the geometry is extremely large\n                  const vertexCount = geometry.attributes.position.count;\n                  if (vertexCount > 1000000) {\n                    // For extremely large meshes, consider simplifying or warning\n                    console.warn(\n                      `Mesh ${mesh.name} has ${vertexCount} vertices - this may cause performance issues`\n                    );\n                  }\n                }\n              });\n            }\n            if (isMounted) {\n              setGltf(gltf);\n            }\n          },\n          (error: any) => {\n            console.error(\"Error parsing GLTF\", error);\n          }\n        );\n      })\n      .catch((error) => {\n        console.error(\"Error loading GLB file\", error);\n      });\n    return () => {\n      isMounted = false;\n      // Clean up GLTF resources\n      if (gltf) {\n        gltf.scene.traverse((object: THREE.Object3D) => {\n          if (isMesh(object)) {\n            const mesh = object as THREE.Mesh;\n            mesh.geometry.dispose();\n\n            if (Array.isArray(mesh.material)) {\n              mesh.material.forEach((material) => material.dispose());\n            } else {\n              mesh.material.dispose();\n            }\n          }\n        });\n      }\n    };\n  }, [url]);\n\n  useFrame((state) => {\n    if (meshRef.current && autoRotate) {\n      meshRef.current.rotation.y = state.clock.getElapsedTime() * 0.5;\n    }\n  });\n\n  // Apply material overrides based on display mode\n  useEffect(() => {\n    if (gltf && gltf.scene) {\n      gltf.scene.traverse((child: THREE.Object3D) => {\n        if (isMesh(child)) {\n          const mesh = child as THREE.Mesh;\n          const originalMaterial = mesh.material;\n\n          // Dispose of old materials to prevent memory leaks\n          if (Array.isArray(originalMaterial)) {\n            originalMaterial.forEach((material) => material.dispose());\n          } else if (originalMaterial && \"dispose\" in originalMaterial) {\n            (originalMaterial as THREE.Material).dispose();\n          }\n\n          // Create new materials based on display mode\n          switch (displayMode) {\n            case \"wireframe\": {\n              // Clone original material(s) and enable wireframe if supported\n              if (Array.isArray(originalMaterial)) {\n                mesh.material = originalMaterial.map((mat) => {\n                  const newMat = mat.clone();\n                  // Only set wireframe if the material type supports it\n                  if (\"wireframe\" in newMat) {\n                    (newMat as any).wireframe = true;\n                  }\n                  newMat.transparent = true;\n                  newMat.opacity = 0.8;\n                  return newMat;\n                });\n              } else {\n                const newMat = originalMaterial.clone();\n                if (\"wireframe\" in newMat) {\n                  (newMat as any).wireframe = true;\n                }\n                newMat.transparent = true;\n                newMat.opacity = 0.8;\n                mesh.material = newMat;\n              }\n              break;\n            }\n            case \"points\":\n              mesh.material = new THREE.PointsMaterial({\n                color: 0x00ff00,\n                size: 0.01,\n                sizeAttenuation: true,\n              });\n              break;\n            case \"normals\":\n              mesh.material = new THREE.MeshNormalMaterial();\n              break;\n            case \"depth\":\n              mesh.material = new THREE.MeshDepthMaterial();\n              break;\n            case \"solid\":\n              mesh.material = new THREE.MeshStandardMaterial({\n                color: 0x888888,\n                metalness: 0.1,\n                roughness: 0.8,\n              });\n              break;\n            default:\n              // Keep original materials for 'original' mode\n              mesh.material = originalMaterial;\n              break;\n          }\n        }\n      });\n    }\n  }, [gltf, displayMode]);\n  if (!gltf) {\n    return (\n      <Html center>\n        <div className=\"text-white bg-black/50 p-2 rounded\">\n          <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n          Loading model...\n        </div>\n      </Html>\n    );\n  }\n\n  return (\n    <primitive\n      ref={meshRef}\n      object={gltf.scene}\n      scale={[1, 1, 1]}\n      position={[0, 0, 0]}\n    />\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}
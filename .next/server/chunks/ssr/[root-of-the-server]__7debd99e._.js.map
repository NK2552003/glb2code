{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/lib/glb-converter.ts"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\nimport type { MeshData, MaterialData, ProjectStructure, GeometryData } from '@/app/types/glb-convertor';\n\n// Language configuration for code generation with proper 2025 library support\nconst LANGUAGES = {\n  typescript: {\n    extension: 'tsx',\n    geometryExtension: 'ts',\n    comment: '//',\n    string: '\"',\n    function: 'function',\n    class: 'class',\n    import: 'import',\n    export: 'export',\n    typeDeclaration: (name: string) => `type ${name} = {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  javascript: {\n    extension: 'jsx',\n    geometryExtension: 'js',\n    comment: '//',\n    string: '\"',\n    function: 'function',\n    class: 'class',\n    import: 'import',\n    export: 'export',\n    typeDeclaration: () => '',\n    typeEnd: '',\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  python: {\n    extension: 'py',\n    geometryExtension: 'py',\n    comment: '#',\n    string: \"'\",\n    function: 'def',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: () => '',\n    typeEnd: '',\n    objectProperty: (key: string, value: string) => `    ${key} = ${value}`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  java: {\n    extension: 'java',\n    geometryExtension: 'java',\n    comment: '//',\n    string: '\"',\n    function: '',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `public class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    public ${value} ${key};`,\n    array: (items: string[]) => `new ArrayList<>() {{ ${items.map(item => `add(${item})`).join('; ')}; }}`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  csharp: {\n    extension: 'cs',\n    geometryExtension: 'cs',\n    comment: '//',\n    string: '\"',\n    function: '',\n    class: 'class',\n    import: 'using',\n    export: '',\n    typeDeclaration: (name: string) => `public class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    public ${value} ${key} { get; set; }`,\n    array: (items: string[]) => `new List<object> { ${items.join(', ')} }`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  cpp: {\n    extension: 'cpp',\n    geometryExtension: 'h',\n    comment: '//',\n    string: '\"',\n    function: '',\n    class: 'class',\n    import: '#include',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} { public:`,\n    typeEnd: '};',\n    objectProperty: (key: string, value: string) => `    ${value} ${key};`,\n    array: (items: string[]) => `{${items.join(', ')}}`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  go: {\n    extension: 'go',\n    geometryExtension: 'go',\n    comment: '//',\n    string: '\"',\n    function: 'func',\n    class: 'type',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `type ${name} struct {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    ${key} ${value} \\`json:\"${key.toLowerCase()}\"\\``,\n    array: (items: string[]) => `[]interface{}{${items.join(', ')}}`,\n    stringLiteral: (value: string) => `\"${value.replace(/\"/g, '\\\\\"')}\"`\n  },\n  rust: {\n    extension: 'rs',\n    geometryExtension: 'rs',\n    comment: '//',\n    string: '\"',\n    function: 'fn',\n    class: 'struct',\n    import: 'use',\n    export: '',\n    typeDeclaration: (name: string) => `pub struct ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    pub ${key}: ${value},`,\n    array: (items: string[]) => `vec![${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value.replace(/\"/g, '\\\\\"')}\"`\n  },\n  swift: {\n    extension: 'swift',\n    geometryExtension: 'swift',\n    comment: '//',\n    string: '\"',\n    function: 'func',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    var ${key}: ${value}`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  kotlin: {\n    extension: 'kt',\n    geometryExtension: 'kt',\n    comment: '//',\n    string: '\"',\n    function: 'fun',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    var ${key}: ${value}? = null`,\n    array: (items: string[]) => `listOf(${items.join(', ')})`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  ruby: {\n    extension: 'rb',\n    geometryExtension: 'rb',\n    comment: '#',\n    string: '\"',\n    function: 'def',\n    class: 'class',\n    import: 'require',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name}`,\n    typeEnd: 'end',\n    objectProperty: (key: string, value: string) => `  attr_accessor :${key}`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  php: {\n    extension: 'php',\n    geometryExtension: 'php',\n    comment: '//',\n    string: '\"',\n    function: 'function',\n    class: 'class',\n    import: 'use',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    private $${key};`,\n    array: (items: string[]) => `array(${items.join(', ')})`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  scala: {\n    extension: 'scala',\n    geometryExtension: 'scala',\n    comment: '//',\n    string: '\"',\n    function: 'def',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `case class ${name}(`,\n    typeEnd: ')',\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `Seq(${items.join(', ')})`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  dart: {\n    extension: 'dart',\n    geometryExtension: 'dart',\n    comment: '//',\n    string: '\"',\n    function: 'void',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `  ${value} ${key};`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  r: {\n    extension: 'R',\n    geometryExtension: 'R',\n    comment: '#',\n    string: '\"',\n    function: 'function',\n    class: 'setClass',\n    import: 'library',\n    export: '',\n    typeDeclaration: (name: string) => `setClass(\"${name}\", slots = list(`,\n    typeEnd: '))',\n    objectProperty: (key: string, value: string) => `\"${key}\" = \"${value}\",`,\n    array: (items: string[]) => `c(${items.join(', ')})`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  }\n} as const;\n\ntype LanguageId = keyof typeof LANGUAGES;\n\n/**\n * Capitalizes the first letter of a string\n * Required for React components which must start with uppercase letters\n */\nfunction capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Sanitizes names to be valid identifiers\n */\nfunction sanitizeName(name: string): string {\n  // Replace invalid characters with underscores\n  let safeName = name.replace(/[^a-zA-Z0-9_]/g, '_');\n  \n  // Ensure it starts with a letter\n  if (!/^[a-zA-Z_]/.test(safeName)) {\n    safeName = '_' + safeName;\n  }\n  \n  // Handle reserved keywords\n  const reservedKeywords = ['default', 'function', 'class', 'export', 'import', 'let', 'const', 'var', 'continue', 'break', 'case'];\n  if (reservedKeywords.includes(safeName.toLowerCase())) {\n    safeName = '_' + safeName;\n  }\n  \n  return safeName;\n}\n\n/**\n * Formats array data for different languages with proper chunking for large datasets\n */\nfunction formatArrayData(data: number[], languageId: LanguageId, chunkSize: number = 1000): string {\n  const lang = LANGUAGES[languageId];\n  \n  if (data.length <= chunkSize) {\n    return lang.array(data.map(String));\n  }\n  \n  // Handle large arrays with chunking\n  switch (languageId) {\n    case 'typescript':\n    case 'javascript':\n      return `new Float32Array([${data.join(', ')}])`;\n    \n    case 'python':\n      return `np.array([${data.join(', ')}], dtype=np.float32)`;\n    \n    case 'java':\n      return `new float[]{${data.join('f, ')}f}`;\n    \n    case 'csharp':\n      return `new float[]{${data.join('f, ')}f}`;\n    \n    case 'cpp':\n      return `{${data.join('f, ')}f}`;\n    \n    case 'go':\n      return `[]float32{${data.join(', ')}}`;\n    \n    case 'rust':\n      return `vec![${data.join(', ')}]`;\n    \n    case 'swift':\n      return `[${data.join(', ')}]`;\n    \n    default:\n      return lang.array(data.map(String));\n  }\n}\n\n/**\n * Generates a complete project structure from a GLTF model\n * Now with separate geometry files for better component management\n */\nexport function generateProjectStructure(\n  gltf: GLTF,\n  componentName: string,\n  displayMode: string = 'original',\n  languageId: LanguageId = 'typescript'\n): ProjectStructure {\n  const lang = LANGUAGES[languageId];\n  const meshes: MeshData[] = [];\n  const materials: MaterialData[] = [];\n  const geometries: GeometryData[] = [];\n  let totalVertices = 0;\n  let totalTriangles = 0;\n\n  gltf.scene.traverse((object) => {\n    if (object.isMesh) {\n      const mesh = object as THREE.Mesh;\n      const geometry = mesh.geometry;\n      \n      totalVertices += geometry.attributes.position.count;\n      if (geometry.index) {\n        totalTriangles += geometry.index.count / 3;\n      } else {\n        totalTriangles += geometry.attributes.position.count / 3;\n      }\n\n      const meshName = mesh.name || `Mesh_${meshes.length}`;\n      const safeMeshName = sanitizeName(meshName);\n      const capitalizedMeshName = capitalize(safeMeshName);\n\n      const geometryFile = generateGeometryFile(capitalizedMeshName, geometry, languageId);\n      geometries.push({\n        name: capitalizedMeshName,\n        content: geometryFile,\n        originalName: meshName\n      });\n\n      const meshComponent = generateMeshComponent(capitalizedMeshName, geometry, displayMode, languageId);\n      meshes.push({\n        name: capitalizedMeshName,\n        content: meshComponent,\n        originalName: meshName\n      });\n\n      const material = Array.isArray(mesh.material) ? mesh.material[0] : mesh.material;\n      const materialName = material.name || `Material_${materials.length}`;\n      const safeMaterialName = sanitizeName(materialName);\n      const capitalizedMaterialName = capitalize(safeMaterialName);\n\n      // Extract geometry attributes\n      const hasNormals = !!geometry.attributes.normal;\n      const hasUvs = !!geometry.attributes.uv;\n\n      if (!materials.some(m => m.name === capitalizedMaterialName)) {\n        const materialComponent = generateMaterialComponent(\n          capitalizedMaterialName,\n          material,\n          displayMode,\n          languageId,\n          hasNormals,\n          hasUvs\n        );\n        materials.push({\n          name: capitalizedMaterialName,\n          content: materialComponent,\n          originalName: materialName\n        });\n      }\n    }\n  });\n\n  const capitalizedComponentName = capitalize(componentName);\n  const indexContent = generateIndexComponent(capitalizedComponentName, meshes, materials, displayMode, languageId);\n  const examplePageContent = generateExamplePage(capitalizedComponentName, languageId);\n\n  return {\n    componentName: capitalizedComponentName,\n    indexContent,\n    examplePageContent,\n    meshes,\n    geometries,\n    materials,\n    totalVertices,\n    totalTriangles\n  };\n}\n\n/**\n * Generates a separate geometry file for Three.js\n * Creates a reusable geometry object that can be imported by components\n */\nfunction generateGeometryFile(meshName: string, geometry: THREE.BufferGeometry, languageId: LanguageId): string {\n  const positions = Array.from(geometry.attributes.position.array);\n  const normals = geometry.attributes.normal ? Array.from(geometry.attributes.normal.array) : null;\n  const uvs = geometry.attributes.uv ? Array.from(geometry.attributes.uv.array) : null;\n  const indices = geometry.index ? Array.from(geometry.index.array) : null;\n\n  const isLargeGeometry = positions.length > 100000;\n\n  switch (languageId) {\n    case 'typescript':\n    case 'javascript':\n      return `import * as THREE from 'three';\n\n// ${meshName} geometry definition\nexport const ${meshName}Geometry = (() => {\n  const geometry = new THREE.BufferGeometry();\n  \n  ${isLargeGeometry ? \n    `// Large geometry - using chunked approach\n  const createGeometryChunk = (data: number[], itemSize: number) => {\n    const chunkSize = 50000;\n    const chunks: Float32Array[] = [];\n    for (let i = 0; i < data.length; i += chunkSize) {\n      const chunk = data.slice(i, i + chunkSize);\n      chunks.push(new Float32Array(chunk));\n    }\n    return chunks;\n  };\n  \n  const positionChunks = createGeometryChunk(${JSON.stringify(positions)}, 3);\n  const positions = new Float32Array(positionChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n  \n  ${normals ? `const normalChunks = createGeometryChunk(${JSON.stringify(normals)}, 3);\n  const normals = new Float32Array(normalChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n  geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));` : ''}\n  \n  ${uvs ? `const uvChunks = createGeometryChunk(${JSON.stringify(uvs)}, 2);\n  const uvs = new Float32Array(uvChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n  geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));` : ''}\n  \n  ${indices ? `const indexChunks = createGeometryChunk(${JSON.stringify(indices)}, 1);\n  const indices = new Uint16Array(indexChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n  geometry.setIndex(new THREE.BufferAttribute(indices, 1));` : ''}` :\n    \n    `// Position data\n  const positions = ${formatArrayData(positions, languageId)};\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n  \n  ${normals ? `// Normal data\n  const normals = ${formatArrayData(normals, languageId)};\n  geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));` : ''}\n  \n  ${uvs ? `// UV data\n  const uvs = ${formatArrayData(uvs, languageId)};\n  geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));` : ''}\n  \n  ${indices ? `// Index data\n  const indices = new Uint16Array(${JSON.stringify(indices)});\n  geometry.setIndex(new THREE.BufferAttribute(indices, 1));` : ''}`}\n\n  geometry.computeVertexNormals();\n  return geometry;\n})();\n`;\n\n    case 'python':\n      return `import numpy as np\nimport moderngl\nfrom typing import Optional\n\nclass ${meshName}Geometry:\n    \"\"\"${meshName} geometry definition for ModernGL\"\"\"\n    \n    def __init__(self):\n        # Position data\n        self.positions = ${formatArrayData(positions, languageId)}\n        ${normals ? `# Normal data\n        self.normals = ${formatArrayData(normals, languageId)}` : 'self.normals = None'}\n        ${uvs ? `# UV data\n        self.uvs = ${formatArrayData(uvs, languageId)}` : 'self.uvs = None'}\n        ${indices ? `# Index data\n        self.indices = np.array([${indices.join(', ')}], dtype=np.uint32)` : 'self.indices = None'}\n    \n    def create_vao(self, ctx: moderngl.Context, program: moderngl.Program) -> moderngl.VertexArray:\n        \"\"\"Create vertex array object for rendering\"\"\"\n        vbo_positions = ctx.buffer(self.positions.tobytes())\n        \n        vao_content = [(vbo_positions, '3f', 'in_position')]\n        \n        ${normals ? `if self.normals is not None:\n            vbo_normals = ctx.buffer(self.normals.tobytes())\n            vao_content.append((vbo_normals, '3f', 'in_normal'))` : ''}\n        \n        ${uvs ? `if self.uvs is not None:\n            vbo_uvs = ctx.buffer(self.uvs.tobytes())\n            vao_content.append((vbo_uvs, '2f', 'in_uv'))` : ''}\n        \n        ${indices ? `if self.indices is not None:\n            ibo = ctx.buffer(self.indices.tobytes())\n            return ctx.vertex_array(program, vao_content, index_buffer=ibo)\n        else:\n            return ctx.vertex_array(program, vao_content)` : 'return ctx.vertex_array(program, vao_content)'}\n`;\n\n    case 'java':\n      return `import java.nio.FloatBuffer;\nimport java.nio.IntBuffer;\nimport org.lwjgl.BufferUtils;\nimport static org.lwjgl.opengl.GL30.*;\n\n/**\n * ${meshName} geometry definition for LWJGL OpenGL\n */\npublic class ${meshName}Geometry {\n    private int vao;\n    private int vbo;\n    ${indices ? 'private int ebo;' : ''}\n    private int vertexCount;\n    \n    public ${meshName}Geometry() {\n        setupBuffers();\n    }\n    \n    private void setupBuffers() {\n        // Position data\n        float[] positions = ${formatArrayData(positions, languageId)};\n        ${normals ? `float[] normals = ${formatArrayData(normals || [], languageId)};` : ''}\n        ${uvs ? `float[] uvs = ${formatArrayData(uvs || [], languageId)};` : ''}\n        ${indices ? `int[] indices = {${indices.join(', ')}};` : ''}\n        \n        vao = glGenVertexArrays();\n        vbo = glGenBuffers();\n        ${indices ? 'ebo = glGenBuffers();' : ''}\n        \n        glBindVertexArray(vao);\n        \n        // Position buffer\n        glBindBuffer(GL_ARRAY_BUFFER, vbo);\n        FloatBuffer positionBuffer = BufferUtils.createFloatBuffer(positions.length);\n        positionBuffer.put(positions).flip();\n        glBufferData(GL_ARRAY_BUFFER, positionBuffer, GL_STATIC_DRAW);\n        glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * Float.BYTES, 0);\n        glEnableVertexAttribArray(0);\n        \n        ${normals ? `// Normal buffer\n        FloatBuffer normalBuffer = BufferUtils.createFloatBuffer(normals.length);\n        normalBuffer.put(normals).flip();\n        glBufferData(GL_ARRAY_BUFFER, normalBuffer, GL_STATIC_DRAW);\n        glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * Float.BYTES, 0);\n        glEnableVertexAttribArray(1);` : ''}\n        \n        ${uvs ? `// UV buffer\n        FloatBuffer uvBuffer = BufferUtils.createFloatBuffer(uvs.length);\n        uvBuffer.put(uvs).flip();\n        glBufferData(GL_ARRAY_BUFFER, uvBuffer, GL_STATIC_DRAW);\n        glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * Float.BYTES, 0);\n        glEnableVertexAttribArray(2);` : ''}\n        \n        ${indices ? `// Element buffer\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);\n        IntBuffer indexBuffer = BufferUtils.createIntBuffer(indices.length);\n        indexBuffer.put(indices).flip();\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indexBuffer, GL_STATIC_DRAW);\n        vertexCount = indices.length;` : `vertexCount = positions.length / 3;`}\n        \n        glBindVertexArray(0);\n    }\n    \n    public void render() {\n        glBindVertexArray(vao);\n        ${indices ? 'glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0);' : 'glDrawArrays(GL_TRIANGLES, 0, vertexCount);'}\n        glBindVertexArray(0);\n    }\n    \n    public void cleanup() {\n        glDeleteVertexArrays(vao);\n        glDeleteBuffers(vbo);\n        ${indices ? 'glDeleteBuffers(ebo);' : ''}\n    }\n}\n`;\n\n    case 'csharp':\n      return `using System;\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Mathematics;\n\n/// <summary>\n/// ${meshName} geometry definition for OpenTK\n/// </summary>\npublic class ${meshName}Geometry : IDisposable\n{\n    private int _vao;\n    private int _vbo;\n    ${indices ? 'private int _ebo;' : ''}\n    private int _vertexCount;\n    \n    public ${meshName}Geometry()\n    {\n        SetupBuffers();\n    }\n    \n    private void SetupBuffers()\n    {\n        // Position data\n        float[] positions = ${formatArrayData(positions, languageId)};\n        ${normals ? `float[] normals = ${formatArrayData(normals || [], languageId)};` : ''}\n        ${uvs ? `float[] uvs = ${formatArrayData(uvs || [], languageId)};` : ''}\n        ${indices ? `uint[] indices = {${indices.join(', ')}};` : ''}\n        \n        _vao = GL.GenVertexArray();\n        _vbo = GL.GenBuffer();\n        ${indices ? '_ebo = GL.GenBuffer();' : ''}\n        \n        GL.BindVertexArray(_vao);\n        \n        // Position buffer\n        GL.BindBuffer(BufferTarget.ArrayBuffer, _vbo);\n        GL.BufferData(BufferTarget.ArrayBuffer, positions.Length * sizeof(float), positions, BufferUsageHint.StaticDraw);\n        GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\n        GL.EnableVertexAttribArray(0);\n        \n        ${normals ? `// Normal buffer\n        GL.BufferData(BufferTarget.ArrayBuffer, normals.Length * sizeof(float), normals, BufferUsageHint.StaticDraw);\n        GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\n        GL.EnableVertexAttribArray(1);` : ''}\n        \n        ${uvs ? `// UV buffer\n        GL.BufferData(BufferTarget.ArrayBuffer, uvs.Length * sizeof(float), uvs, BufferUsageHint.StaticDraw);\n        GL.VertexAttribPointer(2, 2, VertexAttribPointerType.Float, false, 2 * sizeof(float), 0);\n        GL.EnableVertexAttribArray(2);` : ''}\n        \n        ${indices ? `// Element buffer\n        GL.BindBuffer(BufferTarget.ElementArrayBuffer, _ebo);\n        GL.BufferData(BufferTarget.ElementArrayBuffer, indices.Length * sizeof(uint), indices, BufferUsageHint.StaticDraw);\n        _vertexCount = indices.Length;` : `_vertexCount = positions.Length / 3;`}\n        \n        GL.BindVertexArray(0);\n    }\n    \n    public void Render()\n    {\n        GL.BindVertexArray(_vao);\n        ${indices ? 'GL.DrawElements(PrimitiveType.Triangles, _vertexCount, DrawElementsType.UnsignedInt, 0);' : 'GL.DrawArrays(PrimitiveType.Triangles, 0, _vertexCount);'}\n        GL.BindVertexArray(0);\n    }\n    \n    public void Dispose()\n    {\n        GL.DeleteVertexArray(_vao);\n        GL.DeleteBuffer(_vbo);\n        ${indices ? 'GL.DeleteBuffer(_ebo);' : ''}\n    }\n}\n`;\n\n    case 'cpp':\n      return `#pragma once\n#include <vector>\n#include <GL/glew.h>\n#include <glm/glm.hpp>\n\n/**\n * ${meshName} geometry definition for OpenGL with GLM\n */\nclass ${meshName}Geometry {\nprivate:\n    GLuint VAO, VBO${indices ? ', EBO' : ''};\n    ${indices ? 'int indexCount;' : 'int vertexCount;'}\n    \npublic:\n    ${meshName}Geometry() {\n        setupBuffers();\n    }\n    \n    ~${meshName}Geometry() {\n        cleanup();\n    }\n    \nprivate:\n    void setupBuffers() {\n        // Position data\n        std::vector<float> positions = ${formatArrayData(positions, languageId)};\n        ${normals ? `std::vector<float> normals = ${formatArrayData(normals || [], languageId)};` : ''}\n        ${uvs ? `std::vector<float> uvs = ${formatArrayData(uvs || [], languageId)};` : ''}\n        ${indices ? `std::vector<unsigned int> indices = {${indices.join(', ')}};` : ''}\n        \n        glGenVertexArrays(1, &VAO);\n        glGenBuffers(1, &VBO);\n        ${indices ? 'glGenBuffers(1, &EBO);' : ''}\n        \n        glBindVertexArray(VAO);\n        \n        // Position buffer\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glBufferData(GL_ARRAY_BUFFER, positions.size() * sizeof(float), positions.data(), GL_STATIC_DRAW);\n        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(0);\n        \n        ${normals ? `// Normal buffer\n        glBufferData(GL_ARRAY_BUFFER, normals.size() * sizeof(float), normals.data(), GL_STATIC_DRAW);\n        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(1);` : ''}\n        \n        ${uvs ? `// UV buffer\n        glBufferData(GL_ARRAY_BUFFER, uvs.size() * sizeof(float), uvs.data(), GL_STATIC_DRAW);\n        glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(2);` : ''}\n        \n        ${indices ? `// Element buffer\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), indices.data(), GL_STATIC_DRAW);\n        indexCount = indices.size();` : `vertexCount = positions.size() / 3;`}\n        \n        glBindVertexArray(0);\n    }\n    \npublic:\n    void render() {\n        glBindVertexArray(VAO);\n        ${indices ? 'glDrawElements(GL_TRIANGLES, indexCount, GL_UNSIGNED_INT, 0);' : 'glDrawArrays(GL_TRIANGLES, 0, vertexCount);'}\n        glBindVertexArray(0);\n    }\n    \n    void cleanup() {\n        glDeleteVertexArrays(1, &VAO);\n        glDeleteBuffers(1, &VBO);\n        ${indices ? 'glDeleteBuffers(1, &EBO);' : ''}\n    }\n};\n`;\n\n    case 'go':\n      return `package geometry\n\nimport (\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"github.com/go-gl/mathgl/mgl32\"\n)\n\n// ${meshName}Geometry represents the geometry data for ${meshName}\ntype ${meshName}Geometry struct {\n    vao uint32\n    vbo uint32\n    ${indices ? 'ebo uint32' : ''}\n    ${indices ? 'indexCount int32' : 'vertexCount int32'}\n}\n\n// New${meshName}Geometry creates a new ${meshName} geometry\nfunc New${meshName}Geometry() *${meshName}Geometry {\n    geom := &${meshName}Geometry{}\n    geom.setupBuffers()\n    return geom\n}\n\nfunc (g *${meshName}Geometry) setupBuffers() {\n    // Position data\n    positions := ${formatArrayData(positions, languageId)}\n    ${normals ? `normals := ${formatArrayData(normals || [], languageId)}` : ''}\n    ${uvs ? `uvs := ${formatArrayData(uvs || [], languageId)}` : ''}\n    ${indices ? `indices := []uint32{${indices.join(', ')}}` : ''}\n    \n    gl.GenVertexArrays(1, &g.vao)\n    gl.GenBuffers(1, &g.vbo)\n    ${indices ? 'gl.GenBuffers(1, &g.ebo)' : ''}\n    \n    gl.BindVertexArray(g.vao)\n    \n    // Position buffer\n    gl.BindBuffer(gl.ARRAY_BUFFER, g.vbo)\n    gl.BufferData(gl.ARRAY_BUFFER, len(positions)*4, gl.Ptr(positions), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 3*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(0)\n    \n    ${normals ? `// Normal buffer\n    gl.BufferData(gl.ARRAY_BUFFER, len(normals)*4, gl.Ptr(normals), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 3*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(1)` : ''}\n    \n    ${uvs ? `// UV buffer\n    gl.BufferData(gl.ARRAY_BUFFER, len(uvs)*4, gl.Ptr(uvs), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(2, 2, gl.FLOAT, false, 2*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(2)` : ''}\n    \n    ${indices ? `// Element buffer\n    gl.BindBuffer(gl.ELEMENT_ARRAY_BUFFER, g.ebo)\n    gl.BufferData(gl.ELEMENT_ARRAY_BUFFER, len(indices)*4, gl.Ptr(indices), gl.STATIC_DRAW)\n    g.indexCount = int32(len(indices))` : `g.vertexCount = int32(len(positions) / 3)`}\n    \n    gl.BindVertexArray(0)\n}\n\n// Render renders the geometry\nfunc (g *${meshName}Geometry) Render() {\n    gl.BindVertexArray(g.vao)\n    ${indices ? 'gl.DrawElements(gl.TRIANGLES, g.indexCount, gl.UNSIGNED_INT, gl.PtrOffset(0))' : 'gl.DrawArrays(gl.TRIANGLES, 0, g.vertexCount)'}\n    gl.BindVertexArray(0)\n}\n\n// Cleanup cleans up OpenGL resources\nfunc (g *${meshName}Geometry) Cleanup() {\n    gl.DeleteVertexArrays(1, &g.vao)\n    gl.DeleteBuffers(1, &g.vbo)\n    ${indices ? 'gl.DeleteBuffers(1, &g.ebo)' : ''}\n}\n`;\n\n    case 'rust':\n      return `use wgpu::util::DeviceExt;\n\n/// ${meshName} geometry definition for wgpu\npub struct ${meshName}Geometry {\n    vertex_buffer: wgpu::Buffer,\n    ${indices ? 'index_buffer: wgpu::Buffer,' : ''}\n    ${indices ? 'num_indices: u32,' : 'num_vertices: u32,'}\n}\n\nimpl ${meshName}Geometry {\n    pub fn new(device: &wgpu::Device) -> Self {\n        // Position data\n        let positions: Vec<f32> = vec![${positions.join(', ')}];\n        ${normals ? `let normals: Vec<f32> = vec![${(normals || []).join(', ')}];` : ''}\n        ${uvs ? `let uvs: Vec<f32> = vec![${(uvs || []).join(', ')}];` : ''}\n        ${indices ? `let indices: Vec<u16> = vec![${indices.join(', ')}];` : ''}\n        \n        // Create vertex data\n        let mut vertex_data = Vec::new();\n        for i in (0..positions.len()).step_by(3) {\n            vertex_data.extend_from_slice(&positions[i..i+3]);\n            ${normals ? `if i < normals.len() - 2 {\n                vertex_data.extend_from_slice(&normals[i..i+3]);\n            }` : ''}\n            ${uvs ? `let uv_index = (i / 3) * 2;\n            if uv_index < uvs.len() - 1 {\n                vertex_data.extend_from_slice(&uvs[uv_index..uv_index+2]);\n            }` : ''}\n        }\n        \n        let vertex_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {\n            label: Some(\"${meshName} Vertex Buffer\"),\n            contents: bytemuck::cast_slice(&vertex_data),\n            usage: wgpu::BufferUsages::VERTEX,\n        });\n        \n        ${indices ? `let index_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {\n            label: Some(\"${meshName} Index Buffer\"),\n            contents: bytemuck::cast_slice(&indices),\n            usage: wgpu::BufferUsages::INDEX,\n        });\n        \n        Self {\n            vertex_buffer,\n            index_buffer,\n            num_indices: indices.len() as u32,\n        }` : `Self {\n            vertex_buffer,\n            num_vertices: (positions.len() / 3) as u32,\n        }`}\n    }\n    \n    pub fn render<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n        render_pass.set_vertex_buffer(0, self.vertex_buffer.slice(..));\n        ${indices ? `render_pass.set_index_buffer(self.index_buffer.slice(..), wgpu::IndexFormat::Uint16);\n        render_pass.draw_indexed(0..self.num_indices, 0, 0..1);` : 'render_pass.draw(0..self.num_vertices, 0..1);'}\n    }\n}\n`;\n\n    case 'swift':\n      return `import Metal\nimport simd\n\n/// ${meshName} geometry definition for Metal\nclass ${meshName}Geometry {\n    private var vertexBuffer: MTLBuffer?\n    ${indices ? 'private var indexBuffer: MTLBuffer?' : ''}\n    ${indices ? 'private var indexCount: Int' : 'private var vertexCount: Int'}\n    \n    init(device: MTLDevice) {\n        // Position data\n        let positions: [Float] = [${positions.join(', ')}]\n        ${normals ? `let normals: [Float] = [${(normals || []).join(', ')}]` : ''}\n        ${uvs ? `let uvs: [Float] = [${(uvs || []).join(', ')}]` : ''}\n        ${indices ? `let indices: [UInt16] = [${indices.join(', ')}]` : ''}\n        \n        // Create vertex data\n        var vertexData: [Float] = []\n        for i in stride(from: 0, to: positions.count, by: 3) {\n            vertexData.append(contentsOf: [positions[i], positions[i+1], positions[i+2]])\n            ${normals ? `if i < normals.count - 2 {\n                vertexData.append(contentsOf: [normals[i], normals[i+1], normals[i+2]])\n            }` : ''}\n            ${uvs ? `let uvIndex = (i / 3) * 2\n            if uvIndex < uvs.count - 1 {\n                vertexData.append(contentsOf: [uvs[uvIndex], uvs[uvIndex+1]])\n            }` : ''}\n        }\n        \n        vertexBuffer = device.makeBuffer(\n            bytes: vertexData,\n            length: vertexData.count * MemoryLayout<Float>.size,\n            options: []\n        )\n        \n        ${indices ? `indexBuffer = device.makeBuffer(\n            bytes: indices,\n            length: indices.count * MemoryLayout<UInt16>.size,\n            options: []\n        )\n        indexCount = indices.count` : `vertexCount = positions.count / 3`}\n    }\n    \n    func render(renderEncoder: MTLRenderCommandEncoder) {\n        guard let vertexBuffer = vertexBuffer else { return }\n        \n        renderEncoder.setVertexBuffer(vertexBuffer, offset: 0, index: 0)\n        \n        ${indices ? `guard let indexBuffer = indexBuffer else { return }\n        renderEncoder.drawIndexedPrimitives(\n            type: .triangle,\n            indexCount: indexCount,\n            indexType: .uint16,\n            indexBuffer: indexBuffer,\n            indexBufferOffset: 0\n        )` : `renderEncoder.drawPrimitives(\n            type: .triangle,\n            vertexStart: 0,\n            vertexCount: vertexCount\n        )`}\n    }\n}\n`;\n\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateGeometryFile(meshName, geometry, 'typescript');\n  }\n}\n\n/**\n * Generates a mesh component that imports geometry from a separate file\n * Component name starts with capital letter as required by React\n */\nfunction generateMeshComponent(meshName: string, _geometry: THREE.BufferGeometry, displayMode: string, languageId: LanguageId): string {\n  switch (languageId) {\n    case 'typescript':\n    case 'javascript':\n      return `import React from 'react';\nimport { ${meshName}Geometry } from '../geometries/${meshName}Geometry';\n\ninterface ${meshName}Props {\n  [key: string]: any;\n}\n\n/**\n * ${meshName} component\n * Simple wrapper that uses pre-defined geometry\n * Easy to modify without touching geometry data\n */\nexport default function ${meshName}(props: ${meshName}Props) {\n  return <mesh geometry={${meshName}Geometry} {...props} />;\n}\n`;\n\n    case 'python':\n      return `\"\"\"${meshName} mesh component for ModernGL\"\"\"\nimport moderngl\nfrom .${meshName}Geometry import ${meshName}Geometry\n\nclass ${meshName}:\n    \"\"\"${meshName} mesh for ModernGL rendering\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context, material=None):\n        self.ctx = ctx\n        self.material = material\n        self.geometry = ${meshName}Geometry()\n        self.vao = None\n        \n    def setup_vao(self, program: moderngl.Program):\n        \"\"\"Setup vertex array object with the given shader program\"\"\"\n        self.vao = self.geometry.create_vao(self.ctx, program)\n    \n    def render(self, projection_matrix, view_matrix):\n        \"\"\"Render the mesh\"\"\"\n        if self.vao and self.material:\n            self.material.use()\n            # Set matrices if available\n            if hasattr(self.material, 'set_matrix'):\n                self.material.set_matrix('projection', projection_matrix)\n                self.material.set_matrix('view', view_matrix)\n            self.vao.render(moderngl.TRIANGLES)\n`;\n\n    case 'java':\n      return `/**\n * ${meshName} mesh component for LWJGL OpenGL\n */\npublic class ${meshName} {\n    private ${meshName}Geometry geometry;\n    private Material material;\n    \n    public ${meshName}(Material material) {\n        this.geometry = new ${meshName}Geometry();\n        this.material = material;\n    }\n    \n    public void render() {\n        if (material != null) {\n            material.use();\n        }\n        geometry.render();\n    }\n    \n    public void cleanup() {\n        geometry.cleanup();\n    }\n    \n    public ${meshName}Geometry getGeometry() {\n        return geometry;\n    }\n    \n    public void setMaterial(Material material) {\n        this.material = material;\n    }\n}\n`;\n\n    case 'csharp':\n      return `using OpenTK.Graphics.OpenGL4;\n\n/// <summary>\n/// ${meshName} mesh component for OpenTK\n/// </summary>\npublic class ${meshName} : System.IDisposable\n{\n    private ${meshName}Geometry _geometry;\n    private Material _material;\n    \n    public ${meshName}(Material material = null)\n    {\n        _geometry = new ${meshName}Geometry();\n        _material = material;\n    }\n    \n    public void Render()\n    {\n        _material?.Use();\n        _geometry.Render();\n    }\n    \n    public void Dispose()\n    {\n        _geometry?.Dispose();\n    }\n    \n    public ${meshName}Geometry Geometry => _geometry;\n    \n    public Material Material\n    {\n        get => _material;\n        set => _material = value;\n    }\n}\n`;\n\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateMeshComponent(meshName, _geometry, displayMode, 'typescript');\n  }\n}\n\n/**\n * Generates a material component based on display mode\n * Component name starts with capital letter as required by React\n */\nfunction generateMaterialComponent(\n  materialName: string,\n  material: THREE.Material,\n  displayMode: string,\n  languageId: LanguageId,\n  hasNormals: boolean = false,\n  hasUvs: boolean = false\n): string {\n  let materialType = 'MeshStandardMaterial';\n  const properties: string[] = [];\n\n  // Determine material type\n  if (material instanceof THREE.MeshBasicMaterial) materialType = 'MeshBasicMaterial';\n  else if (material instanceof THREE.MeshPhongMaterial) materialType = 'MeshPhongMaterial';\n  else if (material instanceof THREE.MeshLambertMaterial) materialType = 'MeshLambertMaterial';\n  else if (material instanceof THREE.MeshNormalMaterial) materialType = 'MeshNormalMaterial';\n  else if (material instanceof THREE.MeshDepthMaterial) materialType = 'MeshDepthMaterial';\n  else if (material instanceof THREE.MeshMatcapMaterial) materialType = 'MeshMatcapMaterial';\n  else if (material instanceof THREE.MeshToonMaterial) materialType = 'MeshToonMaterial';\n  else if (material instanceof THREE.MeshPhysicalMaterial) materialType = 'MeshPhysicalMaterial';\n\n  // Configure properties based on display mode\n  switch (displayMode) {\n    case 'wireframe':\n      properties.push('wireframe: true', 'transparent: true', 'opacity: 0.8');\n      break;\n    case 'solid':\n      properties.push('color: 0x888888', 'metalness: 0.1', 'roughness: 0.8');\n      break;\n    case 'normals':\n      materialType = 'MeshNormalMaterial';\n      break;\n    case 'depth':\n      materialType = 'MeshDepthMaterial';\n      break;\n    case 'points':\n      materialType = 'PointsMaterial';\n      properties.push('color: 0x00ff00', 'size: 0.01', 'sizeAttenuation: true');\n      break;\n    default:\n      properties.push(`color: new THREE.Color(${material.color.r}, ${material.color.g}, ${material.color.b})`);\n      if ('roughness' in material) properties.push(`roughness: ${(material as any).roughness}`);\n      if ('metalness' in material) properties.push(`metalness: ${(material as any).metalness}`);\n      if ('opacity' in material) properties.push(`opacity: ${(material as any).opacity}`);\n      if ('transparent' in material) properties.push(`transparent: ${(material as any).transparent}`);\n      break;\n  }\n\n  switch (languageId) {\n    case 'typescript':\n    case 'javascript':\n      return `import * as THREE from 'three';\n\n/**\n * ${materialName} material component\n */\nexport default function ${materialName}(): THREE.Material {\n  return new THREE.${materialType}({\n    ${properties.join(',\\n    ')}\n  });\n}\n`;\n\n    case 'python':\n      return `\"\"\"${materialName} material for ModernGL\"\"\"\nimport moderngl\nimport numpy as np\n\nclass ${materialName}:\n    \"\"\"${materialName} material for ModernGL\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context):\n        self.ctx = ctx\n        self.program = self._create_shader_program()\n        \n    def _create_shader_program(self) -> moderngl.Program:\n        vertex_shader = '''\n        #version 330 core\n        in vec3 in_position;\n        ${hasNormals ? 'in vec3 in_normal;' : ''}\n        ${hasUvs ? 'in vec2 in_uv;' : ''}\n        \n        uniform mat4 projection;\n        uniform mat4 view;\n        uniform mat4 model;\n        \n        out vec3 v_position;\n        ${hasNormals ? 'out vec3 v_normal;' : ''}\n        ${hasUvs ? 'out vec2 v_uv;' : ''}\n        \n        void main() {\n            v_position = in_position;\n            ${hasNormals ? 'v_normal = in_normal;' : ''}\n            ${hasUvs ? 'v_uv = in_uv;' : ''}\n            gl_Position = projection * view * model * vec4(in_position, 1.0);\n        }\n        '''\n        \n        fragment_shader = '''\n        #version 330 core\n        in vec3 v_position;\n        ${hasNormals ? 'in vec3 v_normal;' : ''}\n        ${hasUvs ? 'in vec2 v_uv;' : ''}\n        \n        out vec4 fragColor;\n        \n        void main() {\n            ${displayMode === 'wireframe' ? 'fragColor = vec4(0.0, 0.0, 0.0, 0.8);' :\n              displayMode === 'normals' ? 'fragColor = vec4(normalize(v_normal) * 0.5 + 0.5, 1.0);' :\n              displayMode === 'points' ? 'fragColor = vec4(0.0, 1.0, 0.0, 1.0);' :\n              'fragColor = vec4(0.5, 0.5, 0.5, 1.0);'}\n        }\n        '''\n        \n        return self.ctx.program(vertex_shader=vertex_shader, fragment_shader=fragment_shader)\n    \n    def use(self):\n        \"\"\"Activate this material for rendering\"\"\"\n        self.program.use()\n        \n    def set_matrix(self, name: str, matrix: np.ndarray):\n        \"\"\"Set a matrix uniform\"\"\"\n        if name in self.program:\n            self.program[name].write(matrix.astype(np.float32).tobytes())\n`;\n\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateMaterialComponent(materialName, material, displayMode, 'typescript', hasNormals, hasUvs);\n  }\n}\n\n/**\n * Generates the main index component that assembles all parts\n * Component name starts with capital letter as required by React\n */\nfunction generateIndexComponent(\n  componentName: string,\n  meshes: MeshData[],\n  materials: MaterialData[],\n  displayMode: string,\n  languageId: LanguageId\n): string {\n  const lang = LANGUAGES[languageId];\n  \n  switch (languageId) {\n    case 'typescript':\n    case 'javascript':\n      const meshImports = meshes.map(mesh => \n        `import ${mesh.name} from './meshes/${mesh.name}';`\n      ).join('\\n');\n      \n      const materialImports = materials.map(material => \n        `import ${material.name} from './materials/${material.name}';`\n      ).join('\\n');\n\n      const meshElements = meshes.map((mesh, i) => {\n        const material = materials[i % materials.length];\n        return `      <${mesh.name} material={${material.name}()} />`;\n      }).join('\\n');\n\n      return `import React, { useRef } from 'react';\nimport type { GroupProps } from '@react-three/fiber';\n${meshImports}\n${materialImports}\n\ninterface ${componentName}Props extends GroupProps {\n  [key: string]: any;\n}\n\n/**\n * ${componentName} component\n * Main component that assembles all mesh and material parts\n */\nexport default function ${componentName}(props: ${componentName}Props) {\n  const ref = useRef<THREE.Group>(null);\n  \n  return (\n    <group ref={ref} {...props}>\n${meshElements}\n    </group>\n  );\n}\n`;\n\n    case 'python':\n      return `\"\"\"${componentName} main component for ModernGL\"\"\"\nimport moderngl\nimport numpy as np\nfrom typing import List, Optional\n${meshes.map(mesh => `from .meshes.${mesh.name} import ${mesh.name}`).join('\\n')}\n${materials.map(material => `from .materials.${material.name} import ${material.name}`).join('\\n')}\n\nclass ${componentName}:\n    \"\"\"${componentName} component for ModernGL\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context):\n        self.ctx = ctx\n        self.meshes: List = []\n        self._setup_meshes()\n        \n    def _setup_meshes(self):\n        \"\"\"Initialize all meshes with their materials\"\"\"\n        ${meshes.map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `# Create ${mesh.name}\n        ${mesh.name.toLowerCase()}_material = ${material.name}(self.ctx)\n        ${mesh.name.toLowerCase()}_mesh = ${mesh.name}(self.ctx, ${mesh.name.toLowerCase()}_material)\n        self.meshes.append(${mesh.name.toLowerCase()}_mesh)`;\n        }).join('\\n        ')}\n    \n    def render(self, projection_matrix: np.ndarray, view_matrix: np.ndarray, model_matrix: Optional[np.ndarray] = None):\n        \"\"\"Render all meshes\"\"\"\n        if model_matrix is None:\n            model_matrix = np.eye(4, dtype=np.float32)\n            \n        for mesh in self.meshes:\n            mesh.render(projection_matrix, view_matrix)\n`;\n\n    case 'java':\n      return `/**\n * ${componentName} main component for LWJGL OpenGL\n */\n${meshes.map(mesh => `import meshes.${mesh.name};`).join('\\n')}\n${materials.map(material => `import materials.${material.name};`).join('\\n')}\n\npublic class ${componentName} {\n    ${meshes.map((mesh, i) => `private ${mesh.name} ${mesh.name.toLowerCase()};`).join('\\n    ')}\n    \n    public ${componentName}() {\n        setupMeshes();\n    }\n    \n    private void setupMeshes() {\n        ${meshes.map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `${mesh.name.toLowerCase()} = new ${mesh.name}(new ${material.name}());`;\n        }).join('\\n        ')}\n    }\n    \n    public void render() {\n        ${meshes.map(mesh => `${mesh.name.toLowerCase()}.render();`).join('\\n        ')}\n    }\n    \n    public void cleanup() {\n        ${meshes.map(mesh => `${mesh.name.toLowerCase()}.cleanup();`).join('\\n        ')}\n    }\n}\n`;\n\n    case 'csharp':\n      return `using System;\nusing System.Collections.Generic;\n${meshes.map(mesh => `using Meshes;`).join('\\n')}\n${materials.map(material => `using Materials;`).join('\\n')}\n\n/// <summary>\n/// ${componentName} main component for OpenTK\n/// </summary>\npublic class ${componentName} : IDisposable\n{\n    ${meshes.map((mesh, i) => `private ${mesh.name} _${mesh.name.toLowerCase()};`).join('\\n    ')}\n    \n    public ${componentName}()\n    {\n        SetupMeshes();\n    }\n    \n    private void SetupMeshes()\n    {\n        ${meshes.map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `_${mesh.name.toLowerCase()} = new ${mesh.name}(new ${material.name}());`;\n        }).join('\\n        ')}\n    }\n    \n    public void Render()\n    {\n        ${meshes.map(mesh => `_${mesh.name.toLowerCase()}.Render();`).join('\\n        ')}\n    }\n    \n    public void Dispose()\n    {\n        ${meshes.map(mesh => `_${mesh.name.toLowerCase()}?.Dispose();`).join('\\n        ')}\n    }\n}\n`;\n\n    case 'cpp':\n      return `#pragma once\n#include <vector>\n#include <memory>\n${meshes.map(mesh => `#include \"meshes/${mesh.name}.h\"`).join('\\n')}\n${materials.map(material => `#include \"materials/${material.name}.h\"`).join('\\n')}\n\n/**\n * ${componentName} main component for OpenGL\n */\nclass ${componentName} {\nprivate:\n    ${meshes.map((mesh, i) => `std::unique_ptr<${mesh.name}> ${mesh.name.toLowerCase()};`).join('\\n    ')}\n    \npublic:\n    ${componentName}() {\n        setupMeshes();\n    }\n    \n    ~${componentName}() {\n        cleanup();\n    }\n    \nprivate:\n    void setupMeshes() {\n        ${meshes.map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `${mesh.name.toLowerCase()} = std::make_unique<${mesh.name}>(std::make_unique<${material.name}>());`;\n        }).join('\\n        ')}\n    }\n    \npublic:\n    void render() {\n        ${meshes.map(mesh => `if (${mesh.name.toLowerCase()}) ${mesh.name.toLowerCase()}->render();`).join('\\n        ')}\n    }\n    \n    void cleanup() {\n        ${meshes.map(mesh => `${mesh.name.toLowerCase()}.reset();`).join('\\n        ')}\n    }\n};\n`;\n\n    case 'go':\n      return `package main\n\n${meshes.map(mesh => `import \"./meshes\"`).join('\\n')}\n${materials.map(material => `import \"./materials\"`).join('\\n')}\n\n// ${componentName} represents the main 3D component\ntype ${componentName} struct {\n    ${meshes.map((mesh, i) => `${mesh.name.toLowerCase()} *meshes.${mesh.name}`).join('\\n    ')}\n}\n\n// New${componentName} creates a new ${componentName} instance\nfunc New${componentName}() *${componentName} {\n    component := &${componentName}{}\n    component.setupMeshes()\n    return component\n}\n\nfunc (c *${componentName}) setupMeshes() {\n    ${meshes.map((mesh, i) => {\n      const material = materials[i % materials.length];\n      return `c.${mesh.name.toLowerCase()} = meshes.New${mesh.name}(materials.New${material.name}())`;\n    }).join('\\n    ')}\n}\n\n// Render renders all meshes in the component\nfunc (c *${componentName}) Render() {\n    ${meshes.map(mesh => `if c.${mesh.name.toLowerCase()} != nil {\n        c.${mesh.name.toLowerCase()}.Render()\n    }`).join('\\n    ')}\n}\n\n// Cleanup cleans up all resources\nfunc (c *${componentName}) Cleanup() {\n    ${meshes.map(mesh => `if c.${mesh.name.toLowerCase()} != nil {\n        c.${mesh.name.toLowerCase()}.Cleanup()\n    }`).join('\\n    ')}\n}\n`;\n\n    case 'rust':\n      return `${meshes.map(mesh => `use crate::meshes::${mesh.name.toLowerCase()}::${mesh.name};`).join('\\n')}\n${materials.map(material => `use crate::materials::${material.name.toLowerCase()}::${material.name};`).join('\\n')}\nuse wgpu::Device;\n\n/// ${componentName} main component for wgpu\npub struct ${componentName} {\n    ${meshes.map((mesh, i) => `${mesh.name.toLowerCase()}: ${mesh.name},`).join('\\n    ')}\n}\n\nimpl ${componentName} {\n    pub fn new(device: &Device) -> Self {\n        Self {\n            ${meshes.map((mesh, i) => {\n              const material = materials[i % materials.length];\n              return `${mesh.name.toLowerCase()}: ${mesh.name}::new(device, ${material.name}::new(device)),`;\n            }).join('\\n            ')}\n        }\n    }\n    \n    pub fn render<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n        ${meshes.map(mesh => `self.${mesh.name.toLowerCase()}.render(render_pass);`).join('\\n        ')}\n    }\n}\n`;\n\n    case 'swift':\n      return `import Metal\n${meshes.map(mesh => `import Meshes`).join('\\n')}\n${materials.map(material => `import Materials`).join('\\n')}\n\n/// ${componentName} main component for Metal\nclass ${componentName} {\n    ${meshes.map((mesh, i) => `private let ${mesh.name.toLowerCase()}: ${mesh.name}`).join('\\n    ')}\n    \n    init(device: MTLDevice) {\n        ${meshes.map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `${mesh.name.toLowerCase()} = ${mesh.name}(device: device, material: ${material.name}(device: device))`;\n        }).join('\\n        ')}\n    }\n    \n    func render(renderEncoder: MTLRenderCommandEncoder) {\n        ${meshes.map(mesh => `${mesh.name.toLowerCase()}.render(renderEncoder: renderEncoder)`).join('\\n        ')}\n    }\n}\n`;\n\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateIndexComponent(componentName, meshes, materials, displayMode, 'typescript');\n  }\n}\n\n// Fix the generateExamplePage function around line 900 to ensure proper file extensions\nfunction generateExamplePage(componentName: string, languageId: LanguageId): string {\n  const lang = LANGUAGES[languageId];\n  \n  switch (languageId) {\n    case 'typescript':\n    case 'javascript':\n      return `import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport ${componentName} from '@/components/${componentName}';\n\n/**\n * Example page demonstrating how to use the ${componentName} component\n */\nexport default function ${componentName}Page() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas \n        camera={{ position: [0, 0, 5], fov: 50 }}\n        gl={{\n          powerPreference: \"high-performance\",\n          antialias: true,\n          alpha: true\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${componentName} />\n        <OrbitControls \n          enableZoom\n          enablePan\n          enableRotate\n          minDistance={0.1}\n          maxDistance={100}\n        />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}\n`;\n\n    case 'python':\n      return `\"\"\"Example application for ${componentName}\"\"\"\nimport pyglet\nimport moderngl\nimport numpy as np\nfrom pyglet.window import key\nfrom pyrr import Matrix44\nfrom .${componentName} import ${componentName}\n\nclass ${componentName}App:\n    \"\"\"Example application for ModernGL implementation\"\"\"\n    \n    def __init__(self, width: int = 800, height: int = 600):\n        self.window = pyglet.window.Window(width, height, caption='${componentName} Viewer')\n        self.ctx = moderngl.create_context()\n        \n        # Create matrices\n        self.projection = Matrix44.perspective_projection(50, width/height, 0.1, 1000)\n        self.view = Matrix44.look_at([0, 0, 5], [0, 0, 0], [0, 1, 0])\n        \n        # Create the 3D component\n        self.scene = ${componentName}(self.ctx)\n        \n        # Animation state\n        self.rotation = 0\n        \n        # Set up event handlers\n        self.window.event(self.on_draw)\n        self.window.event(self.on_resize)\n        self.window.event(self.on_key_press)\n        \n    def on_draw(self):\n        \"\"\"Handle window draw event\"\"\"\n        self.window.clear()\n        self.ctx.enable(moderngl.DEPTH_TEST)\n        \n        # Update rotation\n        self.rotation += 0.5\n        model = Matrix44.from_y_rotation(np.radians(self.rotation))\n        \n        # Render the scene\n        self.scene.render(self.projection, self.view, model)\n        \n    def on_resize(self, width: int, height: int):\n        \"\"\"Handle window resize event\"\"\"\n        self.projection = Matrix44.perspective_projection(50, width/height, 0.1, 1000)\n        \n    def on_key_press(self, symbol: int, modifiers: int):\n        \"\"\"Handle key press events\"\"\"\n        if symbol == key.ESCAPE:\n            pyglet.app.exit()\n            \n    def run(self):\n        \"\"\"Start the application\"\"\"\n        pyglet.app.run()\n\nif __name__ == '__main__':\n    app = ${componentName}App()\n    app.run()\n`;\n\n    case 'java':\n      return `/**\n * Example application for ${componentName} using LWJGL\n */\nimport ${componentName};\nimport org.lwjgl.glfw.GLFW;\nimport org.lwjgl.opengl.GL;\nimport static org.lwjgl.opengl.GL11.*;\n\npublic class ${componentName}App {\n    private long window;\n    private ${componentName} model;\n    \n    public void run() {\n        init();\n        loop();\n        cleanup();\n    }\n    \n    private void init() {\n        // Initialize GLFW\n        if (!GLFW.glfwInit()) {\n            throw new IllegalStateException(\"Unable to initialize GLFW\");\n        }\n        \n        // Create window\n        window = GLFW.glfwCreateWindow(800, 600, \"${componentName} Viewer\", 0, 0);\n        if (window == 0) {\n            throw new RuntimeException(\"Failed to create the GLFW window\");\n        }\n        \n        GLFW.glfwMakeContextCurrent(window);\n        GL.createCapabilities();\n        \n        // Initialize model\n        model = new ${componentName}();\n        \n        // Enable depth testing\n        glEnable(GL_DEPTH_TEST);\n    }\n    \n    private void loop() {\n        while (!GLFW.glfwWindowShouldClose(window)) {\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n            \n            // Render model\n            model.render();\n            \n            GLFW.glfwSwapBuffers(window);\n            GLFW.glfwPollEvents();\n        }\n    }\n    \n    private void cleanup() {\n        model.cleanup();\n        GLFW.glfwTerminate();\n    }\n    \n    public static void main(String[] args) {\n        new ${componentName}App().run();\n    }\n}\n`;\n\n    case 'csharp':\n      return `using System;\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Windowing.Common;\nusing OpenTK.Windowing.Desktop;\n\n/// <summary>\n/// Example application for ${componentName} using OpenTK\n/// </summary>\npublic class ${componentName}App : GameWindow\n{\n    private ${componentName} _model;\n    \n    public ${componentName}App() : base(GameWindowSettings.Default, \n        new NativeWindowSettings()\n        {\n            Size = new OpenTK.Mathematics.Vector2i(800, 600),\n            Title = \"${componentName} Viewer\"\n        })\n    {\n    }\n    \n    protected override void OnLoad()\n    {\n        base.OnLoad();\n        \n        GL.ClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        GL.Enable(EnableCap.DepthTest);\n        \n        _model = new ${componentName}();\n    }\n    \n    protected override void OnRenderFrame(FrameEventArgs e)\n    {\n        base.OnRenderFrame(e);\n        \n        GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);\n        \n        _model.Render();\n        \n        SwapBuffers();\n    }\n    \n    protected override void OnUnload()\n    {\n        _model?.Dispose();\n        base.OnUnload();\n    }\n    \n    public static void Main()\n    {\n        using var app = new ${componentName}App();\n        app.Run();\n    }\n}\n`;\n\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateExamplePage(componentName, 'typescript');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1685, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/glb-convertor/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment, Html } from '@react-three/drei';\nimport { Download, Upload, Eye, Code, Loader2, AlertCircle, File, FileText, Folder, Layout, Languages, Package, Terminal, Copy, ChevronRight, ChevronDown, X } from 'lucide-react';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport JSZip from 'jszip';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { saveAs } from 'file-saver';\nimport { generateProjectStructure } from '@/app/lib/glb-converter';\nimport type { MeshData, MaterialData, ProjectStructure, GeometryData } from '@/app/types/glb-convertor';\n\n// Language configuration for syntax highlighting and code generation\nconst LANGUAGES = [\n  { id: 'typescript', name: 'TypeScript', extension: 'tsx', geometryExtension: 'ts', group: 'Web' },\n  { id: 'javascript', name: 'JavaScript', extension: 'jsx', geometryExtension: 'js', group: 'Web' },\n  { id: 'python', name: 'Python', extension: 'py', geometryExtension: 'py', group: 'General' },\n  { id: 'java', name: 'Java', extension: 'java', geometryExtension: 'java', group: 'General' },\n  { id: 'csharp', name: 'C#', extension: 'cs', geometryExtension: 'cs', group: 'General' },\n  { id: 'cpp', name: 'C++', extension: 'cpp', geometryExtension: 'h', group: 'Systems' },\n  { id: 'go', name: 'Go', extension: 'go', geometryExtension: 'go', group: 'Systems' },\n  { id: 'rust', name: 'Rust', extension: 'rs', geometryExtension: 'rs', group: 'Systems' },\n  { id: 'swift', name: 'Swift', extension: 'swift', geometryExtension: 'swift', group: 'Mobile' },\n  { id: 'kotlin', name: 'Kotlin', extension: 'kt', geometryExtension: 'kt', group: 'Mobile' },\n  { id: 'ruby', name: 'Ruby', extension: 'rb', geometryExtension: 'rb', group: 'Web' },\n  { id: 'php', name: 'PHP', extension: 'php', geometryExtension: 'php', group: 'Web' },\n  { id: 'scala', name: 'Scala', extension: 'scala', geometryExtension: 'scala', group: 'General' },\n  { id: 'dart', name: 'Dart', extension: 'dart', geometryExtension: 'dart', group: 'Mobile' },\n  { id: 'r', name: 'R', extension: 'R', geometryExtension: 'R', group: 'Data Science' }\n] as const;\ntype LanguageId = typeof LANGUAGES[number]['id'];\n\n// Language-specific setup instructions and dependencies\nconst LANGUAGE_SETUP = {\n  typescript: {\n    packageManager: 'npm',\n    dependencies: [\n      'three',\n      '@react-three/fiber',\n      '@react-three/drei',\n      'react',\n      'react-dom',\n      '@types/three'\n    ],\n    devDependencies: [\n      'typescript',\n      '@types/react',\n      '@types/react-dom'\n    ],\n    installCommand: 'npm install three @react-three/fiber @react-three/drei react react-dom @types/three',\n    devInstallCommand: 'npm install -D typescript @types/react @types/react-dom',\n    setupSteps: [\n      'Create a new Next.js project with TypeScript',\n      'Install the required dependencies',\n      'Extract the downloaded component files to your project',\n      'Import and use the component in your pages'\n    ],\n    importExample: `import ${'{componentName}'} from '@/components/${'{componentName}'}';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nexport default function ModelPage() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas camera={{ '{' } position: [0, 0, 5], fov: 50 {'}'} >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${'{componentName}'} />\n        <OrbitControls />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`,\n    customizationExample: `// Access individual parts\nimport { MeshName } from '@/components/${'{componentName}'}/meshes/MeshName';\nimport { MeshNameGeometry } from '@/components/${'{componentName}'}/geometries/MeshNameGeometry';\nimport MaterialName from '@/components/${'{componentName}'}/materials/MaterialName';\nfunction CustomModel() {\n  return (\n    <group>\n      <mesh geometry={MeshNameGeometry} material={MaterialName()} />\n    </group>\n  );\n}`\n  },\n  javascript: {\n    packageManager: 'npm',\n    dependencies: [\n      'three',\n      '@react-three/fiber',\n      '@react-three/drei',\n      'react',\n      'react-dom'\n    ],\n    devDependencies: [],\n    installCommand: 'npm install three @react-three/fiber @react-three/drei react react-dom',\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new React project',\n      'Install the required dependencies',\n      'Extract the downloaded component files to your project',\n      'Import and use the component in your pages'\n    ],\n    importExample: `import ${'{componentName}'} from './components/${'{componentName}'}';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nexport default function ModelPage() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${'{componentName}'} />\n        <OrbitControls />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`,\n    customizationExample: `// Access individual parts\nimport { MeshName } from './components/${'{componentName}'}/meshes/MeshName';\nimport { MeshNameGeometry } from './components/${'{componentName}'}/geometries/MeshNameGeometry';\nimport MaterialName from './components/${'{componentName}'}/materials/MaterialName';\nfunction CustomModel() {\n  return (\n    <group>\n      <mesh geometry={MeshNameGeometry} material={MaterialName()} />\n    </group>\n  );\n}`\n  },\n  python: {\n    packageManager: 'pip',\n    dependencies: [\n      'moderngl',\n      'pyglet',\n      'numpy',\n      'pyrr'\n    ],\n    devDependencies: [],\n    installCommand: 'pip install moderngl pyglet numpy pyrr',\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Python project',\n      'Install the required dependencies',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `from ${'{componentName}'} import ${'{componentName}'}\nimport pyglet\nimport moderngl\nfrom pyrr import Matrix44\nclass ModelApp:\n    def __init__(self):\n        self.window = pyglet.window.Window(800, 600, caption='${'{componentName}'} Viewer')\n        self.ctx = moderngl.create_context()\n        self.scene = ${'{componentName}'}(self.ctx)\n    def run(self):\n        pyglet.app.run()\nif __name__ == '__main__':\n    app = ModelApp()\n    app.run()`,\n    customizationExample: `# Access individual parts\nfrom meshes.MeshName import MeshName\nfrom geometries.MeshNameGeometry import MeshNameGeometry\nfrom materials.MaterialName import MaterialName\nclass CustomModel:\n    def __init__(self, ctx):\n        self.geometry = MeshNameGeometry()\n        self.material = MaterialName(ctx)\n        self.mesh = MeshName(ctx, self.material)`\n  },\n  java: {\n    packageManager: 'maven/gradle',\n    dependencies: [\n      'org.lwjgl:lwjgl:3.3.3',\n      'org.lwjgl:lwjgl-opengl:3.3.3',\n      'org.lwjgl:lwjgl-glfw:3.3.3'\n    ],\n    devDependencies: [],\n    installCommand: `// Maven\n<dependency>\n    <groupId>org.lwjgl</groupId>\n    <artifactId>lwjgl</artifactId>\n    <version>3.3.3</version>\n</dependency>\n// Gradle\nimplementation 'org.lwjgl:lwjgl:3.3.3'\nimplementation 'org.lwjgl:lwjgl-opengl:3.3.3'`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Java project with Maven or Gradle',\n      'Add LWJGL dependencies to your build file',\n      'Extract the downloaded component files to your src folder',\n      'Run the example application'\n    ],\n    importExample: `import ${'{componentName}'};\npublic class ModelApp {\n    public static void main(String[] args) {\n        // Initialize LWJGL and OpenGL context\n        // Create and render the model\n        ${'{componentName}'} model = new ${'{componentName}'}();\n        model.render();\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName;\nimport geometries.MeshNameGeometry;\nimport materials.MaterialName;\npublic class CustomModel {\n    private MeshNameGeometry geometry;\n    private MaterialName material;\n    public CustomModel() {\n        this.geometry = new MeshNameGeometry();\n        this.material = new MaterialName();\n    }\n}`\n  },\n  csharp: {\n    packageManager: 'NuGet',\n    dependencies: [\n      'OpenTK',\n      'OpenTK.Graphics',\n      'OpenTK.Mathematics'\n    ],\n    devDependencies: [],\n    installCommand: 'dotnet add package OpenTK --version 4.8.2',\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new .NET project',\n      'Install OpenTK via NuGet',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `using ${'{componentName}'};\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Windowing.Desktop;\nclass Program\n{\n    static void Main()\n    {\n        var model = new ${'{componentName}'}();\n        model.Render();\n    }\n}`,\n    customizationExample: `// Access individual parts\nusing Meshes;\nusing Geometries;\nusing Materials;\npublic class CustomModel\n{\n    private MeshNameGeometry geometry;\n    private MaterialName material;\n    public CustomModel()\n    {\n        geometry = new MeshNameGeometry();\n        material = new MaterialName();\n    }\n}`\n  },\n  cpp: {\n    packageManager: 'vcpkg/conan',\n    dependencies: [\n      'glew',\n      'glfw3',\n      'glm'\n    ],\n    devDependencies: [],\n    installCommand: `// vcpkg\nvcpkg install glew glfw3 glm\n// Or with CMake\nfind_package(glfw3 REQUIRED)\nfind_package(GLEW REQUIRED)\nfind_package(glm REQUIRED)`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new C++ project with CMake',\n      'Install OpenGL dependencies (GLEW, GLFW, GLM)',\n      'Extract the downloaded component files to your project',\n      'Compile and run the example application'\n    ],\n    importExample: `#include \"${'{componentName}'}.h\"\n#include <GL/glew.h>\n#include <GLFW/glfw3.h>\nint main() {\n    // Initialize GLFW and OpenGL\n    glfwInit();\n    GLFWwindow* window = glfwCreateWindow(800, 600, \"${'{componentName}'} Viewer\", NULL, NULL);\n    glfwMakeContextCurrent(window);\n    glewInit();\n    ${'{componentName}'} model;\n    while (!glfwWindowShouldClose(window)) {\n        model.render();\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n    return 0;\n}`,\n    customizationExample: `// Access individual parts\n#include \"meshes/MeshName.h\"\n#include \"geometries/MeshNameGeometry.h\"\n#include \"materials/MaterialName.h\"\nclass CustomModel {\nprivate:\n    MeshNameGeometry geometry;\n    MaterialName material;\npublic:\n    CustomModel() : geometry(), material() {}\n    void render() { /* custom rendering */ }\n};`\n  },\n  go: {\n    packageManager: 'go mod',\n    dependencies: [\n      'github.com/go-gl/gl/v4.1-core/gl',\n      'github.com/go-gl/glfw/v3.3/glfw',\n      'github.com/go-gl/mathgl/mgl32'\n    ],\n    devDependencies: [],\n    installCommand: `go mod init your-project\ngo get github.com/go-gl/gl/v4.1-core/gl\ngo get github.com/go-gl/glfw/v3.3/glfw\ngo get github.com/go-gl/mathgl/mgl32`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Go module',\n      'Install OpenGL dependencies',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `package main\nimport (\n    \"./${'{componentName}'}\"\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"github.com/go-gl/glfw/v3.3/glfw\"\n)\nfunc main() {\n    // Initialize GLFW and OpenGL\n    glfw.Init()\n    defer glfw.Terminate()\n    window, _ := glfw.CreateWindow(800, 600, \"${'{componentName}'} Viewer\", nil, nil)\n    window.MakeContextCurrent()\n    gl.Init()\n    model := ${'{componentName}'}.New${'{componentName}'}()\n    for !window.ShouldClose() {\n        model.Render()\n        window.SwapBuffers()\n        glfw.PollEvents()\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport (\n    \"./meshes\"\n    \"./geometries\"\n    \"./materials\"\n)\ntype CustomModel struct {\n    geometry *geometries.MeshNameGeometry\n    material *materials.MaterialName\n}\nfunc NewCustomModel() *CustomModel {\n    return &CustomModel{\n        geometry: geometries.NewMeshNameGeometry(),\n        material: materials.NewMaterialName(),\n    }\n}`\n  },\n  rust: {\n    packageManager: 'cargo',\n    dependencies: [\n      'wgpu',\n      'winit',\n      'bytemuck',\n      'glam'\n    ],\n    devDependencies: [],\n    installCommand: `# Add to Cargo.toml\n[dependencies]\nwgpu = \"0.18\"\nwinit = \"0.28\"\nbytemuck = \"1.14\"\nglam = \"0.24\"`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Rust project with Cargo',\n      'Add wgpu dependencies to Cargo.toml',\n      'Extract the downloaded component files to your src folder',\n      'Run the example application'\n    ],\n    importExample: `use ${'{componentName}'}::${'{componentName}'};\nuse wgpu::Device;\nuse winit::event_loop::EventLoop;\nfn main() {\n    let event_loop = EventLoop::new();\n    // Initialize wgpu and create device\n    let device = /* initialize device */;\n    let model = ${'{componentName}'}::new(&device);\n    event_loop.run(move |event, _, control_flow| {\n        // Render model\n        model.render(&mut render_pass);\n    });\n}`,\n    customizationExample: `// Access individual parts\nuse meshes::MeshName;\nuse geometries::MeshNameGeometry;\nuse materials::MaterialName;\nstruct CustomModel {\n    geometry: MeshNameGeometry,\n    material: MaterialName,\n}\nimpl CustomModel {\n    fn new(device: &Device) -> Self {\n        Self {\n            geometry: MeshNameGeometry::new(device),\n            material: MaterialName::new(device),\n        }\n    }\n}`\n  },\n  swift: {\n    packageManager: 'Swift Package Manager',\n    dependencies: [\n      'Metal',\n      'MetalKit',\n      'simd'\n    ],\n    devDependencies: [],\n    installCommand: `// Add to Package.swift\ndependencies: [\n    .package(url: \"https://github.com/apple/swift-numerics\", from: \"1.0.0\")\n]`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new iOS/macOS project',\n      'Import Metal and MetalKit frameworks',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `import ${'{componentName}'}\nimport Metal\nimport MetalKit\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        guard let device = MTLCreateSystemDefaultDevice() else { return }\n        let model = ${'{componentName}'}(device: device)\n        // Setup Metal rendering\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport Meshes\nimport Geometries\nimport Materials\nclass CustomModel {\n    private let geometry: MeshNameGeometry\n    private let material: MaterialName\n    init(device: MTLDevice) {\n        geometry = MeshNameGeometry(device: device)\n        material = MaterialName(device: device)\n    }\n}`\n  },\n  kotlin: {\n    packageManager: 'Gradle',\n    dependencies: [\n      'org.lwjgl:lwjgl:3.3.3',\n      'org.lwjgl:lwjgl-opengl:3.3.3'\n    ],\n    devDependencies: [],\n    installCommand: `// build.gradle.kts\ndependencies {\n    implementation(\"org.lwjgl:lwjgl:3.3.3\")\n    implementation(\"org.lwjgl:lwjgl-opengl:3.3.3\")\n}`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Kotlin project with Gradle',\n      'Add LWJGL dependencies',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `import ${'{componentName}'}\nimport org.lwjgl.opengl.GL\nfun main() {\n    // Initialize LWJGL and OpenGL\n    val model = ${'{componentName}'}()\n    // Render loop\n    model.render()\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName\nimport geometries.MeshNameGeometry\nimport materials.MaterialName\nclass CustomModel {\n    private val geometry = MeshNameGeometry()\n    private val material = MaterialName()\n    fun render() {\n        // Custom rendering logic\n    }\n}`\n  },\n  ruby: {\n    packageManager: 'gem',\n    dependencies: [\n      'opengl',\n      'glfw',\n      'matrix'\n    ],\n    devDependencies: [],\n    installCommand: 'gem install opengl glfw matrix',\n    devInstallCommand: '',\n    setupSteps: [\n      'Install Ruby and required gems',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `require './${'{componentName}'}'\nrequire 'opengl'\nrequire 'glfw'\nclass ModelApp\n  def initialize\n    @model = ${'{componentName}'}::${'{componentName}'}.new\n  end\n  def run\n    # Initialize OpenGL and render\n    @model.render\n  end\nend\napp = ModelApp.new\napp.run`,\n    customizationExample: `# Access individual parts\nrequire './meshes/mesh_name'\nrequire './geometries/mesh_name_geometry'\nrequire './materials/material_name'\nclass CustomModel\n  def initialize\n    @geometry = MeshNameGeometry.new\n    @material = MaterialName.new\n  end\nend`\n  },\n  php: {\n    packageManager: 'composer',\n    dependencies: [\n      'php-opengl/opengl',\n      'php-gl/math'\n    ],\n    devDependencies: [],\n    installCommand: 'composer require php-opengl/opengl php-gl/math',\n    devInstallCommand: '',\n    setupSteps: [\n      'Install PHP and Composer',\n      'Install OpenGL PHP extensions',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `<?php\nrequire_once './${'{componentName}'}.php';\nuse OpenGL\\\\GL;\nclass ModelApp {\n    private $model;\n    public function __construct() {\n        $this->model = new ${'{componentName}'}();\n    }\n    public function run() {\n        $this->model->render();\n    }\n}\n$app = new ModelApp();\n$app->run();`,\n    customizationExample: `<?php\n// Access individual parts\nrequire_once './meshes/MeshName.php';\nrequire_once './geometries/MeshNameGeometry.php';\nrequire_once './materials/MaterialName.php';\nclass CustomModel {\n    private $geometry;\n    private $material;\n    public function __construct() {\n        $this->geometry = new MeshNameGeometry();\n        $this->material = new MaterialName();\n    }\n}`\n  },\n  scala: {\n    packageManager: 'sbt',\n    dependencies: [\n      'org.lwjgl:lwjgl:3.3.3',\n      'org.lwjgl:lwjgl-opengl:3.3.3'\n    ],\n    devDependencies: [],\n    installCommand: `// build.sbt\nlibraryDependencies ++= Seq(\n  \"org.lwjgl\" % \"lwjgl\" % \"3.3.3\",\n  \"org.lwjgl\" % \"lwjgl-opengl\" % \"3.3.3\"\n)`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Scala project with sbt',\n      'Add LWJGL dependencies to build.sbt',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `import ${'{componentName}'}._\nimport org.lwjgl.opengl.GL\nobject ModelApp extends App {\n  // Initialize LWJGL and OpenGL\n  val model = new ${'{componentName}'}()\n  // Render loop\n  model.render()\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName\nimport geometries.MeshNameGeometry\nimport materials.MaterialName\nclass CustomModel {\n  private val geometry = new MeshNameGeometry()\n  private val material = new MaterialName()\n  def render(): Unit = {\n    // Custom rendering logic\n  }\n}`\n  },\n  dart: {\n    packageManager: 'pub',\n    dependencies: [\n      'flutter',\n      'vector_math',\n      'flutter_gl'\n    ],\n    devDependencies: [],\n    installCommand: `# pubspec.yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  vector_math: ^2.1.4\n  flutter_gl: ^0.0.1`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Flutter project',\n      'Add dependencies to pubspec.yaml',\n      'Extract the downloaded component files to your lib folder',\n      'Run the example application'\n    ],\n    importExample: `import 'package:flutter/material.dart';\nimport './${'{componentName}'}.dart';\nclass ModelPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ${'{componentName}'}(),\n    );\n  }\n}`,\n    customizationExample: `// Access individual parts\nimport './meshes/mesh_name.dart';\nimport './geometries/mesh_name_geometry.dart';\nimport './materials/material_name.dart';\nclass CustomModel {\n  final MeshNameGeometry geometry;\n  final MaterialName material;\n  CustomModel() : \n    geometry = MeshNameGeometry(),\n    material = MaterialName();\n}`\n  },\n  r: {\n    packageManager: 'CRAN',\n    dependencies: [\n      'rgl',\n      'geometry',\n      'matrix'\n    ],\n    devDependencies: [],\n    installCommand: 'install.packages(c(\"rgl\", \"geometry\", \"matrix\"))',\n    devInstallCommand: '',\n    setupSteps: [\n      'Install R and required packages',\n      'Extract the downloaded component files to your project',\n      'Source the example script'\n    ],\n    importExample: `library(rgl)\nsource(\"./${'{componentName}'}.R\")\n# Create and display the model\nmodel <- ${'{componentName}'}$new()\nmodel$render()`,\n    customizationExample: `# Access individual parts\nsource(\"./meshes/MeshName.R\")\nsource(\"./geometries/MeshNameGeometry.R\")\nsource(\"./materials/MaterialName.R\")\nCustomModel <- setRefClass(\"CustomModel\",\n  fields = list(\n    geometry = \"MeshNameGeometry\",\n    material = \"MaterialName\"\n  ),\n  methods = list(\n    initialize = function() {\n      geometry <<- MeshNameGeometry$new()\n      material <<- MaterialName$new()\n    }\n  )\n)`\n  }\n};\n\n// Copy to clipboard function\nconst copyToClipboard = (text: string) => {\n  navigator.clipboard.writeText(text).then(() => {\n    // You could add a toast notification here\n    console.log('Copied to clipboard');\n  });\n};\n\n// VS Code-like editor component with syntax highlighting\nfunction CodeEditor({ code, languageId }: { code: string; languageId: LanguageId }) {\n  const language = LANGUAGES.find(lang => lang.id === languageId);\n  const lines = code.split('\\n');\n  const getSyntaxClass = (line: string): string => {\n    if (line.trim().startsWith('//') || line.trim().startsWith('#')) {\n      return 'text-[#6A9955]'; // Comments\n    }\n    if (line.includes('import') || line.includes('from') || line.includes('require')) {\n      return 'text-[#C586C0]'; // Imports\n    }\n    if (line.includes('function') || line.includes('def') || line.includes('class')) {\n      return 'text-[#569CD6]'; // Keywords\n    }\n    if (line.includes('const') || line.includes('let') || line.includes('var') || line.includes('final') || line.includes('static') || line.includes('public')) {\n      return 'text-[#9CDCFE]'; // Variables\n    }\n    if (line.includes('{') || line.includes('}') || line.includes('[') || line.includes(']') || line.includes('(') || line.includes(')')) {\n      return 'text-[#D4D4D4]'; // Brackets\n    }\n    if (line.includes('=') || line.includes('+') || line.includes('-') || line.includes('*') || line.includes('/') || line.includes('%')) {\n      return 'text-[#D4D4D4]'; // Operators\n    }\n    if (line.includes('\"') || line.includes(\"'\") || line.includes('`')) {\n      return 'text-[#CE9178]'; // Strings\n    }\n    if (!isNaN(Number(line.trim())) || line.trim().match(/0x[0-9A-Fa-f]+/)) {\n      return 'text-[#B5CEA8]'; // Numbers\n    }\n    return 'text-[#D4D4D4]'; // Default\n  };\n\n  return (\n    <div className=\"bg-[#1E1E1E] rounded-lg overflow-hidden font-mono text-sm h-full flex flex-col\">\n      <div className=\"bg-[#252526] px-4 py-2 flex items-center justify-between border-b border-[#333333]\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-full bg-[#FF5F56]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#FFBD2E]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#27C93F]\"></div>\n        </div>\n        <div className=\"text-[#CCCCCC] text-xs flex items-center gap-2\">\n          <span>{language?.name}</span>\n          <span className=\"text-[#858585]\">●</span>\n          <span className=\"text-[#858585]\">{lines.length} lines</span>\n          <button\n            onClick={() => copyToClipboard(code)}\n            className=\"ml-2 p-1 hover:bg-[#404040] rounded\"\n            title=\"Copy to clipboard\"\n          >\n            <Copy className=\"w-3 h-3\" />\n          </button>\n        </div>\n      </div>\n      <div className=\"flex-1 overflow-auto p-4\">\n        <div className=\"flex\">\n          <div className=\"text-[#858585] w-8 select-none flex-shrink-0 pr-4 text-right\">\n            {lines.map((_, i) => (\n              <div key={i} className=\"select-none\">{i + 1}</div>\n            ))}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            {lines.map((line, i) => (\n              <div key={i} className={`whitespace-pre ${getSyntaxClass(line)}`}>\n                {line}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Language selector component with grouping\nfunction LanguageSelector({ \n  selectedLanguage, \n  onChange \n}: { \n  selectedLanguage: LanguageId; \n  onChange: (language: LanguageId) => void \n}) {\n  const groups = Array.from(new Set(LANGUAGES.map(lang => lang.group)));\n  return (\n    <div className=\"relative\">\n      <div className=\"flex items-center gap-2\">\n        <Languages className=\"w-4 h-4 text-purple-400\" />\n        <select\n          value={selectedLanguage}\n          onChange={(e) => onChange(e.target.value as LanguageId)}\n          className=\"bg-[#252526] text-white px-3 py-1.5 rounded border border-[#3c3c3c] focus:border-purple-500 outline-none text-sm appearance-none pr-8 bg-[url('data:image/svg+xml;utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 24 24%22 fill=%22%239CA3AF%22><path d=%22M7 10l5 5 5-5z%22/></svg>')] bg-no-repeat bg-[right_0.5rem_center] bg-[length:1rem] cursor-pointer\"\n        >\n          {groups.map(group => (\n            <optgroup key={group} label={group}>\n              {LANGUAGES.filter(lang => lang.group === group).map(lang => (\n                <option key={lang.id} value={lang.id}>\n                  {lang.name}\n                </option>\n              ))}\n            </optgroup>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n}\n\n// File tree component for VS Code sidebar\nfunction FileTree({ \n  projectStructure, \n  selectedLanguage,\n  onSelectFile,\n  expandedFolders,\n  toggleFolder,\n  activeFile\n}: { \n  projectStructure: ProjectStructure | null;\n  selectedLanguage: LanguageId;\n  onSelectFile: (path: string, content: string) => void;\n  expandedFolders: Record<string, boolean>;\n  toggleFolder: (folder: string) => void;\n  activeFile: string | null;\n}) {\n  if (!projectStructure) return null;\n  \n  const lang = LANGUAGES.find(l => l.id === selectedLanguage);\n  if (!lang) return null;\n  \n  const getIcon = (fileName: string) => {\n    if (fileName.includes('Geometry')) return 'text-cyan-400';\n    if (fileName.includes('index')) return 'text-green-400';\n    if (fileName.includes('meshes')) return 'text-cyan-400';\n    if (fileName.includes('geometries')) return 'text-cyan-400';\n    if (fileName.includes('materials')) return 'text-orange-400';\n    if (fileName.includes('page')) return 'text-purple-400';\n    return 'text-white';\n  };\n\n  return (\n    <div className=\"text-sm\">\n      <div \n        className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n        onClick={() => toggleFolder('components')}\n      >\n        {expandedFolders.components ? <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" /> : <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />}\n        <Folder className=\"w-4 h-4 mr-2 text-yellow-400\" />\n        <span className=\"text-[#C5C5C5]\">components</span>\n      </div>\n      \n      {expandedFolders.components && (\n        <div className=\"pl-4\">\n          <div \n            className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n            onClick={() => toggleFolder('componentName')}\n          >\n            {expandedFolders.componentName ? <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" /> : <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />}\n            <Folder className=\"w-4 h-4 mr-2 text-blue-400\" />\n            <span className=\"text-[#C5C5C5]\">Model</span>\n          </div>\n          \n          {expandedFolders.componentName && (\n            <div className=\"pl-4\">\n              <div \n                className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                  activeFile === 'index' ? 'bg-[#2A2D2E]' : ''\n                }`}\n                onClick={() => onSelectFile('index', projectStructure.indexContent)}\n              >\n                <FileText className={`w-4 h-4 mr-2 ${getIcon('index')}`} />\n                <span className=\"text-[#C5C5C5]\">index.{lang.extension}</span>\n              </div>\n              \n              <div \n                className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n                onClick={() => toggleFolder('geometries')}\n              >\n                {expandedFolders.geometries ? <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" /> : <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />}\n                <Folder className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                <span className=\"text-[#C5C5C5]\">geometries</span>\n              </div>\n              \n              {expandedFolders.geometries && (\n                <div className=\"pl-4\">\n                  {projectStructure.geometries?.map((geometry, i) => (\n                    <div \n                      key={i}\n                      className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                        activeFile === `geometry-${i}` ? 'bg-[#2A2D2E]' : ''\n                      }`}\n                      onClick={() => onSelectFile(`geometry-${i}`, geometry.content)}\n                    >\n                      <File className={`w-4 h-4 mr-2 ${getIcon(geometry.name)}`} />\n                      <span className=\"text-[#C5C5C5]\">{geometry.name}Geometry.{lang.geometryExtension}</span>\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              <div \n                className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n                onClick={() => toggleFolder('meshes')}\n              >\n                {expandedFolders.meshes ? <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" /> : <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />}\n                <Folder className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                <span className=\"text-[#C5C5C5]\">meshes</span>\n              </div>\n              \n              {expandedFolders.meshes && (\n                <div className=\"pl-4\">\n                  {projectStructure.meshes.map((mesh, i) => (\n                    <div \n                      key={i}\n                      className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                        activeFile === `mesh-${i}` ? 'bg-[#2A2D2E]' : ''\n                      }`}\n                      onClick={() => onSelectFile(`mesh-${i}`, mesh.content)}\n                    >\n                      <File className={`w-4 h-4 mr-2 ${getIcon(mesh.name)}`} />\n                      <span className=\"text-[#C5C5C5]\">{mesh.name}.{lang.extension}</span>\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              <div \n                className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n                onClick={() => toggleFolder('materials')}\n              >\n                {expandedFolders.materials ? <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" /> : <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />}\n                <Folder className=\"w-4 h-4 mr-2 text-orange-400\" />\n                <span className=\"text-[#C5C5C5]\">materials</span>\n              </div>\n              \n              {expandedFolders.materials && (\n                <div className=\"pl-4\">\n                  {projectStructure.materials.map((material, i) => (\n                    <div \n                      key={i}\n                      className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                        activeFile === `material-${i}` ? 'bg-[#2A2D2E]' : ''\n                      }`}\n                      onClick={() => onSelectFile(`material-${i}`, material.content)}\n                    >\n                      <File className={`w-4 h-4 mr-2 ${getIcon(material.name)}`} />\n                      <span className=\"text-[#C5C5C5]\">{material.name}.{lang.extension}</span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n      \n      <div \n        className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n        onClick={() => toggleFolder('app')}\n      >\n        {expandedFolders.app ? <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" /> : <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />}\n        <Folder className=\"w-4 h-4 mr-2 text-purple-400\" />\n        <span className=\"text-[#C5C5C5]\">app</span>\n      </div>\n      \n      {expandedFolders.app && (\n        <div className=\"pl-4\">\n          <div \n            className=\"flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded\"\n            onClick={() => toggleFolder('modelPage')}\n          >\n            {expandedFolders.modelPage ? <ChevronDown className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" /> : <ChevronRight className=\"w-3 h-3 mr-1 text-[#C5C5C5]\" />}\n            <Folder className=\"w-4 h-4 mr-2 text-blue-400\" />\n            <span className=\"text-[#C5C5C5]\">model-page</span>\n          </div>\n          \n          {expandedFolders.modelPage && (\n            <div className=\"pl-4\">\n              <div \n                className={`flex items-center px-3 py-1 hover:bg-[#2A2D2E] cursor-pointer rounded ${\n                  activeFile === 'examplePage' ? 'bg-[#2A2D2E]' : ''\n                }`}\n                onClick={() => onSelectFile('examplePage', projectStructure.examplePageContent)}\n              >\n                <FileText className={`w-4 h-4 mr-2 ${getIcon('page')}`} />\n                <span className=\"text-[#C5C5C5]\">page.{lang.extension}</span>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function GLBConverter() {\n  const [file, setFile] = useState<File | null>(null);\n  const [modelUrl, setModelUrl] = useState('');\n  const [projectStructure, setProjectStructure] = useState<ProjectStructure | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState('');\n  const [activeTab, setActiveTab] = useState<'upload' | 'preview' | 'code'>('upload');\n  const [gltfData, setGltfData] = useState<any>(null);\n  // Display options\n  const [displayMode, setDisplayMode] = useState<'original' | 'wireframe' | 'solid' | 'normals' | 'depth' | 'points'>('original');\n  const [autoRotate, setAutoRotate] = useState(true);\n  const [showGrid, setShowGrid] = useState(false);\n  const [showAxes, setShowAxes] = useState(false);\n  const [componentName, setComponentName] = useState('Model');\n  const [selectedLanguage, setSelectedLanguage] = useState<LanguageId>('typescript');\n  const [expandedFolders, setExpandedFolders] = useState({\n    components: true,\n    componentName: true,\n    geometries: false,\n    meshes: true,\n    materials: false,\n    app: true,\n    modelPage: true\n  });\n  const [activeFile, setActiveFile] = useState<string | null>('index');\n  const [currentFileContent, setCurrentFileContent] = useState('');\n  \n  useEffect(() => {\n    if (projectStructure) {\n      setCurrentFileContent(projectStructure.indexContent);\n    }\n  }, [projectStructure]);\n  \n  const toggleFolder = (folder: keyof typeof expandedFolders) => {\n    setExpandedFolders(prev => ({\n      ...prev,\n      [folder]: !prev[folder]\n    }));\n  };\n  \n  const handleFileSelect = (path: string, content: string) => {\n    setActiveFile(path);\n    setCurrentFileContent(content);\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const uploadedFile = event.target.files?.[0];\n    if (uploadedFile && uploadedFile.name.endsWith('.glb')) {\n      setFile(uploadedFile);\n      setError('');\n      setIsLoading(true);\n      setProgress(0);\n      try {\n        // Create object URL for preview\n        const url = URL.createObjectURL(uploadedFile);\n        setModelUrl(url);\n        // Load GLTF with progress tracking for large files\n        await loadGLTFWithProgress(url, uploadedFile);\n        // Generate component name from filename\n        const name = uploadedFile.name.replace('.glb', '').replace(/[^a-zA-Z0-9]/g, '');\n        const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n        setComponentName(capitalizedName);\n        setActiveTab('preview');\n      } catch (err) {\n        console.error(\"Error loading GLTF\", err);\n        setError('Error processing GLB file. The file may be too large or corrupted.');\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setError('Please upload a valid .glb file');\n    }\n  };\n\n  const loadGLTFWithProgress = async (url: string, file: File): Promise<void> => {\n    setIsProcessing(true);\n    setProgress(0);\n    return new Promise<void>((resolve, reject) => {\n      try {\n        // Set up DRACO decoder for compressed models (common in large GLBs)\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\n        // Track progress for large files\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onload = function() {\n          if (xhr.status === 200) {\n            try {\n              // Process the GLB data\n              const loader = new GLTFLoader();\n              loader.setDRACOLoader(dracoLoader);\n              loader.parse(\n                xhr.response,\n                '',\n                (gltf) => {\n                  // Store GLTF data for transpilation\n                  setGltfData(gltf);\n                  // Generate project structure\n                  const structure = generateProjectStructure(\n                    gltf, \n                    componentName, \n                    displayMode, \n                    selectedLanguage\n                  );\n                  setProjectStructure(structure);\n                  setIsProcessing(false);\n                  resolve();\n                },\n                (error) => {\n                  console.error(\"Error parsing GLTF\", error);\n                  setIsProcessing(false);\n                  reject(error);\n                }\n              );\n            } catch (parseError) {\n              console.error(\"Error parsing GLTF data\", parseError);\n              setIsProcessing(false);\n              reject(parseError);\n            }\n          } else {\n            reject(new Error(`Failed to load file: ${xhr.statusText}`));\n          }\n        };\n        xhr.onprogress = function(event) {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            setProgress(percentComplete);\n          }\n        };\n        xhr.onerror = function() {\n          reject(new Error('Network error occurred while loading the file'));\n        };\n        xhr.send();\n      } catch (err) {\n        setIsProcessing(false);\n        reject(err);\n      }\n    });\n  };\n\n  // Add this useEffect hook to regenerate code when language changes\n  useEffect(() => {\n    if (gltfData && componentName && activeTab === 'code') {\n      setIsProcessing(true);\n      setProgress(0);\n      try {\n        console.log(`Regenerating project structure for ${selectedLanguage}...`);\n        // Generate project structure with current settings\n        const structure = generateProjectStructure(\n          gltfData, \n          componentName, \n          displayMode, \n          selectedLanguage\n        );\n        setProjectStructure(structure);\n        setProgress(100);\n        console.log(\"Project structure regenerated successfully\");\n      } catch (err) {\n        console.error(\"Error regenerating project structure\", err);\n        setError('Failed to regenerate project structure for the selected language');\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  }, [selectedLanguage, gltfData, componentName, displayMode, activeTab]);\n\n  const downloadZip = (includeExamplePage: boolean = false) => {\n    if (!projectStructure) return;\n    setIsProcessing(true);\n    try {\n      const zip = new JSZip();\n      const lang = LANGUAGES.find(l => l.id === selectedLanguage);\n      if (!lang) return;\n      // Create folder structure\n      const componentFolder = zip.folder(`components/${componentName}`);\n      const meshesFolder = componentFolder?.folder('meshes');\n      const geometriesFolder = componentFolder?.folder('geometries');\n      const materialsFolder = componentFolder?.folder('materials');\n      // Add index file\n      componentFolder?.file(`index.${lang.extension}`, projectStructure.indexContent);\n      // Add geometry files\n      projectStructure.geometries?.forEach(geometry => {\n        geometriesFolder?.file(\n          `${geometry.name}Geometry.${lang.geometryExtension}`, \n          geometry.content\n        );\n      });\n      // Add mesh files\n      projectStructure.meshes.forEach(mesh => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n      // Add material files\n      projectStructure.materials.forEach(material => {\n        materialsFolder?.file(`${material.name}.${lang.extension}`, material.content);\n      });\n      // Add example page if requested\n      if (includeExamplePage) {\n        const appFolder = zip.folder('app');\n        const modelPageFolder = appFolder?.folder(`${componentName.toLowerCase()}-page`);\n        modelPageFolder?.file(`page.${lang.extension}`, projectStructure.examplePageContent);\n      }\n      // Generate and download zip\n      zip.generateAsync({ type: 'blob' }).then(content => {\n        const suffix = includeExamplePage ? '-with-example' : '';\n        saveAs(content, `${componentName}-${selectedLanguage}${suffix}.zip`);\n      });\n    } catch (err) {\n      console.error(\"Error generating ZIP\", err);\n      setError('Failed to generate ZIP file. The model might be too large.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadCurrentView = () => {\n    if (!gltfData) return;\n    setIsProcessing(true);\n    try {\n      // Generate project structure with current display mode\n      const structure = generateProjectStructure(\n        gltfData, \n        componentName, \n        displayMode, \n        selectedLanguage\n      );\n      const zip = new JSZip();\n      const lang = LANGUAGES.find(l => l.id === selectedLanguage);\n      if (!lang) return;\n      // Create folder structure\n      const componentFolder = zip.folder(`components/${componentName}-${displayMode}`);\n      const meshesFolder = componentFolder?.folder('meshes');\n      const geometriesFolder = componentFolder?.folder('geometries');\n      const materialsFolder = componentFolder?.folder('materials');\n      // Add index file\n      componentFolder?.file(`index.${lang.extension}`, structure.indexContent);\n      // Add geometry files\n      structure.geometries?.forEach(geometry => {\n        geometriesFolder?.file(\n          `${geometry.name}Geometry.${lang.geometryExtension}`, \n          geometry.content\n        );\n      });\n      // Add mesh files\n      structure.meshes.forEach(mesh => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n      // Add material files\n      structure.materials.forEach(material => {\n        materialsFolder?.file(`${material.name}.${lang.extension}`, material.content);\n      });\n      // Add example page\n      const appFolder = zip.folder('app');\n      const modelPageFolder = appFolder?.folder(`${componentName.toLowerCase()}-${displayMode}-page`);\n      modelPageFolder?.file(`page.${lang.extension}`, structure.examplePageContent);\n      // Generate and download zip\n      zip.generateAsync({ type: 'blob' }).then(content => {\n        saveAs(content, `${componentName}-${displayMode}-${selectedLanguage}.zip`);\n      });\n    } catch (err) {\n      console.error(\"Error generating ZIP for current view\", err);\n      setError(`Failed to generate ZIP for ${displayMode} view. The model might be too large.`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadModel = () => {\n    if (!file) return;\n    const url = URL.createObjectURL(file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#1E1E1E] text-slate-100\">\n      {/* VS Code Window Controls */}\n      <div className=\"bg-[#3C3C3C] h-8 flex items-center px-4\">\n        <div className=\"flex space-x-1.5 mr-4\">\n          <div className=\"w-3 h-3 rounded-full bg-[#FF5F56]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#FFBD2E]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#27C93F]\"></div>\n        </div>\n        <div className=\"text-xs text-[#CCCCCC] overflow-hidden whitespace-nowrap text-ellipsis max-w-[60%]\">\n          GLB to Code Converter - Model.glb\n        </div>\n      </div>\n\n      <div className=\"flex h-[calc(100vh-2rem)]\">\n        {/* Sidebar */}\n        <div className=\"w-64 bg-[#252526] border-r border-[#3c3c3c] flex flex-col\">\n          <div className=\"p-3 border-b border-[#3c3c3c]\">\n            <h2 className=\"text-sm font-medium text-[#CCCCCC] flex items-center\">\n              <Folder className=\"w-4 h-4 mr-2 text-yellow-400\" />\n              EXPLORER\n            </h2>\n          </div>\n          \n          {activeTab === 'code' && projectStructure ? (\n            <div className=\"flex-1 overflow-y-auto p-1\">\n              <FileTree \n                projectStructure={projectStructure}\n                selectedLanguage={selectedLanguage}\n                onSelectFile={handleFileSelect}\n                expandedFolders={expandedFolders}\n                toggleFolder={toggleFolder}\n                activeFile={activeFile}\n              />\n            </div>\n          ) : (\n            <div className=\"flex-1 overflow-y-auto p-3\">\n              <div className=\"text-[#858585] text-sm\">\n                {activeTab === 'upload' ? (\n                  <div className=\"space-y-2\">\n                    <p>Upload a GLB file to get started.</p>\n                    <p>Supported file: .glb</p>\n                  </div>\n                ) : activeTab === 'preview' ? (\n                  <div className=\"space-y-2\">\n                    <p>Preview your 3D model with different display modes.</p>\n                    <p>Use the controls to rotate, zoom, and pan.</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <p>Select a file from the project structure to view its code.</p>\n                    <p>Use the language selector to switch between programming languages.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n          \n          <div className=\"p-3 border-t border-[#3c3c3c]\">\n            <div className=\"text-xs text-[#858585]\">\n              {activeTab === 'code' && projectStructure ? (\n                <div className=\"flex items-center\">\n                  <Folder className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                  <span className=\"overflow-hidden whitespace-nowrap text-ellipsis\">\n                    {componentName}\n                  </span>\n                </div>\n              ) : (\n                <div className=\"text-[#858585]\">No project loaded</div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Navigation Tabs */}\n          <div className=\"bg-[#2D2D2D] border-b border-[#3c3c3c] h-10 flex items-center px-4\">\n            <div className=\"flex space-x-4\">\n              <button\n                onClick={() => setActiveTab('upload')}\n                className={`text-sm flex items-center gap-1 px-2 py-1 rounded ${\n                  activeTab === 'upload'\n                    ? 'bg-[#3C3C3C] text-[#FFFFFF]'\n                    : 'text-[#B8B8B8] hover:bg-[#3C3C3C] hover:text-[#FFFFFF]'\n                }`}\n              >\n                <Upload className=\"w-3 h-3\" />\n                Upload\n              </button>\n              <button\n                onClick={() => setActiveTab('preview')}\n                disabled={!file}\n                className={`text-sm flex items-center gap-1 px-2 py-1 rounded ${\n                  activeTab === 'preview' && file\n                    ? 'bg-[#3C3C3C] text-[#FFFFFF]'\n                    : 'text-[#B8B8B8] hover:bg-[#3C3C3C] hover:text-[#FFFFFF] disabled:opacity-50'\n                }`}\n              >\n                <Eye className=\"w-3 h-3\" />\n                Preview\n              </button>\n              <button\n                onClick={() => setActiveTab('code')}\n                disabled={!projectStructure}\n                className={`text-sm flex items-center gap-1 px-2 py-1 rounded ${\n                  activeTab === 'code' && projectStructure\n                    ? 'bg-[#3C3C3C] text-[#FFFFFF]'\n                    : 'text-[#B8B8B8] hover:bg-[#3C3C3C] hover:text-[#FFFFFF] disabled:opacity-50'\n                }`}\n              >\n                <Code className=\"w-3 h-3\" />\n                Code\n              </button>\n            </div>\n          </div>\n\n          {/* Content Area */}\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Error Display */}\n            {error && (\n              <div className=\"bg-[#6A0000] border border-[#FF5252] rounded p-3 mb-4 max-w-2xl mx-auto\">\n                <div className=\"flex items-center\">\n                  <AlertCircle className=\"w-4 h-4 text-[#FF5252] mr-2\" />\n                  <span className=\"text-[#FF5252] text-sm\">{error}</span>\n                </div>\n              </div>\n            )}\n\n            {/* Upload Tab */}\n            {activeTab === 'upload' && (\n              <div className=\"max-w-2xl mx-auto mt-8\">\n                <div className=\"bg-[#252526] rounded p-8 border border-[#3c3c3c]\">\n                  <div className=\"text-center\">\n                    <div className=\"border-2 border-dashed border-[#3c3c3c] rounded p-12 hover:border-purple-500 transition-colors\">\n                      <Upload className=\"w-12 h-12 text-[#858585] mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-[#CCCCCC] mb-2\">\n                        Upload your GLB model\n                      </h3>\n                      <p className=\"text-[#858585] mb-6\">\n                        Drop your .glb file here or click to browse\n                      </p>\n                      <input\n                        type=\"file\"\n                        accept=\".glb\"\n                        onChange={handleFileUpload}\n                        className=\"hidden\"\n                        id=\"file-upload\"\n                        disabled={isLoading}\n                      />\n                      <label\n                        htmlFor=\"file-upload\"\n                        className={`bg-[#0E639C] hover:bg-[#107FC9] text-white px-4 py-2 rounded cursor-pointer transition-colors inline-block ${\n                          isLoading ? 'opacity-50 cursor-not-allowed' : ''\n                        }`}\n                      >\n                        {isLoading ? (\n                          <>\n                            <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n                            Processing...\n                          </>\n                        ) : (\n                          'Choose File'\n                        )}\n                      </label>\n                    </div>\n                  </div>\n                  {/* Progress Bar for Large Files */}\n                  {(isLoading || isProcessing) && (\n                    <div className=\"mt-6\">\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-[#CCCCCC] text-sm\">\n                          {isProcessing ? 'Processing model...' : 'Loading file...'}\n                        </span>\n                        <span className=\"text-[#CCCCCC] text-sm\">{Math.round(progress)}%</span>\n                      </div>\n                      <div className=\"w-full bg-[#3c3c3c] rounded h-1.5\">\n                        <div \n                          className=\"bg-[#0E70C0] h-1.5 rounded transition-all duration-300\" \n                          style={{ width: `${progress}%` }}\n                        ></div>\n                      </div>\n                      <p className=\"text-[#858585] text-xs mt-2\">\n                        {progress < 100\n                          ? \"Loading large model. This may take a few moments...\"\n                          : \"Optimizing model data for transpilation...\"\n                        }\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Preview Tab */}\n            {activeTab === 'preview' && modelUrl && (\n              <div className=\"max-w-6xl mx-auto\">\n                <div className=\"bg-[#252526] rounded p-6 border border-[#3c3c3c]\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h3 className=\"text-lg font-medium text-[#CCCCCC]\">3D Model Preview</h3>\n                    <div className=\"flex items-center gap-4\">\n                      {/* Display Mode Controls */}\n                      <div className=\"flex items-center gap-2\">\n                        <label className=\"text-[#CCCCCC] text-sm\">Display Mode:</label>\n                        <select\n                          value={displayMode}\n                          onChange={(e) => setDisplayMode(e.target.value as any)}\n                          className=\"bg-[#3C3C3C] text-[#CCCCCC] px-2 py-1 rounded border border-[#3c3c3c] focus:border-purple-500 outline-none text-sm\"\n                        >\n                          <option value=\"original\">Original</option>\n                          <option value=\"wireframe\">Wireframe</option>\n                          <option value=\"solid\">Solid Color</option>\n                          <option value=\"normals\">Normals</option>\n                          <option value=\"depth\">Depth</option>\n                          <option value=\"points\">Point Cloud</option>\n                        </select>\n                      </div>\n                      {/* Toggle Controls */}\n                      <div className=\"flex items-center gap-4\">\n                        <label className=\"flex items-center gap-2 text-[#CCCCCC] text-sm\">\n                          <input\n                            type=\"checkbox\"\n                            checked={autoRotate}\n                            onChange={(e) => setAutoRotate(e.target.checked)}\n                            className=\"rounded border-[#3c3c3c] bg-[#3C3C3C] text-[#0E70C0] focus:ring-[#0E70C0]\"\n                          />\n                          Auto Rotate\n                        </label>\n                        <label className=\"flex items-center gap-2 text-[#CCCCCC] text-sm\">\n                          <input\n                            type=\"checkbox\"\n                            checked={showGrid}\n                            onChange={(e) => setShowGrid(e.target.checked)}\n                            className=\"rounded border-[#3c3c3c] bg-[#3C3C3C] text-[#0E70C0] focus:ring-[#0E70C0]\"\n                          />\n                          Grid\n                        </label>\n                        <label className=\"flex items-center gap-2 text-[#CCCCCC] text-sm\">\n                          <input\n                            type=\"checkbox\"\n                            checked={showAxes}\n                            onChange={(e) => setShowAxes(e.target.checked)}\n                            className=\"rounded border-[#3c3c3c] bg-[#3C3C3C] text-[#0E70C0] focus:ring-[#0E70C0]\"\n                          />\n                          Axes\n                        </label>\n                      </div>\n                      <button\n                        onClick={downloadCurrentView}\n                        disabled={isProcessing}\n                        className={`bg-[#0E639C] hover:bg-[#107FC9] text-white px-3 py-1.5 rounded transition-colors flex items-center gap-2 ${\n                          isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                        }`}\n                      >\n                        {isProcessing ? (\n                          <>\n                            <Loader2 className=\"w-4 h-4 animate-spin\" />\n                            Processing...\n                          </>\n                        ) : (\n                          <>\n                            <File className=\"w-4 h-4\" />\n                            Download {displayMode} Version\n                          </>\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                  {/* Display Mode Description */}\n                  <div className=\"mb-4\">\n                    <div className=\"bg-[#2D2D2D] rounded p-3\">\n                      <p className=\"text-[#858585] text-sm\">\n                        {displayMode === 'original' && 'Showing the original model with its materials and textures.'}\n                        {displayMode === 'wireframe' && 'Displaying the model as a wireframe structure showing the mesh geometry.'}\n                        {displayMode === 'solid' && 'Rendering the model with a uniform solid color material.'}\n                        {displayMode === 'normals' && 'Visualizing surface normals with color-coded directions (RGB = XYZ).'}\n                        {displayMode === 'depth' && 'Showing depth information - closer surfaces appear lighter.'}\n                        {displayMode === 'points' && 'Displaying the model as a point cloud of vertices.'}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"bg-[#1E1E1E] rounded overflow-hidden\" style={{ height: '500px' }}>\n                    <Canvas \n                      camera={{ position: [0, 0, 5], fov: 50 }}\n                      gl={{\n                        powerPreference: \"high-performance\",\n                        antialias: true,\n                        alpha: true\n                      }}\n                    >\n                      <ambientLight intensity={0.5} />\n                      <pointLight position={[10, 10, 10]} />\n                      <pointLight position={[-10, -10, -10]} intensity={0.3} />\n                      {/* Memory-optimized loading for large models */}\n                      {modelUrl && (\n                        <React.Suspense fallback={\n                          <Html center>\n                            <div className=\"text-white bg-black/50 p-2 rounded\">\n                              <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n                              Loading model...\n                            </div>\n                          </Html>\n                        }>\n                          <ModelPreview \n                            url={modelUrl} \n                            displayMode={displayMode} \n                            autoRotate={autoRotate} \n                          />\n                        </React.Suspense>\n                      )}\n                      {showGrid && (\n                        <gridHelper args={[10, 10, '#444444', '#666666']} />\n                      )}\n                      {showAxes && (\n                        <axesHelper args={[2]} />\n                      )}\n                      <OrbitControls \n                        enableZoom \n                        enablePan \n                        enableRotate \n                        minDistance={0.1}\n                        maxDistance={100}\n                      />\n                      <Environment preset=\"studio\" />\n                    </Canvas>\n                  </div>\n                  <p className=\"text-[#858585] text-sm mt-4 text-center\">\n                    Use mouse to rotate, zoom, and pan around the model. Try different display modes to analyze the model structure.\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Code Tab - VS Code Style */}\n            {activeTab === 'code' && projectStructure && (\n              <div className=\"h-full flex flex-col\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <h3 className=\"text-lg font-medium text-[#CCCCCC]\">\n                      {activeFile ? (\n                        activeFile === 'index' ? 'index' :\n                        activeFile === 'examplePage' ? 'page' :\n                        activeFile.includes('geometry') ? 'Geometry' :\n                        activeFile.includes('mesh') ? 'Mesh' : 'Material'\n                      ) + `.${LANGUAGES.find(l => l.id === selectedLanguage)?.extension || 'ts'}`\n                      : 'Code Editor'}\n                    </h3>\n                    <div className=\"flex items-center gap-2\">\n                      <LanguageSelector \n                        selectedLanguage={selectedLanguage} \n                        onChange={setSelectedLanguage} \n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <button\n                      onClick={() => downloadZip(true)}\n                      disabled={isProcessing}\n                      className={`bg-[#0E639C] hover:bg-[#107FC9] text-white px-3 py-1.5 rounded transition-colors flex items-center gap-2 ${\n                        isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                      }`}\n                    >\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <Layout className=\"w-4 h-4\" />\n                          Download Full Project\n                        </>\n                      )}\n                    </button>\n                    <button\n                      onClick={() => downloadZip(false)}\n                      disabled={isProcessing}\n                      className={`bg-[#0E639C] hover:bg-[#107FC9] text-white px-3 py-1.5 rounded transition-colors flex items-center gap-2 ${\n                        isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                      }`}\n                    >\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <File className=\"w-4 h-4\" />\n                          Download Component\n                        </>\n                      )}\n                    </button>\n                    <button\n                      onClick={downloadModel}\n                      className=\"bg-[#237A57] hover:bg-[#2B9348] text-white px-3 py-1.5 rounded transition-colors flex items-center gap-2\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                      Download GLB\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"flex-1 min-h-0\">\n                  <CodeEditor \n                    code={currentFileContent} \n                    languageId={selectedLanguage} \n                  />\n                </div>\n                \n                {/* Statistics Section - Now in a collapsible panel at the bottom */}\n                <div className=\"mt-4 border-t border-[#3c3c3c] pt-4\">\n                  <div className=\"flex justify-between items-center mb-3\">\n                    <h4 className=\"text-sm font-medium text-[#CCCCCC] flex items-center\">\n                      <Terminal className=\"w-4 h-4 mr-2 text-purple-400\" />\n                      Model Statistics\n                    </h4>\n                    <div className=\"flex space-x-2\">\n                      <span className=\"text-xs text-[#858585]\">\n                        {file ? (file.size / 1024 / 1024).toFixed(2) + ' MB' : 'N/A'} • {projectStructure.meshes.length} meshes\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-6 gap-3 text-sm\">\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Meshes</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">{projectStructure.meshes.length}</div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Geometry Files</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">{projectStructure.geometries?.length || 0}</div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Materials</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">{projectStructure.materials.length}</div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Total Vertices</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">{projectStructure.totalVertices.toLocaleString()}</div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">Total Triangles</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">{projectStructure.totalTriangles.toLocaleString()}</div>\n                    </div>\n                    <div className=\"bg-[#2D2D2D] p-2 rounded\">\n                      <div className=\"text-[#858585]\">File Size</div>\n                      <div className=\"font-medium text-[#CCCCCC]\">{file ? (file.size / 1024 / 1024).toFixed(2) + ' MB' : 'N/A'}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Status Bar */}\n          <div className=\"bg-[#2D2D2D] border-t border-[#3c3c3c] h-8 flex items-center px-4 text-xs text-[#858585]\">\n            <div className=\"flex space-x-4\">\n              <span>UTF-8</span>\n              <span>LF</span>\n              <span>{activeTab === 'code' && projectStructure ? projectStructure.meshes.length + ' meshes' : ''}</span>\n            </div>\n            <div className=\"ml-auto flex space-x-4\">\n              <span>{selectedLanguage.toUpperCase()}</span>\n              <span>Line {activeFile ? '1' : ''}, Column {activeFile ? '1' : ''}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Component to display the GLB model in the preview with memory optimization\nfunction ModelPreview({ \n  url, \n  displayMode, \n  autoRotate \n}: { \n  url: string; \n  displayMode: string; \n  autoRotate: boolean \n}) {\n  const [gltf, setGltf] = useState<any>(null);\n  const meshRef = useRef<THREE.Group>(null);\n  // Load GLTF with memory optimization for large files\n  useEffect(() => {\n    let isMounted = true;\n    const loader = new GLTFLoader();\n    // Set up DRACO for compressed models\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\n    loader.setDRACOLoader(dracoLoader);\n    // For large files, use a more memory-efficient approach\n    fetch(url)\n      .then(response => response.arrayBuffer())\n      .then(data => {\n        if (!isMounted) return;\n        loader.parse(\n          data,\n          '',\n          (gltf) => {\n            // For extremely large models, simplify geometries to prevent memory issues\n            if (gltf.scene) {\n              gltf.scene.traverse((object: THREE.Object3D) => {\n                if (object.isMesh) {\n                  const mesh = object as THREE.Mesh;\n                  const geometry = mesh.geometry;\n                  // Check if the geometry is extremely large\n                  const vertexCount = geometry.attributes.position.count;\n                  if (vertexCount > 1000000) {\n                    // For extremely large meshes, consider simplifying or warning\n                    console.warn(`Mesh ${mesh.name} has ${vertexCount} vertices - this may cause performance issues`);\n                  }\n                }\n              });\n            }\n            if (isMounted) {\n              setGltf(gltf);\n            }\n          },\n          (error) => {\n            console.error(\"Error parsing GLTF\", error);\n          }\n        );\n      })\n      .catch(error => {\n        console.error(\"Error loading GLB file\", error);\n      });\n    return () => {\n      isMounted = false;\n      // Clean up GLTF resources\n      if (gltf) {\n        gltf.scene.traverse((object: THREE.Object3D) => {\n          if (object.isMesh) {\n            const mesh = object as THREE.Mesh;\n            mesh.geometry.dispose();\n            if (Array.isArray(mesh.material)) {\n              mesh.material.forEach(material => material.dispose());\n            } else {\n              mesh.material.dispose();\n            }\n          }\n        });\n      }\n    };\n  }, [url]);\n\n  useFrame((state) => {\n    if (meshRef.current && autoRotate) {\n      meshRef.current.rotation.y = state.clock.getElapsedTime() * 0.5;\n    }\n  });\n\n  // Apply material overrides based on display mode\n  useEffect(() => {\n    if (gltf && gltf.scene) {\n      gltf.scene.traverse((child: THREE.Object3D) => {\n        if (child.isMesh) {\n          const mesh = child as THREE.Mesh;\n          const originalMaterial = mesh.material;\n          // Dispose of old materials to prevent memory leaks\n          if (Array.isArray(originalMaterial)) {\n            originalMaterial.forEach(material => material.dispose());\n          } else if (originalMaterial && 'dispose' in originalMaterial) {\n            (originalMaterial as THREE.Material).dispose();\n          }\n          // Create new materials based on display mode\n          switch (displayMode) {\n            case 'wireframe':\n              if (Array.isArray(originalMaterial)) {\n                mesh.material = originalMaterial.map(mat => {\n                  const newMat = mat.clone();\n                  newMat.wireframe = true;\n                  newMat.transparent = true;\n                  newMat.opacity = 0.8;\n                  return newMat;\n                });\n              } else {\n                const newMat = originalMaterial.clone();\n                newMat.wireframe = true;\n                newMat.transparent = true;\n                newMat.opacity = 0.8;\n                mesh.material = newMat;\n              }\n              break;\n            case 'points':\n              mesh.material = new THREE.PointsMaterial({\n                color: 0x00ff00,\n                size: 0.01,\n                sizeAttenuation: true\n              });\n              break;\n            case 'normals':\n              mesh.material = new THREE.MeshNormalMaterial();\n              break;\n            case 'depth':\n              mesh.material = new THREE.MeshDepthMaterial();\n              break;\n            case 'solid':\n              mesh.material = new THREE.MeshStandardMaterial({\n                color: 0x888888,\n                metalness: 0.1,\n                roughness: 0.8\n              });\n              break;\n            default:\n              // Keep original materials for 'original' mode\n              mesh.material = originalMaterial;\n              break;\n          }\n        }\n      });\n    }\n  }, [gltf, displayMode]);\n\n  if (!gltf) {\n    return (\n      <Html center>\n        <div className=\"text-white bg-black/50 p-2 rounded\">\n          <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n          Loading model...\n        </div>\n      </Html>\n    );\n  }\n  \n  return (\n    <primitive \n      ref={meshRef} \n      object={gltf.scene} \n      scale={[1, 1, 1]}\n      position={[0, 0, 0]}\n    />\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/lib/glb-converter.ts"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\nimport type { MeshData, MaterialData, ProjectStructure, GeometryData } from '@/app/types/glb-convertor';\n\n// Language configuration for code generation\nconst LANGUAGES = {\n  typescript: {\n    extension: 'tsx',\n    geometryExtension: 'ts',\n    comment: '//',\n    string: '\"',\n    function: 'function',\n    class: 'class',\n    import: 'import',\n    export: 'export',\n    typeDeclaration: (name: string) => `type ${name} = {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  javascript: {\n    extension: 'jsx',\n    geometryExtension: 'js',\n    comment: '//',\n    string: '\"',\n    function: 'function',\n    class: 'class',\n    import: 'import',\n    export: 'export',\n    typeDeclaration: () => '',\n    typeEnd: '',\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  python: {\n    extension: 'py',\n    geometryExtension: 'py',\n    comment: '#',\n    string: \"'\",\n    function: 'def',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: () => '',\n    typeEnd: '',\n    objectProperty: (key: string, value: string) => `    ${key} = ${value}`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  java: {\n    extension: 'java',\n    geometryExtension: 'java',\n    comment: '//',\n    string: '\"',\n    function: '',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `public class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    public ${value} ${key};`,\n    array: (items: string[]) => `new ArrayList<>() {{ ${items.map(item => `add(${item})`).join('; ')}; }}`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  csharp: {\n    extension: 'cs',\n    geometryExtension: 'cs',\n    comment: '//',\n    string: '\"',\n    function: '',\n    class: 'class',\n    import: 'using',\n    export: '',\n    typeDeclaration: (name: string) => `public class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    public ${value} ${key} { get; set; }`,\n    array: (items: string[]) => `new List<${items[0]?.split(' ')[0] || 'object'}> { ${items.join(', ')} }`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  cpp: {\n    extension: 'cpp',\n    geometryExtension: 'h',\n    comment: '//',\n    string: '\"',\n    function: '',\n    class: 'class',\n    import: '#include',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} { public:`,\n    typeEnd: '};',\n    objectProperty: (key: string, value: string) => `    ${value} ${key};`,\n    array: (items: string[]) => `{${items.join(', ')}}`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  go: {\n    extension: 'go',\n    geometryExtension: 'go',\n    comment: '//',\n    string: '\"',\n    function: 'func',\n    class: 'type',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `type ${name} struct {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    ${key} ${value} \\`json:\"${key.toLowerCase()}\"\\``,\n    array: (items: string[]) => `[]interface{}{${items.join(', ')}}`,\n    stringLiteral: (value: string) => `\"` + value.replace(/\"/g, '\\\\\"') + `\"`\n  },\n  rust: {\n    extension: 'rs',\n    geometryExtension: 'rs',\n    comment: '//',\n    string: '\"',\n    function: 'fn',\n    class: 'struct',\n    import: 'use',\n    export: '',\n    typeDeclaration: (name: string) => `pub struct ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    pub ${key}: ${value},`,\n    array: (items: string[]) => `vec![${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"` + value.replace(/\"/g, '\\\\\"') + `\"`\n  },\n  swift: {\n    extension: 'swift',\n    geometryExtension: 'swift',\n    comment: '//',\n    string: '\"',\n    function: 'func',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    var ${key}: ${value}`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  kotlin: {\n    extension: 'kt',\n    geometryExtension: 'kt',\n    comment: '//',\n    string: '\"',\n    function: 'fun',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    var ${key}: ${value}? = null`,\n    array: (items: string[]) => `listOf(${items.join(', ')})`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  ruby: {\n    extension: 'rb',\n    geometryExtension: 'rb',\n    comment: '#',\n    string: '\"',\n    function: 'def',\n    class: 'class',\n    import: 'require',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name}`,\n    typeEnd: 'end',\n    objectProperty: (key: string, value: string) => `  attr_accessor :${key}`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  php: {\n    extension: 'php',\n    geometryExtension: 'php',\n    comment: '//',\n    string: '\"',\n    function: 'function',\n    class: 'class',\n    import: 'use',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `    private $${key};`,\n    array: (items: string[]) => `array(${items.join(', ')})`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  scala: {\n    extension: 'scala',\n    geometryExtension: 'scala',\n    comment: '//',\n    string: '\"',\n    function: 'def',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `case class ${name} (`,\n    typeEnd: ')',\n    objectProperty: (key: string, value: string) => `${key}: ${value},`,\n    array: (items: string[]) => `Seq(${items.join(', ')})`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  dart: {\n    extension: 'dart',\n    geometryExtension: 'dart',\n    comment: '//',\n    string: '\"',\n    function: 'void',\n    class: 'class',\n    import: 'import',\n    export: '',\n    typeDeclaration: (name: string) => `class ${name} {`,\n    typeEnd: '}',\n    objectProperty: (key: string, value: string) => `  ${value} ${key};`,\n    array: (items: string[]) => `[${items.join(', ')}]`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  },\n  r: {\n    extension: 'R',\n    geometryExtension: 'R',\n    comment: '#',\n    string: '\"',\n    function: 'function',\n    class: 'setClass',\n    import: 'library',\n    export: '',\n    typeDeclaration: (name: string) => `setClass(\"${name}\", slots = list(`,\n    typeEnd: '))',\n    objectProperty: (key: string, value: string) => `\"${key}\" = \"${value}\",`,\n    array: (items: string[]) => `c(${items.join(', ')})`,\n    stringLiteral: (value: string) => `\"${value}\"`\n  }\n} as const;\n\ntype LanguageId = keyof typeof LANGUAGES;\n\n/**\n * Capitalizes the first letter of a string\n * Required for React components which must start with uppercase letters\n */\nfunction capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Generates a complete project structure from a GLTF model\n * Now with separate geometry files for better component management\n */\nexport function generateProjectStructure(\n  gltf: GLTF, \n  componentName: string,\n  displayMode: string = 'original',\n  languageId: LanguageId = 'typescript'\n): ProjectStructure {\n  const lang = LANGUAGES[languageId];\n  const meshes: MeshData[] = [];\n  const materials: MaterialData[] = [];\n  const geometries: GeometryData[] = []; // New array for geometry files\n  let totalVertices = 0;\n  let totalTriangles = 0;\n  \n  // Process the scene to extract meshes and materials\n  gltf.scene.traverse((object) => {\n    if (object.isMesh) {\n      const mesh = object as THREE.Mesh;\n      const geometry = mesh.geometry;\n      \n      // Count vertices and triangles\n      totalVertices += geometry.attributes.position.count;\n      if (geometry.index) {\n        totalTriangles += geometry.index.count / 3;\n      } else {\n        totalTriangles += geometry.attributes.position.count / 3;\n      }\n      \n      // Generate mesh name\n      const meshName = mesh.name || `Mesh_${meshes.length}`;\n      const safeMeshName = sanitizeName(meshName);\n      const capitalizedMeshName = capitalize(safeMeshName);\n      \n      // Generate geometry file\n      const geometryFile = generateGeometryFile(capitalizedMeshName, geometry, languageId);\n      geometries.push({\n        name: capitalizedMeshName,\n        content: geometryFile,\n        originalName: meshName\n      });\n      \n      // Generate mesh component (now simpler)\n      const meshComponent = generateMeshComponent(capitalizedMeshName, geometry, displayMode, languageId);\n      meshes.push({\n        name: capitalizedMeshName,\n        content: meshComponent,\n        originalName: meshName\n      });\n      \n      // Process materials\n      const material = Array.isArray(mesh.material) ? mesh.material[0] : mesh.material;\n      const materialName = material.name || `Material_${materials.length}`;\n      const safeMaterialName = sanitizeName(materialName);\n      const capitalizedMaterialName = capitalize(safeMaterialName);\n      \n      // Only add unique materials\n      if (!materials.some(m => m.name === capitalizedMaterialName)) {\n        const materialComponent = generateMaterialComponent(capitalizedMaterialName, material, displayMode, languageId);\n        materials.push({\n          name: capitalizedMaterialName,\n          content: materialComponent,\n          originalName: materialName\n        });\n      }\n    }\n  });\n  \n  // Capitalize the component name for the main component\n  const capitalizedComponentName = capitalize(componentName);\n  \n  // Generate the main index component\n  const indexContent = generateIndexComponent(capitalizedComponentName, meshes, materials, displayMode, languageId);\n  \n  // Generate the example page\n  const examplePageContent = generateExamplePage(capitalizedComponentName, languageId);\n  \n  return {\n    componentName: capitalizedComponentName,\n    indexContent,\n    examplePageContent,\n    meshes,\n    geometries, // Include geometries in the structure\n    materials,\n    totalVertices,\n    totalTriangles\n  };\n}\n\n/**\n * Generates a separate geometry file for Three.js\n * Creates a reusable geometry object that can be imported by components\n */\nfunction generateGeometryFile(meshName: string, geometry: THREE.BufferGeometry, languageId: LanguageId): string {\n  const lang = LANGUAGES[languageId];\n  // Extract geometry data\n  const positions = Array.from(geometry.attributes.position.array);\n  const normals = geometry.attributes.normal ? Array.from(geometry.attributes.normal.array) : null;\n  const uvs = geometry.attributes.uv ? Array.from(geometry.attributes.uv.array) : null;\n  const indices = geometry.index ? Array.from(geometry.index.array) : null;\n  \n  // Check if geometry is too large for direct embedding\n  const isLargeGeometry = positions.length > 100000;\n  \n  switch (languageId) {\n    case 'typescript':\n    case 'javascript':\n      return `import * as THREE from 'three';\n// ${meshName} geometry definition\n// This can be easily modified without affecting component code\nexport const ${meshName}Geometry = (() => {\n  const geometry = new THREE.BufferGeometry();\n  ${isLargeGeometry ? \n    `// Large geometry detected - using optimized approach\n    // For extremely large models, consider using binary data files\n    const createGeometryChunk = (data, itemSize) => {\n      const chunkSize = 50000;\n      const chunks = [];\n      for (let i = 0; i < data.length; i += chunkSize) {\n        const chunk = data.slice(i, i + chunkSize);\n        chunks.push(new Float32Array(chunk));\n      }\n      return chunks;\n    };\n    // Position data\n    const positionChunks = createGeometryChunk(${JSON.stringify(positions)}, 3);\n    const positions = new Float32Array(positionChunks.reduce((acc, chunk) => [...acc, ...chunk], []));\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    ${normals ? `// Normal data\n    const normalChunks = createGeometryChunk(${JSON.stringify(normals)}, 3);\n    const normals = new Float32Array(normalChunks.reduce((acc, chunk) => [...acc, ...chunk], []));\n    geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));` : ''}\n    ${uvs ? `// UV data\n    const uvChunks = createGeometryChunk(${JSON.stringify(uvs)}, 2);\n    const uvs = new Float32Array(uvChunks.reduce((acc, chunk) => [...acc, ...chunk], []));\n    geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));` : ''}\n    ${indices ? `// Index data\n    const indexChunks = createGeometryChunk(${JSON.stringify(indices)}, 1);\n    const indices = new Uint16Array(indexChunks.reduce((acc, chunk) => [...acc, ...chunk], []));\n    geometry.setIndex(new THREE.BufferAttribute(indices, 1));` : ''}` :\n    `// Position data\n    const positions = new Float32Array(${JSON.stringify(positions)});\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    ${normals ? `// Normal data\n    const normals = new Float32Array(${JSON.stringify(normals)});\n    geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));` : ''}\n    ${uvs ? `// UV data\n    const uvs = new Float32Array(${JSON.stringify(uvs)});\n    geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));` : ''}\n    ${indices ? `// Index data\n    const indices = new Uint16Array(${JSON.stringify(indices)});\n    geometry.setIndex(new THREE.BufferAttribute(indices, 1));` : ''}`\n  }\n  geometry.computeVertexNormals();\n  return geometry;\n})();\n`;\n    case 'python':\n      return `import numpy as np\nfrom three import BufferGeometry, BufferAttribute\n\n# ${meshName} geometry definition\n# This can be easily modified without affecting component code\n${meshName}Geometry = (lambda: \n    ${isLargeGeometry ? \n      `# Large geometry detected - using optimized approach\n      # For extremely large models, consider using binary data files\n      def create_geometry_chunk(data, item_size):\n          chunk_size = 50000\n          chunks = []\n          for i in range(0, len(data), chunk_size):\n              chunk = data[i:i + chunk_size]\n              chunks.append(np.array(chunk, dtype=np.float32))\n          return np.concatenate(chunks)\n      \n      # Position data\n      position_chunks = create_geometry_chunk(${JSON.stringify(positions)}, 3)\n      positions = np.array(position_chunks, dtype=np.float32)\n      geometry = BufferGeometry()\n      geometry.set_attribute('position', BufferAttribute(positions, 3))\n      ${normals ? `# Normal data\n      normal_chunks = create_geometry_chunk(${JSON.stringify(normals)}, 3)\n      normals = np.array(normal_chunks, dtype=np.float32)\n      geometry.set_attribute('normal', BufferAttribute(normals, 3))` : ''}\n      ${uvs ? `# UV data\n      uv_chunks = create_geometry_chunk(${JSON.stringify(uvs)}, 2)\n      uvs = np.array(uv_chunks, dtype=np.float32)\n      geometry.set_attribute('uv', BufferAttribute(uvs, 2))` : ''}\n      ${indices ? `# Index data\n      index_chunks = create_geometry_chunk(${JSON.stringify(indices)}, 1)\n      indices = np.array(index_chunks, dtype=np.uint16)\n      geometry.set_index(BufferAttribute(indices, 1))` : ''}\n      geometry.compute_vertex_normals()\n      return geometry` :\n      `# Position data\n      positions = np.array(${JSON.stringify(positions)}, dtype=np.float32)\n      geometry = BufferGeometry()\n      geometry.set_attribute('position', BufferAttribute(positions, 3))\n      ${normals ? `# Normal data\n      normals = np.array(${JSON.stringify(normals)}, dtype=np.float32)\n      geometry.set_attribute('normal', BufferAttribute(normals, 3))` : ''}\n      ${uvs ? `# UV data\n      uvs = np.array(${JSON.stringify(uvs)}, dtype=np.float32)\n      geometry.set_attribute('uv', BufferAttribute(uvs, 2))` : ''}\n      ${indices ? `# Index data\n      indices = np.array(${JSON.stringify(indices)}, dtype=np.uint16)\n      geometry.set_index(BufferAttribute(indices, 1))` : ''}\n      geometry.compute_vertex_normals()\n      return geometry`}\n)();\n`;\n    case 'java':\n      return `import three.BufferGeometry;\nimport three.BufferAttribute;\n\n/**\n * ${meshName} geometry definition\n * This can be easily modified without affecting component code\n */\npublic class ${meshName}Geometry {\n    public static BufferGeometry create() {\n        BufferGeometry geometry = new BufferGeometry();\n        ${isLargeGeometry ? \n          `// Large geometry detected - using optimized approach\n          // For extremely large models, consider using binary data files\n          float[] positions = createGeometryChunk(${JSON.stringify(positions)}, 3);\n          geometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n          ${normals ? `float[] normals = createGeometryChunk(${JSON.stringify(normals)}, 3);\n          geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));` : ''}\n          ${uvs ? `float[] uvs = createGeometryChunk(${JSON.stringify(uvs)}, 2);\n          geometry.setAttribute(\"uv\", new BufferAttribute(uvs, 2));` : ''}\n          ${indices ? `short[] indices = createGeometryChunk(${JSON.stringify(indices)}, 1);\n          geometry.setIndex(new BufferAttribute(indices, 1));` : ''}\n          geometry.computeVertexNormals();\n          return geometry;` :\n          `float[] positions = ${JSON.stringify(positions)};\n          geometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n          ${normals ? `float[] normals = ${JSON.stringify(normals)};\n          geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));` : ''}\n          ${uvs ? `float[] uvs = ${JSON.stringify(uvs)};\n          geometry.setAttribute(\"uv\", new BufferAttribute(uvs, 2));` : ''}\n          ${indices ? `short[] indices = ${JSON.stringify(indices)};\n          geometry.setIndex(new BufferAttribute(indices, 1));` : ''}\n          geometry.computeVertexNormals();\n          return geometry;`}\n    }\n    \n    ${isLargeGeometry ? \n      `private static float[] createGeometryChunk(float[] data, int itemSize) {\n        int chunkSize = 50000;\n        List<Float> chunks = new ArrayList<>();\n        for (int i = 0; i < data.length; i += chunkSize) {\n            int end = Math.min(i + chunkSize, data.length);\n            for (int j = i; j < end; j++) {\n                chunks.add(data[j]);\n            }\n        }\n        float[] result = new float[chunks.size()];\n        for (int i = 0; i < chunks.size(); i++) {\n            result[i] = chunks.get(i);\n        }\n        return result;\n    }` : ''}\n}\n`;\n    case 'csharp':\n      return `using ThreeJs;\nusing System.Collections.Generic;\nusing System.Linq;\n\n/**\n * ${meshName} geometry definition\n * This can be easily modified without affecting component code\n */\npublic class ${meshName}Geometry\n{\n    public static BufferGeometry Create()\n    {\n        var geometry = new BufferGeometry();\n        ${isLargeGeometry ? \n          `// Large geometry detected - using optimized approach\n          // For extremely large models, consider using binary data files\n          var positions = CreateGeometryChunk(${JSON.stringify(positions)}, 3);\n          geometry.SetAttribute(\"position\", new BufferAttribute(positions, 3));\n          ${normals ? `var normals = CreateGeometryChunk(${JSON.stringify(normals)}, 3);\n          geometry.SetAttribute(\"normal\", new BufferAttribute(normals, 3));` : ''}\n          ${uvs ? `var uvs = CreateGeometryChunk(${JSON.stringify(uvs)}, 2);\n          geometry.SetAttribute(\"uv\", new BufferAttribute(uvs, 2));` : ''}\n          ${indices ? `var indices = CreateGeometryChunk(${JSON.stringify(indices)}, 1);\n          geometry.SetIndex(new BufferAttribute(indices, 1));` : ''}\n          geometry.ComputeVertexNormals();\n          return geometry;` :\n          `var positions = new float[] { ${JSON.stringify(positions).slice(1, -1)} };\n          geometry.SetAttribute(\"position\", new BufferAttribute(positions, 3));\n          ${normals ? `var normals = new float[] { ${JSON.stringify(normals).slice(1, -1)} };\n          geometry.SetAttribute(\"normal\", new BufferAttribute(normals, 3));` : ''}\n          ${uvs ? `var uvs = new float[] { ${JSON.stringify(uvs).slice(1, -1)} };\n          geometry.SetAttribute(\"uv\", new BufferAttribute(uvs, 2));` : ''}\n          ${indices ? `var indices = new ushort[] { ${JSON.stringify(indices).slice(1, -1)} };\n          geometry.SetIndex(new BufferAttribute(indices, 1));` : ''}\n          geometry.ComputeVertexNormals();\n          return geometry;`}\n    }\n    \n    ${isLargeGeometry ? \n      `private static float[] CreateGeometryChunk(float[] data, int itemSize)\n      {\n          int chunkSize = 50000;\n          var chunks = new List<float>();\n          for (int i = 0; i < data.Length; i += chunkSize)\n          {\n              int end = Math.Min(i + chunkSize, data.Length);\n              chunks.AddRange(data.Skip(i).Take(end - i));\n          }\n          return chunks.ToArray();\n      }` : ''}\n}\n`;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return `import * as THREE from 'three';\n// ${meshName} geometry definition\n// This can be easily modified without affecting component code\nexport const ${meshName}Geometry = (() => {\n  const geometry = new THREE.BufferGeometry();\n  // Position data\n  const positions = new Float32Array(${JSON.stringify(positions)});\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n  ${normals ? `// Normal data\n  const normals = new Float32Array(${JSON.stringify(normals)});\n  geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));` : ''}\n  ${uvs ? `// UV data\n  const uvs = new Float32Array(${JSON.stringify(uvs)});\n  geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));` : ''}\n  ${indices ? `// Index data\n  const indices = new Uint16Array(${JSON.stringify(indices)});\n  geometry.setIndex(new THREE.BufferAttribute(indices, 1));` : ''}\n  geometry.computeVertexNormals();\n  return geometry;\n})();\n`;\n  }\n}\n\n/**\n * Generates a mesh component that imports geometry from a separate file\n * Much simpler than before - just references the geometry\n * Component name starts with capital letter as required by React\n */\nfunction generateMeshComponent(meshName: string, _geometry: THREE.BufferGeometry, displayMode: string, languageId: LanguageId): string {\n  const lang = LANGUAGES[languageId];\n  \n  switch (languageId) {\n    case 'typescript':\n      return `import React from 'react';\nimport { ${meshName}Geometry } from '../geometries/${meshName}Geometry';\n/**\n * ${meshName} component\n * Simple wrapper that uses pre-defined geometry\n * Easy to modify without touching geometry data\n */\nexport default function ${meshName}(props: any) {\n  return <mesh geometry={${meshName}Geometry} {...props} />;\n}`;\n    case 'javascript':\n      return `import React from 'react';\nimport { ${meshName}Geometry } from '../geometries/${meshName}Geometry';\n/**\n * ${meshName} component\n * Simple wrapper that uses pre-defined geometry\n * Easy to modify without touching geometry data\n */\nexport default function ${meshName}(props) {\n  return <mesh geometry={${meshName}Geometry} {...props} />;\n}`;\n    case 'python':\n      return `from react import createElement\nfrom .geometries.${meshName}Geometry import ${meshName}Geometry\n\ndef ${meshName.toLowerCase()}(props):\n    \"\"\"${meshName} component\n    Simple wrapper that uses pre-defined geometry\n    Easy to modify without touching geometry data\n    \"\"\"\n    return createElement('mesh', {**props, 'geometry': ${meshName}Geometry})`;\n    case 'java':\n      return `import react.Component;\nimport three.BufferGeometry;\nimport three.Mesh;\n\n/**\n * ${meshName} component\n * Simple wrapper that uses pre-defined geometry\n * Easy to modify without touching geometry data\n */\npublic class ${meshName} extends Component {\n    private BufferGeometry geometry;\n    \n    public ${meshName}(Object props) {\n        super(props);\n        this.geometry = ${meshName}Geometry.create();\n    }\n    \n    @Override\n    public Object render() {\n        return new Mesh(props, geometry);\n    }\n}`;\n    case 'csharp':\n      return `using React;\nusing ThreeJs;\n\n/**\n * ${meshName} component\n * Simple wrapper that uses pre-defined geometry\n * Easy to modify without touching geometry data\n */\npublic class ${meshName}\n{\n    private BufferGeometry Geometry { get; }\n    \n    public ${meshName}(object props)\n    {\n        Geometry = ${meshName}Geometry.Create();\n    }\n    \n    public object Render(object props)\n    {\n        return new Mesh(props, Geometry);\n    }\n}`;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return `import React from 'react';\nimport { ${meshName}Geometry } from '../geometries/${meshName}Geometry';\n/**\n * ${meshName} component\n * Simple wrapper that uses pre-defined geometry\n * Easy to modify without touching geometry data\n */\nexport default function ${meshName}(props) {\n  return <mesh geometry={${meshName}Geometry} {...props} />;\n}`;\n  }\n}\n\n/**\n * Generates a material component based on display mode\n * Component name starts with capital letter as required by React\n */\nfunction generateMaterialComponent(materialName: string, material: THREE.Material, displayMode: string, languageId: LanguageId): string {\n  const lang = LANGUAGES[languageId];\n  \n  // Base material properties\n  let materialType = 'MeshStandardMaterial';\n  let properties: string[] = [];\n  \n  // Determine material type\n  if (material instanceof THREE.MeshBasicMaterial) materialType = 'MeshBasicMaterial';\n  else if (material instanceof THREE.MeshPhongMaterial) materialType = 'MeshPhongMaterial';\n  else if (material instanceof THREE.MeshLambertMaterial) materialType = 'MeshLambertMaterial';\n  else if (material instanceof THREE.MeshNormalMaterial) materialType = 'MeshNormalMaterial';\n  else if (material instanceof THREE.MeshDepthMaterial) materialType = 'MeshDepthMaterial';\n  else if (material instanceof THREE.MeshMatcapMaterial) materialType = 'MeshMatcapMaterial';\n  else if (material instanceof THREE.MeshToonMaterial) materialType = 'MeshToonMaterial';\n  else if (material instanceof THREE.MeshPhysicalMaterial) materialType = 'MeshPhysicalMaterial';\n  else if (material instanceof THREE.MeshStandardMaterial) materialType = 'MeshStandardMaterial';\n  else if (material instanceof THREE.ShaderMaterial) materialType = 'ShaderMaterial';\n  \n  // Extract properties based on display mode\n  switch (displayMode) {\n    case 'wireframe':\n      properties.push('wireframe: true');\n      properties.push('transparent: true');\n      properties.push('opacity: 0.8');\n      break;\n    case 'solid':\n      properties.push('color: 0x888888');\n      properties.push('metalness: 0.1');\n      properties.push('roughness: 0.8');\n      break;\n    case 'normals':\n      materialType = 'MeshNormalMaterial';\n      break;\n    case 'depth':\n      materialType = 'MeshDepthMaterial';\n      break;\n    case 'points':\n      materialType = 'PointsMaterial';\n      properties.push('color: 0x00ff00');\n      properties.push('size: 0.01');\n      properties.push('sizeAttenuation: true');\n      break;\n    default:\n      // Original material properties\n      properties.push(`color: new THREE.Color(${material.color.r}, ${material.color.g}, ${material.color.b})`);\n      if ('roughness' in material) properties.push(`roughness: ${(material as any).roughness}`);\n      if ('metalness' in material) properties.push(`metalness: ${(material as any).metalness}`);\n      if ('opacity' in material) properties.push(`opacity: ${(material as any).opacity}`);\n      if ('transparent' in material) properties.push(`transparent: ${(material as any).transparent}`);\n      if ('emissive' in material) {\n        const emissive = (material as any).emissive;\n        properties.push(`emissive: new THREE.Color(${emissive.r}, ${emissive.g}, ${emissive.b})`);\n      }\n      if ('emissiveIntensity' in material) properties.push(`emissiveIntensity: ${(material as any).emissiveIntensity}`);\n      if ('shininess' in material) properties.push(`shininess: ${(material as any).shininess}`);\n      break;\n  }\n  \n  switch (languageId) {\n    case 'typescript':\n      return `import * as THREE from 'three';\n/**\n * ${materialName} material\n * Reusable material definition\n */\nexport default function ${materialName}() {\n  return new THREE.${materialType}({\n    ${properties.join(',\\n    ')}\n  });\n}`;\n    case 'javascript':\n      return `import * as THREE from 'three';\n/**\n * ${materialName} material\n * Reusable material definition\n */\nexport default function ${materialName}() {\n  return new THREE.${materialType}({\n    ${properties.join(',\\n    ')}\n  });\n}`;\n    case 'python':\n      return `from three import ${materialType}\n\ndef ${materialName.toLowerCase()}():\n    \"\"\"${materialName} material\n    Reusable material definition\n    \"\"\"\n    return ${materialType}(\n        ${properties.map(prop => prop.replace(': ', '= ')).join(',\\n        ')}\n    )`;\n    case 'java':\n      return `import three.${materialType};\n\n/**\n * ${materialName} material\n * Reusable material definition\n */\npublic class ${materialName} {\n    public static ${materialType} create() {\n        return new ${materialType}(\n            ${properties.map(prop => {\n              const [key, value] = prop.split(': ');\n              return `${key} = ${value}`;\n            }).join(',\\n            ')}\n        );\n    }\n}`;\n    case 'csharp':\n      return `using ThreeJs;\n\n/**\n * ${materialName} material\n * Reusable material definition\n */\npublic class ${materialName}\n{\n    public static ${materialType} Create()\n    {\n        return new ${materialType}\n        {\n            ${properties.map(prop => {\n              const [key, value] = prop.split(': ');\n              return key + \" = \" + value;\n            }).join(',\\n            ')}\n        };\n    }\n}`;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return `import * as THREE from 'three';\n/**\n * ${materialName} material\n * Reusable material definition\n */\nexport default function ${materialName}() {\n  return new THREE.${materialType}({\n    ${properties.join(',\\n    ')}\n  });\n}`;\n  }\n}\n\n/**\n * Generates the main index component that assembles all parts\n * Component name starts with capital letter as required by React\n */\nfunction generateIndexComponent(\n  componentName: string,\n  meshes: MeshData[],\n  materials: MaterialData[],\n  displayMode: string,\n  languageId: LanguageId\n): string {\n  const lang = LANGUAGES[languageId];\n  \n  // Generate imports\n  const meshImports = meshes.map(mesh => \n    lang.import === 'import' ? \n      `import ${mesh.name} from './meshes/${mesh.name}';` :\n      lang.import === 'require' ?\n        `const ${mesh.name} = require('./meshes/${mesh.name}');` :\n        `${lang.import} '${mesh.name}' from './meshes/${mesh.name}';`\n  ).join('\\n');\n  \n  const materialImports = materials.map(material => \n    lang.import === 'import' ? \n      `import ${material.name} from './materials/${material.name}';` :\n      lang.import === 'require' ?\n        `const ${material.name} = require('./materials/${material.name}');` :\n        `${lang.import} '${material.name}' from './materials/${material.name}';`\n  ).join('\\n');\n  \n  const meshElements = meshes.map((mesh, i) => {\n    const material = materials[i % materials.length];\n    return lang.class === 'class' ?\n      `      <${mesh.name} material={${material.name}.create()} />` :\n      `      <${mesh.name} material={${material.name}()} />`;\n  }).join('\\n');\n  \n  switch (languageId) {\n    case 'typescript':\n      return `import React, { useRef } from 'react';\nimport type { GroupProps } from '@react-three/fiber';\n${meshImports}\n${materialImports}\n/**\n * ${componentName} component\n * Main component that assembles all mesh and material parts\n */\nexport default function ${componentName}(props: GroupProps) {\n  const ref = useRef();\n  return (\n    <group ref={ref} {...props}>\n${meshElements}\n    </group>\n  );\n}`;\n    case 'javascript':\n      return `import React, { useRef } from 'react';\n${meshImports}\n${materialImports}\n/**\n * ${componentName} component\n * Main component that assembles all mesh and material parts\n */\nexport default function ${componentName}(props) {\n  const ref = useRef();\n  return (\n    <group ref={ref} {...props}>\n${meshElements}\n    </group>\n  );\n}`;\n    case 'python':\n      return `from react import createElement, useRef\nfrom .meshes import ${meshes.map(m => m.name).join(', ')}\nfrom .materials import ${materials.map(m => m.name).join(', ')}\n\ndef ${componentName.toLowerCase()}(props):\n    \"\"\"${componentName} component\n    Main component that assembles all mesh and material parts\n    \"\"\"\n    ref = useRef()\n    return createElement('group', {**props, 'ref': ref},\n        ${meshes.map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `createElement(${mesh.name}, {'material': ${material.name}()})`;\n        }).join(',\\n        ')})\n`;\n    case 'java':\n      return `import react.Component;\nimport react.Ref;\nimport three.Group;\n\n/**\n * ${componentName} component\n * Main component that assembles all mesh and material parts\n */\npublic class ${componentName} extends Component {\n    private Ref ref;\n    \n    public ${componentName}(Object props) {\n        super(props);\n        this.ref = useRef();\n    }\n    \n    @Override\n    public Object render() {\n        return new Group(ref, props,\n            ${meshes.map((mesh, i) => {\n              const material = materials[i % materials.length];\n              return `new ${mesh.name}(new ${material.name}().create())`;\n            }).join(',\\n            ')});\n    }\n}`;\n    case 'csharp':\n      return `using React;\nusing ThreeJs;\n\n/**\n * ${componentName} component\n * Main component that assembles all mesh and material parts\n */\npublic class ${componentName}\n{\n    private Ref Ref { get; }\n    \n    public ${componentName}(object props)\n    {\n        Ref = useRef();\n    }\n    \n    public object Render(object props)\n    {\n        return new Group(Ref, props,\n            ${meshes.map((mesh, i) => {\n              const material = materials[i % materials.length];\n              return `new ${mesh.name}(props, ${material.name}.Create())`;\n            }).join(\",\\n            \")});\n    }\n}`;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return `import React, { useRef } from 'react';\nimport type { GroupProps } from '@react-three/fiber';\n${meshImports}\n${materialImports}\n/**\n * ${componentName} component\n * Main component that assembles all mesh and material parts\n */\nexport default function ${componentName}(props: GroupProps) {\n  const ref = useRef();\n  return (\n    <group ref={ref} {...props}>\n${meshElements}\n    </group>\n  );\n}`;\n  }\n}\n\n/**\n * Generates a complete example page showing how to use the component\n * Component name starts with capital letter as required by React\n */\nfunction generateExamplePage(componentName: string, languageId: LanguageId): string {\n  const lang = LANGUAGES[languageId];\n  \n  switch (languageId) {\n    case 'typescript':\n      return `import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport ${componentName} from '@/components/${componentName}';\n/**\n * Example page demonstrating how to use the ${componentName} component\n */\nexport default function ${componentName}Page() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas \n        camera={{ position: [0, 0, 5], fov: 50 }}\n        gl={{ \n          powerPreference: \"high-performance\",\n          antialias: true,\n          alpha: true\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${componentName} />\n        <OrbitControls \n          enableZoom \n          enablePan \n          enableRotate \n          minDistance={0.1}\n          maxDistance={100}\n        />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`;\n    case 'javascript':\n      return `import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport ${componentName} from '@/components/${componentName}';\n/**\n * Example page demonstrating how to use the ${componentName} component\n */\nexport default function ${componentName}Page() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas \n        camera={{ position: [0, 0, 5], fov: 50 }}\n        gl={{ \n          powerPreference: \"high-performance\",\n          antialias: true,\n          alpha: true\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${componentName} />\n        <OrbitControls \n          enableZoom \n          enablePan \n          enableRotate \n          minDistance={0.1}\n          maxDistance={100}\n        />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`;\n    case 'python':\n      return `from react import createElement\nfrom three import Canvas, ambientLight, pointLight, Environment\nfrom three.drei import OrbitControls\nfrom components.${componentName.toLowerCase()} import ${componentName}\n\ndef ${componentName}Page(props):\n    \"\"\"Example page demonstrating how to use the ${componentName} component\"\"\"\n    return createElement('div', {'className': 'w-full h-screen'},\n        createElement(Canvas, {\n            'camera': {'position': [0, 0, 5], 'fov': 50},\n            'gl': {\n                'powerPreference': \"high-performance\",\n                'antialias': True,\n                'alpha': True\n            }\n        },\n            ambientLight({'intensity': 0.5}),\n            pointLight({'position': [10, 10, 10]}),\n            ${componentName}(),\n            OrbitControls({\n                'enableZoom': True,\n                'enablePan': True,\n                'enableRotate': True,\n                'minDistance': 0.1,\n                'maxDistance': 100\n            }),\n            Environment({'preset': \"studio\"})\n        )\n    )`;\n    case 'java':\n      return `import react.Component;\nimport three.Canvas;\nimport three.ambientLight;\nimport three.pointLight;\nimport three.Environment;\nimport drei.OrbitControls;\nimport components.${componentName}.${componentName};\n\n/**\n * Example page demonstrating how to use the ${componentName} component\n */\npublic class ${componentName}Page extends Component {\n    @Override\n    public Object render() {\n        return new div(\n            new Canvas(\n                new Canvas.Properties()\n                    .camera(new CameraProperties().position(new float[]{0, 0, 5}).fov(50))\n                    .gl(new GLProperties()\n                        .powerPreference(\"high-performance\")\n                        .antialias(true)\n                        .alpha(true)),\n                new ambientLight(new LightProperties().intensity(0.5)),\n                new pointLight(new LightProperties().position(new float[]{10, 10, 10})),\n                new ${componentName}(),\n                new OrbitControls(new OrbitControls.Properties()\n                    .enableZoom(true)\n                    .enablePan(true)\n                    .enableRotate(true)\n                    .minDistance(0.1f)\n                    .maxDistance(100f)),\n                new Environment(new Environment.Properties().preset(\"studio\"))\n            )\n        );\n    }\n}`;\n    case 'csharp':\n      return `using React;\nusing ThreeJs;\nusing Drei;\n\n/**\n * Example page demonstrating how to use the ${componentName} component\n */\npublic class ${componentName}Page\n{\n    public object Render()\n    {\n        return new div(new {\n            ClassName = \"w-full h-screen\"\n        },\n            new Canvas(new {\n                Camera = new {\n                    Position = new[] { 0f, 0f, 5f },\n                    Fov = 50f\n                },\n                Gl = new {\n                    PowerPreference = \"high-performance\",\n                    Antialias = true,\n                    Alpha = true\n                }\n            },\n                new ambientLight(new { Intensity = 0.5f }),\n                new pointLight(new { Position = new[] { 10f, 10f, 10f } }),\n                new ${componentName}(),\n                new OrbitControls(new {\n                    EnableZoom = true,\n                    EnablePan = true,\n                    EnableRotate = true,\n                    MinDistance = 0.1f,\n                    MaxDistance = 100f\n                }),\n                new Environment(new { Preset = \"studio\" })\n            )\n        );\n    }\n}`;\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return `import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport ${componentName} from '@/components/${componentName}';\n/**\n * Example page demonstrating how to use the ${componentName} component\n */\nexport default function ${componentName}Page() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas \n        camera={{ position: [0, 0, 5], fov: 50 }}\n        gl={{ \n          powerPreference: \"high-performance\",\n          antialias: true,\n          alpha: true\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${componentName} />\n        <OrbitControls \n          enableZoom \n          enablePan \n          enableRotate \n          minDistance={0.1}\n          maxDistance={100}\n        />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`;\n  }\n}\n\n/**\n * Sanitizes names to be valid JavaScript identifiers\n */\nfunction sanitizeName(name: string): string {\n  // Replace invalid characters with underscores\n  let safeName = name.replace(/[^a-zA-Z0-9_]/g, '_');\n  // Ensure it starts with a letter\n  if (!/^[a-zA-Z_]/.test(safeName)) {\n    safeName = '_' + safeName;\n  }\n  // Handle reserved keywords\n  const reservedKeywords = ['default', 'function', 'class', 'export', 'import', 'let', 'const', 'var'];\n  if (reservedKeywords.includes(safeName.toLowerCase())) {\n    safeName = '_' + safeName;\n  }\n  return safeName;\n}"],"names":[],"mappings":";;;AAAA;;AAIA,6CAA6C;AAC7C,MAAM,YAAY;IAChB,YAAY;QACV,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC;QACrD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACnE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,YAAY;QACV,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,IAAM;QACvB,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACnE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,QAAQ;QACN,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,IAAM;QACvB,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE,OAAO;QACvE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,MAAM;QACJ,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,aAAa,EAAE,KAAK,EAAE,CAAC;QAC3D,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QAC7E,OAAO,CAAC,QAAoB,CAAC,qBAAqB,EAAE,MAAM,GAAG,CAAC,CAAA,OAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,IAAI,CAAC;QACtG,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,QAAQ;QACN,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,aAAa,EAAE,KAAK,EAAE,CAAC;QAC3D,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,IAAI,cAAc,CAAC;QAC1F,OAAO,CAAC,QAAoB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,IAAI,SAAS,IAAI,EAAE,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACtG,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,KAAK;QACH,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,UAAU,CAAC;QAC5D,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,IAAI;QACF,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,KAAK,EAAE,KAAK,SAAS,CAAC;QAC1D,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,SAAS,EAAE,IAAI,WAAW,GAAG,GAAG,CAAC;QACrG,OAAO,CAAC,QAAoB,CAAC,cAAc,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QAChE,eAAe,CAAC,QAAkB,CAAC,CAAC,CAAC,GAAG,MAAM,OAAO,CAAC,MAAM,SAAS,CAAC,CAAC,CAAC;IAC1E;IACA,MAAM;QACJ,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;QACzD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QAC3E,OAAO,CAAC,QAAoB,CAAC,KAAK,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACvD,eAAe,CAAC,QAAkB,CAAC,CAAC,CAAC,GAAG,MAAM,OAAO,CAAC,MAAM,SAAS,CAAC,CAAC,CAAC;IAC1E;IACA,OAAO;QACL,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;QACpD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,OAAO;QAC1E,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,QAAQ;QACN,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;QACpD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,MAAM,QAAQ,CAAC;QAClF,OAAO,CAAC,QAAoB,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACzD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,MAAM;QACJ,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,MAAM;QAClD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,iBAAiB,EAAE,KAAK;QACzE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,KAAK;QACH,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;QACpD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,QAAoB,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,OAAO;QACL,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;QACzD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACnE,OAAO,CAAC,QAAoB,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACtD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,MAAM;QACJ,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;QACpD,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QACpE,OAAO,CAAC,QAAoB,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;IACA,GAAG;QACD,WAAW;QACX,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,UAAU;QACV,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,iBAAiB,CAAC,OAAiB,CAAC,UAAU,EAAE,KAAK,gBAAgB,CAAC;QACtE,SAAS;QACT,gBAAgB,CAAC,KAAa,QAAkB,CAAC,CAAC,EAAE,IAAI,KAAK,EAAE,MAAM,EAAE,CAAC;QACxE,OAAO,CAAC,QAAoB,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QACpD,eAAe,CAAC,QAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAChD;AACF;AAIA;;;CAGC,GACD,SAAS,WAAW,GAAW;IAC7B,OAAO,IAAI,MAAM,CAAC,GAAG,WAAW,KAAK,IAAI,KAAK,CAAC;AACjD;AAMO,SAAS,yBACd,IAAU,EACV,aAAqB,EACrB,cAAsB,UAAU,EAChC,aAAyB,YAAY;IAErC,MAAM,OAAO,SAAS,CAAC,WAAW;IAClC,MAAM,SAAqB,EAAE;IAC7B,MAAM,YAA4B,EAAE;IACpC,MAAM,aAA6B,EAAE,EAAE,+BAA+B;IACtE,IAAI,gBAAgB;IACpB,IAAI,iBAAiB;IAErB,oDAAoD;IACpD,KAAK,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnB,IAAI,OAAO,MAAM,EAAE;YACjB,MAAM,OAAO;YACb,MAAM,WAAW,KAAK,QAAQ;YAE9B,+BAA+B;YAC/B,iBAAiB,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK;YACnD,IAAI,SAAS,KAAK,EAAE;gBAClB,kBAAkB,SAAS,KAAK,CAAC,KAAK,GAAG;YAC3C,OAAO;gBACL,kBAAkB,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK,GAAG;YACzD;YAEA,qBAAqB;YACrB,MAAM,WAAW,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,OAAO,MAAM,EAAE;YACrD,MAAM,eAAe,aAAa;YAClC,MAAM,sBAAsB,WAAW;YAEvC,yBAAyB;YACzB,MAAM,eAAe,qBAAqB,qBAAqB,UAAU;YACzE,WAAW,IAAI,CAAC;gBACd,MAAM;gBACN,SAAS;gBACT,cAAc;YAChB;YAEA,wCAAwC;YACxC,MAAM,gBAAgB,sBAAsB,qBAAqB,UAAU,aAAa;YACxF,OAAO,IAAI,CAAC;gBACV,MAAM;gBACN,SAAS;gBACT,cAAc;YAChB;YAEA,oBAAoB;YACpB,MAAM,WAAW,MAAM,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,QAAQ,CAAC,EAAE,GAAG,KAAK,QAAQ;YAChF,MAAM,eAAe,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE,UAAU,MAAM,EAAE;YACpE,MAAM,mBAAmB,aAAa;YACtC,MAAM,0BAA0B,WAAW;YAE3C,4BAA4B;YAC5B,IAAI,CAAC,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,0BAA0B;gBAC5D,MAAM,oBAAoB,0BAA0B,yBAAyB,UAAU,aAAa;gBACpG,UAAU,IAAI,CAAC;oBACb,MAAM;oBACN,SAAS;oBACT,cAAc;gBAChB;YACF;QACF;IACF;IAEA,uDAAuD;IACvD,MAAM,2BAA2B,WAAW;IAE5C,oCAAoC;IACpC,MAAM,eAAe,uBAAuB,0BAA0B,QAAQ,WAAW,aAAa;IAEtG,4BAA4B;IAC5B,MAAM,qBAAqB,oBAAoB,0BAA0B;IAEzE,OAAO;QACL,eAAe;QACf;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;AAEA;;;CAGC,GACD,SAAS,qBAAqB,QAAgB,EAAE,QAA8B,EAAE,UAAsB;IACpG,MAAM,OAAO,SAAS,CAAC,WAAW;IAClC,wBAAwB;IACxB,MAAM,YAAY,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK;IAC/D,MAAM,UAAU,SAAS,UAAU,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,MAAM,CAAC,KAAK,IAAI;IAC5F,MAAM,MAAM,SAAS,UAAU,CAAC,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,EAAE,CAAC,KAAK,IAAI;IAChF,MAAM,UAAU,SAAS,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,KAAK,CAAC,KAAK,IAAI;IAEpE,sDAAsD;IACtD,MAAM,kBAAkB,UAAU,MAAM,GAAG;IAE3C,OAAQ;QACN,KAAK;QACL,KAAK;YACH,OAAO,CAAC;GACX,EAAE,SAAS;;aAED,EAAE,SAAS;;EAEtB,EAAE,kBACA,CAAC;;;;;;;;;;;;+CAY0C,EAAE,KAAK,SAAS,CAAC,WAAW;;;IAGvE,EAAE,UAAU,CAAC;6CAC4B,EAAE,KAAK,SAAS,CAAC,SAAS;;2EAEI,CAAC,GAAG,GAAG;IAC9E,EAAE,MAAM,CAAC;yCAC4B,EAAE,KAAK,SAAS,CAAC,KAAK;;mEAEI,CAAC,GAAG,GAAG;IACtE,EAAE,UAAU,CAAC;4CAC2B,EAAE,KAAK,SAAS,CAAC,SAAS;;6DAET,CAAC,GAAG,IAAI,GACjE,CAAC;uCACkC,EAAE,KAAK,SAAS,CAAC,WAAW;;IAE/D,EAAE,UAAU,CAAC;qCACoB,EAAE,KAAK,SAAS,CAAC,SAAS;2EACY,CAAC,GAAG,GAAG;IAC9E,EAAE,MAAM,CAAC;iCACoB,EAAE,KAAK,SAAS,CAAC,KAAK;mEACY,CAAC,GAAG,GAAG;IACtE,EAAE,UAAU,CAAC;oCACmB,EAAE,KAAK,SAAS,CAAC,SAAS;6DACD,CAAC,GAAG,IAAI,CAClE;;;;AAIH,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;;EAGZ,EAAE,SAAS;;AAEb,EAAE,SAAS;IACP,EAAE,kBACA,CAAC;;;;;;;;;;;8CAWuC,EAAE,KAAK,SAAS,CAAC,WAAW;;;;MAIpE,EAAE,UAAU,CAAC;4CACyB,EAAE,KAAK,SAAS,CAAC,SAAS;;mEAEH,CAAC,GAAG,GAAG;MACpE,EAAE,MAAM,CAAC;wCACyB,EAAE,KAAK,SAAS,CAAC,KAAK;;2DAEH,CAAC,GAAG,GAAG;MAC5D,EAAE,UAAU,CAAC;2CACwB,EAAE,KAAK,SAAS,CAAC,SAAS;;qDAEhB,CAAC,GAAG,GAAG;;qBAEvC,CAAC,GAChB,CAAC;2BACoB,EAAE,KAAK,SAAS,CAAC,WAAW;;;MAGjD,EAAE,UAAU,CAAC;yBACM,EAAE,KAAK,SAAS,CAAC,SAAS;mEACgB,CAAC,GAAG,GAAG;MACpE,EAAE,MAAM,CAAC;qBACM,EAAE,KAAK,SAAS,CAAC,KAAK;2DACgB,CAAC,GAAG,GAAG;MAC5D,EAAE,UAAU,CAAC;yBACM,EAAE,KAAK,SAAS,CAAC,SAAS;qDACE,CAAC,GAAG,GAAG;;qBAEvC,CAAC,CAAC;;AAEvB,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;;;GAIX,EAAE,SAAS;;;aAGD,EAAE,SAAS;;;QAGhB,EAAE,kBACA,CAAC;;kDAEuC,EAAE,KAAK,SAAS,CAAC,WAAW;;UAEpE,EAAE,UAAU,CAAC,sCAAsC,EAAE,KAAK,SAAS,CAAC,SAAS;2EACZ,CAAC,GAAG,GAAG;UACxE,EAAE,MAAM,CAAC,kCAAkC,EAAE,KAAK,SAAS,CAAC,KAAK;mEACR,CAAC,GAAG,GAAG;UAChE,EAAE,UAAU,CAAC,sCAAsC,EAAE,KAAK,SAAS,CAAC,SAAS;6DAC1B,CAAC,GAAG,GAAG;;0BAE1C,CAAC,GACjB,CAAC,oBAAoB,EAAE,KAAK,SAAS,CAAC,WAAW;;UAEjD,EAAE,UAAU,CAAC,kBAAkB,EAAE,KAAK,SAAS,CAAC,SAAS;2EACQ,CAAC,GAAG,GAAG;UACxE,EAAE,MAAM,CAAC,cAAc,EAAE,KAAK,SAAS,CAAC,KAAK;mEACY,CAAC,GAAG,GAAG;UAChE,EAAE,UAAU,CAAC,kBAAkB,EAAE,KAAK,SAAS,CAAC,SAAS;6DACN,CAAC,GAAG,GAAG;;0BAE1C,CAAC,CAAC;;;IAGxB,EAAE,kBACA,CAAC;;;;;;;;;;;;;;KAcF,CAAC,GAAG,GAAG;;AAEZ,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;;;;GAKX,EAAE,SAAS;;;aAGD,EAAE,SAAS;;;;;QAKhB,EAAE,kBACA,CAAC;;8CAEmC,EAAE,KAAK,SAAS,CAAC,WAAW;;UAEhE,EAAE,UAAU,CAAC,kCAAkC,EAAE,KAAK,SAAS,CAAC,SAAS;2EACR,CAAC,GAAG,GAAG;UACxE,EAAE,MAAM,CAAC,8BAA8B,EAAE,KAAK,SAAS,CAAC,KAAK;mEACJ,CAAC,GAAG,GAAG;UAChE,EAAE,UAAU,CAAC,kCAAkC,EAAE,KAAK,SAAS,CAAC,SAAS;6DACtB,CAAC,GAAG,GAAG;;0BAE1C,CAAC,GACjB,CAAC,8BAA8B,EAAE,KAAK,SAAS,CAAC,WAAW,KAAK,CAAC,GAAG,CAAC,GAAG;;UAExE,EAAE,UAAU,CAAC,4BAA4B,EAAE,KAAK,SAAS,CAAC,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG;2EACf,CAAC,GAAG,GAAG;UACxE,EAAE,MAAM,CAAC,wBAAwB,EAAE,KAAK,SAAS,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG;mEACX,CAAC,GAAG,GAAG;UAChE,EAAE,UAAU,CAAC,6BAA6B,EAAE,KAAK,SAAS,CAAC,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG;6DAC9B,CAAC,GAAG,GAAG;;0BAE1C,CAAC,CAAC;;;IAGxB,EAAE,kBACA,CAAC;;;;;;;;;;OAUA,CAAC,GAAG,GAAG;;AAEd,CAAC;QACG;YACE,mDAAmD;YACnD,OAAO,CAAC;GACX,EAAE,SAAS;;aAED,EAAE,SAAS;;;qCAGa,EAAE,KAAK,SAAS,CAAC,WAAW;;EAE/D,EAAE,UAAU,CAAC;mCACoB,EAAE,KAAK,SAAS,CAAC,SAAS;yEACY,CAAC,GAAG,GAAG;EAC9E,EAAE,MAAM,CAAC;+BACoB,EAAE,KAAK,SAAS,CAAC,KAAK;iEACY,CAAC,GAAG,GAAG;EACtE,EAAE,UAAU,CAAC;kCACmB,EAAE,KAAK,SAAS,CAAC,SAAS;2DACD,CAAC,GAAG,GAAG;;;;AAIlE,CAAC;IACC;AACF;AAEA;;;;CAIC,GACD,SAAS,sBAAsB,QAAgB,EAAE,SAA+B,EAAE,WAAmB,EAAE,UAAsB;IAC3H,MAAM,OAAO,SAAS,CAAC,WAAW;IAElC,OAAQ;QACN,KAAK;YACH,OAAO,CAAC;SACL,EAAE,SAAS,+BAA+B,EAAE,SAAS;;GAE3D,EAAE,SAAS;;;;wBAIU,EAAE,SAAS;yBACV,EAAE,SAAS;CACnC,CAAC;QACE,KAAK;YACH,OAAO,CAAC;SACL,EAAE,SAAS,+BAA+B,EAAE,SAAS;;GAE3D,EAAE,SAAS;;;;wBAIU,EAAE,SAAS;yBACV,EAAE,SAAS;CACnC,CAAC;QACE,KAAK;YACH,OAAO,CAAC;iBACG,EAAE,SAAS,gBAAgB,EAAE,SAAS;;IAEnD,EAAE,SAAS,WAAW,GAAG;OACtB,EAAE,SAAS;;;;uDAIqC,EAAE,SAAS,UAAU,CAAC;QACzE,KAAK;YACH,OAAO,CAAC;;;;;GAKX,EAAE,SAAS;;;;aAID,EAAE,SAAS;;;WAGb,EAAE,SAAS;;wBAEE,EAAE,SAAS;;;;;;;CAOlC,CAAC;QACE,KAAK;YACH,OAAO,CAAC;;;;GAIX,EAAE,SAAS;;;;aAID,EAAE,SAAS;;;;WAIb,EAAE,SAAS;;mBAEH,EAAE,SAAS;;;;;;;CAO7B,CAAC;QACE;YACE,mDAAmD;YACnD,OAAO,CAAC;SACL,EAAE,SAAS,+BAA+B,EAAE,SAAS;;GAE3D,EAAE,SAAS;;;;wBAIU,EAAE,SAAS;yBACV,EAAE,SAAS;CACnC,CAAC;IACA;AACF;AAEA;;;CAGC,GACD,SAAS,0BAA0B,YAAoB,EAAE,QAAwB,EAAE,WAAmB,EAAE,UAAsB;IAC5H,MAAM,OAAO,SAAS,CAAC,WAAW;IAElC,2BAA2B;IAC3B,IAAI,eAAe;IACnB,IAAI,aAAuB,EAAE;IAE7B,0BAA0B;IAC1B,IAAI,oBAAoB,+IAAA,CAAA,oBAAuB,EAAE,eAAe;SAC3D,IAAI,oBAAoB,+IAAA,CAAA,oBAAuB,EAAE,eAAe;SAChE,IAAI,oBAAoB,+IAAA,CAAA,sBAAyB,EAAE,eAAe;SAClE,IAAI,oBAAoB,+IAAA,CAAA,qBAAwB,EAAE,eAAe;SACjE,IAAI,oBAAoB,+IAAA,CAAA,oBAAuB,EAAE,eAAe;SAChE,IAAI,oBAAoB,+IAAA,CAAA,qBAAwB,EAAE,eAAe;SACjE,IAAI,oBAAoB,+IAAA,CAAA,mBAAsB,EAAE,eAAe;SAC/D,IAAI,oBAAoB,+IAAA,CAAA,uBAA0B,EAAE,eAAe;SACnE,IAAI,oBAAoB,+IAAA,CAAA,uBAA0B,EAAE,eAAe;SACnE,IAAI,oBAAoB,+IAAA,CAAA,iBAAoB,EAAE,eAAe;IAElE,2CAA2C;IAC3C,OAAQ;QACN,KAAK;YACH,WAAW,IAAI,CAAC;YAChB,WAAW,IAAI,CAAC;YAChB,WAAW,IAAI,CAAC;YAChB;QACF,KAAK;YACH,WAAW,IAAI,CAAC;YAChB,WAAW,IAAI,CAAC;YAChB,WAAW,IAAI,CAAC;YAChB;QACF,KAAK;YACH,eAAe;YACf;QACF,KAAK;YACH,eAAe;YACf;QACF,KAAK;YACH,eAAe;YACf,WAAW,IAAI,CAAC;YAChB,WAAW,IAAI,CAAC;YAChB,WAAW,IAAI,CAAC;YAChB;QACF;YACE,+BAA+B;YAC/B,WAAW,IAAI,CAAC,CAAC,uBAAuB,EAAE,SAAS,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvG,IAAI,eAAe,UAAU,WAAW,IAAI,CAAC,CAAC,WAAW,EAAE,AAAC,SAAiB,SAAS,EAAE;YACxF,IAAI,eAAe,UAAU,WAAW,IAAI,CAAC,CAAC,WAAW,EAAE,AAAC,SAAiB,SAAS,EAAE;YACxF,IAAI,aAAa,UAAU,WAAW,IAAI,CAAC,CAAC,SAAS,EAAE,AAAC,SAAiB,OAAO,EAAE;YAClF,IAAI,iBAAiB,UAAU,WAAW,IAAI,CAAC,CAAC,aAAa,EAAE,AAAC,SAAiB,WAAW,EAAE;YAC9F,IAAI,cAAc,UAAU;gBAC1B,MAAM,WAAW,AAAC,SAAiB,QAAQ;gBAC3C,WAAW,IAAI,CAAC,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YAC1F;YACA,IAAI,uBAAuB,UAAU,WAAW,IAAI,CAAC,CAAC,mBAAmB,EAAE,AAAC,SAAiB,iBAAiB,EAAE;YAChH,IAAI,eAAe,UAAU,WAAW,IAAI,CAAC,CAAC,WAAW,EAAE,AAAC,SAAiB,SAAS,EAAE;YACxF;IACJ;IAEA,OAAQ;QACN,KAAK;YACH,OAAO,CAAC;;GAEX,EAAE,aAAa;;;wBAGM,EAAE,aAAa;mBACpB,EAAE,aAAa;IAC9B,EAAE,WAAW,IAAI,CAAC,WAAW;;CAEhC,CAAC;QACE,KAAK;YACH,OAAO,CAAC;;GAEX,EAAE,aAAa;;;wBAGM,EAAE,aAAa;mBACpB,EAAE,aAAa;IAC9B,EAAE,WAAW,IAAI,CAAC,WAAW;;CAEhC,CAAC;QACE,KAAK;YACH,OAAO,CAAC,kBAAkB,EAAE,aAAa;;IAE3C,EAAE,aAAa,WAAW,GAAG;OAC1B,EAAE,aAAa;;;WAGX,EAAE,aAAa;QAClB,EAAE,WAAW,GAAG,CAAC,CAAA,OAAQ,KAAK,OAAO,CAAC,MAAM,OAAO,IAAI,CAAC,eAAe;KAC1E,CAAC;QACF,KAAK;YACH,OAAO,CAAC,aAAa,EAAE,aAAa;;;GAGvC,EAAE,aAAa;;;aAGL,EAAE,aAAa;kBACV,EAAE,aAAa;mBACd,EAAE,aAAa;YACtB,EAAE,WAAW,GAAG,CAAC,CAAA;gBACf,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,GAAG,IAAI,GAAG,EAAE,OAAO;YAC5B,GAAG,IAAI,CAAC,mBAAmB;;;CAGtC,CAAC;QACE,KAAK;YACH,OAAO,CAAC;;;GAGX,EAAE,aAAa;;;aAGL,EAAE,aAAa;;kBAEV,EAAE,aAAa;;mBAEd,EAAE,aAAa;;YAEtB,EAAE,WAAW,GAAG,CAAC,CAAA;gBACf,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;gBAChC,OAAO,MAAM,QAAQ;YACvB,GAAG,IAAI,CAAC,mBAAmB;;;CAGtC,CAAC;QACE;YACE,mDAAmD;YACnD,OAAO,CAAC;;GAEX,EAAE,aAAa;;;wBAGM,EAAE,aAAa;mBACpB,EAAE,aAAa;IAC9B,EAAE,WAAW,IAAI,CAAC,WAAW;;CAEhC,CAAC;IACA;AACF;AAEA;;;CAGC,GACD,SAAS,uBACP,aAAqB,EACrB,MAAkB,EAClB,SAAyB,EACzB,WAAmB,EACnB,UAAsB;IAEtB,MAAM,OAAO,SAAS,CAAC,WAAW;IAElC,mBAAmB;IACnB,MAAM,cAAc,OAAO,GAAG,CAAC,CAAA,OAC7B,KAAK,MAAM,KAAK,WACd,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,gBAAgB,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,GACnD,KAAK,MAAM,KAAK,YACd,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,qBAAqB,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,GACxD,GAAG,KAAK,MAAM,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,iBAAiB,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,EACjE,IAAI,CAAC;IAEP,MAAM,kBAAkB,UAAU,GAAG,CAAC,CAAA,WACpC,KAAK,MAAM,KAAK,WACd,CAAC,OAAO,EAAE,SAAS,IAAI,CAAC,mBAAmB,EAAE,SAAS,IAAI,CAAC,EAAE,CAAC,GAC9D,KAAK,MAAM,KAAK,YACd,CAAC,MAAM,EAAE,SAAS,IAAI,CAAC,wBAAwB,EAAE,SAAS,IAAI,CAAC,GAAG,CAAC,GACnE,GAAG,KAAK,MAAM,CAAC,EAAE,EAAE,SAAS,IAAI,CAAC,oBAAoB,EAAE,SAAS,IAAI,CAAC,EAAE,CAAC,EAC5E,IAAI,CAAC;IAEP,MAAM,eAAe,OAAO,GAAG,CAAC,CAAC,MAAM;QACrC,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,KAAK,KAAK,KAAK,UACpB,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,WAAW,EAAE,SAAS,IAAI,CAAC,aAAa,CAAC,GAC7D,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,WAAW,EAAE,SAAS,IAAI,CAAC,MAAM,CAAC;IAC1D,GAAG,IAAI,CAAC;IAER,OAAQ;QACN,KAAK;YACH,OAAO,CAAC;;AAEd,EAAE,YAAY;AACd,EAAE,gBAAgB;;GAEf,EAAE,cAAc;;;wBAGK,EAAE,cAAc;;;;AAIxC,EAAE,aAAa;;;CAGd,CAAC;QACE,KAAK;YACH,OAAO,CAAC;AACd,EAAE,YAAY;AACd,EAAE,gBAAgB;;GAEf,EAAE,cAAc;;;wBAGK,EAAE,cAAc;;;;AAIxC,EAAE,aAAa;;;CAGd,CAAC;QACE,KAAK;YACH,OAAO,CAAC;oBACM,EAAE,OAAO,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM;uBAClC,EAAE,UAAU,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM;;IAE3D,EAAE,cAAc,WAAW,GAAG;OAC3B,EAAE,cAAc;;;;;QAKf,EAAE,OAAO,GAAG,CAAC,CAAC,MAAM;gBAClB,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,cAAc,EAAE,KAAK,IAAI,CAAC,eAAe,EAAE,SAAS,IAAI,CAAC,IAAI,CAAC;YACxE,GAAG,IAAI,CAAC,eAAe;AAC/B,CAAC;QACG,KAAK;YACH,OAAO,CAAC;;;;;GAKX,EAAE,cAAc;;;aAGN,EAAE,cAAc;;;WAGlB,EAAE,cAAc;;;;;;;;YAQf,EAAE,OAAO,GAAG,CAAC,CAAC,MAAM;gBAClB,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,IAAI,EAAE,KAAK,IAAI,CAAC,KAAK,EAAE,SAAS,IAAI,CAAC,YAAY,CAAC;YAC5D,GAAG,IAAI,CAAC,mBAAmB;;CAEtC,CAAC;QACE,KAAK;YACH,OAAO,CAAC;;;;GAIX,EAAE,cAAc;;;aAGN,EAAE,cAAc;;;;WAIlB,EAAE,cAAc;;;;;;;;YAQf,EAAE,OAAO,GAAG,CAAC,CAAC,MAAM;gBAClB,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;gBAChD,OAAO,CAAC,IAAI,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,SAAS,IAAI,CAAC,UAAU,CAAC;YAC7D,GAAG,IAAI,CAAC,mBAAmB;;CAEtC,CAAC;QACE;YACE,mDAAmD;YACnD,OAAO,CAAC;;AAEd,EAAE,YAAY;AACd,EAAE,gBAAgB;;GAEf,EAAE,cAAc;;;wBAGK,EAAE,cAAc;;;;AAIxC,EAAE,aAAa;;;CAGd,CAAC;IACA;AACF;AAEA;;;CAGC,GACD,SAAS,oBAAoB,aAAqB,EAAE,UAAsB;IACxE,MAAM,OAAO,SAAS,CAAC,WAAW;IAElC,OAAQ;QACN,KAAK;YACH,OAAO,CAAC;;;OAGP,EAAE,cAAc,oBAAoB,EAAE,cAAc;;6CAEd,EAAE,cAAc;;wBAErC,EAAE,cAAc;;;;;;;;;;;;;SAa/B,EAAE,cAAc;;;;;;;;;;;;CAYxB,CAAC;QACE,KAAK;YACH,OAAO,CAAC;;;OAGP,EAAE,cAAc,oBAAoB,EAAE,cAAc;;6CAEd,EAAE,cAAc;;wBAErC,EAAE,cAAc;;;;;;;;;;;;;SAa/B,EAAE,cAAc;;;;;;;;;;;;CAYxB,CAAC;QACE,KAAK;YACH,OAAO,CAAC;;;gBAGE,EAAE,cAAc,WAAW,GAAG,QAAQ,EAAE,cAAc;;IAElE,EAAE,cAAc;iDAC6B,EAAE,cAAc;;;;;;;;;;;;YAYrD,EAAE,cAAc;;;;;;;;;;KAUvB,CAAC;QACF,KAAK;YACH,OAAO,CAAC;;;;;;kBAMI,EAAE,cAAc,CAAC,EAAE,cAAc;;;6CAGN,EAAE,cAAc;;aAEhD,EAAE,cAAc;;;;;;;;;;;;;oBAaT,EAAE,cAAc;;;;;;;;;;;CAWnC,CAAC;QACE,KAAK;YACH,OAAO,CAAC;;;;;6CAK+B,EAAE,cAAc;;aAEhD,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;oBAoBT,EAAE,cAAc;;;;;;;;;;;;CAYnC,CAAC;QACE;YACE,mDAAmD;YACnD,OAAO,CAAC;;;OAGP,EAAE,cAAc,oBAAoB,EAAE,cAAc;;6CAEd,EAAE,cAAc;;wBAErC,EAAE,cAAc;;;;;;;;;;;;;SAa/B,EAAE,cAAc;;;;;;;;;;;;CAYxB,CAAC;IACA;AACF;AAEA;;CAEC,GACD,SAAS,aAAa,IAAY;IAChC,8CAA8C;IAC9C,IAAI,WAAW,KAAK,OAAO,CAAC,kBAAkB;IAC9C,iCAAiC;IACjC,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW;QAChC,WAAW,MAAM;IACnB;IACA,2BAA2B;IAC3B,MAAM,mBAAmB;QAAC;QAAW;QAAY;QAAS;QAAU;QAAU;QAAO;QAAS;KAAM;IACpG,IAAI,iBAAiB,QAAQ,CAAC,SAAS,WAAW,KAAK;QACrD,WAAW,MAAM;IACnB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1225, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/glb-convertor/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment, Html } from '@react-three/drei';\nimport { Download, Upload, Eye, Code, Loader2, AlertCircle, File, FileText, Folder, Layout, Languages } from 'lucide-react';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport JSZip from 'jszip';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport saveAs from 'file-saver';\nimport { generateProjectStructure } from '@/app/lib/glb-converter';\nimport { MeshData, MaterialData, ProjectStructure, GeometryData } from '@/app/types/glb-convertor';\n\n// Language configuration for syntax highlighting and code generation\nconst LANGUAGES = [\n  { id: 'typescript', name: 'TypeScript', extension: 'tsx', geometryExtension: 'ts', group: 'Web' },\n  { id: 'javascript', name: 'JavaScript', extension: 'jsx', geometryExtension: 'js', group: 'Web' },\n  { id: 'python', name: 'Python', extension: 'py', geometryExtension: 'py', group: 'General' },\n  { id: 'java', name: 'Java', extension: 'java', geometryExtension: 'java', group: 'General' },\n  { id: 'csharp', name: 'C#', extension: 'cs', geometryExtension: 'cs', group: 'General' },\n  { id: 'cpp', name: 'C++', extension: 'cpp', geometryExtension: 'h', group: 'Systems' },\n  { id: 'go', name: 'Go', extension: 'go', geometryExtension: 'go', group: 'Systems' },\n  { id: 'rust', name: 'Rust', extension: 'rs', geometryExtension: 'rs', group: 'Systems' },\n  { id: 'swift', name: 'Swift', extension: 'swift', geometryExtension: 'swift', group: 'Mobile' },\n  { id: 'kotlin', name: 'Kotlin', extension: 'kt', geometryExtension: 'kt', group: 'Mobile' },\n  { id: 'ruby', name: 'Ruby', extension: 'rb', geometryExtension: 'rb', group: 'Web' },\n  { id: 'php', name: 'PHP', extension: 'php', geometryExtension: 'php', group: 'Web' },\n  { id: 'scala', name: 'Scala', extension: 'scala', geometryExtension: 'scala', group: 'General' },\n  { id: 'dart', name: 'Dart', extension: 'dart', geometryExtension: 'dart', group: 'Mobile' },\n  { id: 'r', name: 'R', extension: 'R', geometryExtension: 'R', group: 'Data Science' }\n] as const;\n\ntype LanguageId = typeof LANGUAGES[number]['id'];\n\n// VS Code-like editor component with syntax highlighting\nfunction CodeEditor({ code, languageId }: { code: string; languageId: LanguageId }) {\n  const language = LANGUAGES.find(lang => lang.id === languageId);\n  const lines = code.split('\\n');\n  \n  const getSyntaxClass = (line: string, index: number) => {\n    if (line.trim().startsWith('//') || line.trim().startsWith('#')) {\n      return 'text-[#6A9955]'; // Comments\n    }\n    if (line.includes('import') || line.includes('from') || line.includes('require')) {\n      return 'text-[#C586C0]'; // Imports\n    }\n    if (line.includes('function') || line.includes('def') || line.includes('class')) {\n      return 'text-[#569CD6]'; // Keywords\n    }\n    if (line.includes('const') || line.includes('let') || line.includes('var') || \n        line.includes('final') || line.includes('static') || line.includes('public')) {\n      return 'text-[#9CDCFE]'; // Variables\n    }\n    if (line.includes('{') || line.includes('}') || line.includes('[') || line.includes(']') || \n        line.includes('(') || line.includes(')')) {\n      return 'text-[#D4D4D4]'; // Brackets\n    }\n    if (line.includes('=') || line.includes('+') || line.includes('-') || \n        line.includes('*') || line.includes('/') || line.includes('%')) {\n      return 'text-[#D4D4D4]'; // Operators\n    }\n    if (line.includes('\"') || line.includes(\"'\") || line.includes('`')) {\n      return 'text-[#CE9178]'; // Strings\n    }\n    if (!isNaN(Number(line.trim())) || line.trim().match(/0x[0-9A-Fa-f]+/)) {\n      return 'text-[#B5CEA8]'; // Numbers\n    }\n    return 'text-[#D4D4D4]'; // Default\n  };\n\n  return (\n    <div className=\"bg-[#1E1E1E] rounded-lg overflow-hidden font-mono text-sm h-full flex flex-col\">\n      <div className=\"bg-[#3C3C3C] px-4 py-2 flex items-center justify-between border-b border-[#333333]\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-full bg-[#FF5F56]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#FFBD2E]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#27C93F]\"></div>\n        </div>\n        <div className=\"text-[#CCCCCC] text-xs flex items-center gap-2\">\n          <span>{language?.name}</span>\n          <span className=\"text-[#858585]\">•</span>\n          <span className=\"text-[#858585]\">{lines.length} lines</span>\n        </div>\n      </div>\n      <div className=\"flex-1 overflow-auto p-4\">\n        <div className=\"flex\">\n          <div className=\"text-[#858585] w-8 select-none flex-shrink-0 pr-4 text-right\">\n            {lines.map((_, i) => (\n              <div key={i} className=\"select-none\">{i + 1}</div>\n            ))}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            {lines.map((line, i) => (\n              <div key={i} className={`whitespace-pre ${getSyntaxClass(line, i)}`}>\n                {line}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Language selector component with grouping\nfunction LanguageSelector({ \n  selectedLanguage, \n  onChange \n}: { \n  selectedLanguage: LanguageId; \n  onChange: (language: LanguageId) => void \n}) {\n  const groups = Array.from(new Set(LANGUAGES.map(lang => lang.group)));\n  \n  return (\n    <div className=\"relative\">\n      <div className=\"flex items-center gap-2\">\n        <Languages className=\"w-4 h-4 text-purple-400\" />\n        <select\n          value={selectedLanguage}\n          onChange={(e) => onChange(e.target.value as LanguageId)}\n          className=\"bg-slate-700 text-white px-3 py-1.5 rounded border border-slate-600 focus:border-purple-500 outline-none text-sm appearance-none pr-8 bg-[url('data:image/svg+xml;utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 24 24%22 fill=%22%239CA3AF%22><path d=%22M7 10l5 5 5-5z%22/></svg>')] bg-no-repeat bg-[right_0.5rem_center] bg-[length:1rem] cursor-pointer\"\n        >\n          {groups.map(group => (\n            <optgroup key={group} label={group}>\n              {LANGUAGES.filter(lang => lang.group === group).map(lang => (\n                <option key={lang.id} value={lang.id}>\n                  {lang.name}\n                </option>\n              ))}\n            </optgroup>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n}\n\nexport default function GLBConverter() {\n  const [file, setFile] = useState<File | null>(null);\n  const [modelUrl, setModelUrl] = useState('');\n  const [projectStructure, setProjectStructure] = useState<ProjectStructure | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState('');\n  const [activeTab, setActiveTab] = useState<'upload' | 'preview' | 'code'>('upload');\n  const [gltfData, setGltfData] = useState<any>(null);\n  // Display options\n  const [displayMode, setDisplayMode] = useState<'original' | 'wireframe' | 'solid' | 'normals' | 'depth' | 'points'>('original');\n  const [autoRotate, setAutoRotate] = useState(true);\n  const [showGrid, setShowGrid] = useState(false);\n  const [showAxes, setShowAxes] = useState(false);\n  const [componentName, setComponentName] = useState('Model');\n  const [selectedLanguage, setSelectedLanguage] = useState<LanguageId>('typescript');\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const uploadedFile = event.target.files?.[0];\n    if (uploadedFile && uploadedFile.name.endsWith('.glb')) {\n      setFile(uploadedFile);\n      setError('');\n      setIsLoading(true);\n      setProgress(0);\n      try {\n        // Create object URL for preview\n        const url = URL.createObjectURL(uploadedFile);\n        setModelUrl(url);\n        // Load GLTF with progress tracking for large files\n        await loadGLTFWithProgress(url, uploadedFile);\n        // Generate component name from filename\n        const name = uploadedFile.name.replace('.glb', '').replace(/[^a-zA-Z0-9]/g, '');\n        const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n        setComponentName(capitalizedName);\n        setActiveTab('preview');\n      } catch (err) {\n        console.error(\"Error loading GLTF\", err);\n        setError('Error processing GLB file. The file may be too large or corrupted.');\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setError('Please upload a valid .glb file');\n    }\n  };\n\n  const loadGLTFWithProgress = async (url: string, file: File) => {\n    setIsProcessing(true);\n    setProgress(0);\n    return new Promise<void>((resolve, reject) => {\n      try {\n        // Set up DRACO decoder for compressed models (common in large GLBs)\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\n        \n        // Track progress for large files\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onload = function() {\n          if (xhr.status === 200) {\n            try {\n              // Process the GLB data\n              const loader = new GLTFLoader();\n              loader.setDRACOLoader(dracoLoader);\n              \n              loader.parse(\n                xhr.response,\n                '',\n                (gltf) => {\n                  // Store GLTF data for transpilation\n                  setGltfData(gltf);\n                  // Generate project structure\n                  const structure = generateProjectStructure(gltf, componentName, displayMode, selectedLanguage);\n                  setProjectStructure(structure);\n                  setIsProcessing(false);\n                  resolve();\n                },\n                (error) => {\n                  console.error(\"Error parsing GLTF\", error);\n                  setIsProcessing(false);\n                  reject(error);\n                }\n              );\n            } catch (parseError) {\n              console.error(\"Error parsing GLTF data\", parseError);\n              setIsProcessing(false);\n              reject(parseError);\n            }\n          } else {\n            reject(new Error(`Failed to load file: ${xhr.statusText}`));\n          }\n        };\n        xhr.onprogress = function(event) {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            setProgress(percentComplete);\n          }\n        };\n        xhr.onerror = function() {\n          reject(new Error('Network error occurred while loading the file'));\n        };\n        xhr.send();\n      } catch (err) {\n        setIsProcessing(false);\n        reject(err);\n      }\n    });\n  };\n  // Add this useEffect hook to regenerate code when language changes\nuseEffect(() => {\n  if (gltfData && componentName && activeTab === 'code') {\n    setIsProcessing(true);\n    setProgress(0);\n    try {\n      console.log(`Regenerating project structure for ${selectedLanguage}...`);\n      // Generate project structure with current settings\n      const structure = generateProjectStructure(\n        gltfData, \n        componentName, \n        displayMode, \n        selectedLanguage\n      );\n      setProjectStructure(structure);\n      setProgress(100);\n      console.log(\"Project structure regenerated successfully\");\n    } catch (err) {\n      console.error(\"Error regenerating project structure\", err);\n      setError('Failed to regenerate project structure for the selected language');\n    } finally {\n      setIsProcessing(false);\n    }\n  }\n}, [selectedLanguage, gltfData, componentName, displayMode, activeTab]);\n  const downloadZip = (includeExamplePage: boolean = false) => {\n    if (!projectStructure) return;\n    setIsProcessing(true);\n    try {\n      const zip = new JSZip();\n      const lang = LANGUAGES.find(l => l.id === selectedLanguage);\n      if (!lang) return;\n      \n      // Create folder structure\n      const componentFolder = zip.folder(`components/${componentName}`);\n      const meshesFolder = componentFolder?.folder('meshes');\n      const geometriesFolder = componentFolder?.folder('geometries');\n      const materialsFolder = componentFolder?.folder('materials');\n      \n      // Add index file\n      componentFolder?.file(`index.${lang.extension}`, projectStructure.indexContent);\n      \n      // Add geometry files\n      projectStructure.geometries?.forEach(geometry => {\n        geometriesFolder?.file(`${geometry.name}Geometry.${lang.geometryExtension}`, geometry.content);\n      });\n      \n      // Add mesh files\n      projectStructure.meshes.forEach(mesh => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n      \n      // Add material files\n      projectStructure.materials.forEach(material => {\n        materialsFolder?.file(`${material.name}.${lang.extension}`, material.content);\n      });\n      \n      // Add example page if requested\n      if (includeExamplePage) {\n        const appFolder = zip.folder('app');\n        const modelPageFolder = appFolder?.folder(`${componentName.toLowerCase()}-page`);\n        modelPageFolder?.file(`page.${lang.extension}`, projectStructure.examplePageContent);\n      }\n      \n      // Generate and download zip\n      zip.generateAsync({ type: 'blob' }).then(content => {\n        const suffix = includeExamplePage ? '-with-example' : '';\n        saveAs(content, `${componentName}-${selectedLanguage}${suffix}.zip`);\n      });\n    } catch (err) {\n      console.error(\"Error generating ZIP\", err);\n      setError('Failed to generate ZIP file. The model might be too large.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadCurrentView = () => {\n    if (!gltfData) return;\n    setIsProcessing(true);\n    try {\n      // Generate project structure with current display mode\n      const structure = generateProjectStructure(gltfData, componentName, displayMode, selectedLanguage);\n      const zip = new JSZip();\n      const lang = LANGUAGES.find(l => l.id === selectedLanguage);\n      if (!lang) return;\n      \n      // Create folder structure\n      const componentFolder = zip.folder(`components/${componentName}-${displayMode}`);\n      const meshesFolder = componentFolder?.folder('meshes');\n      const geometriesFolder = componentFolder?.folder('geometries');\n      const materialsFolder = componentFolder?.folder('materials');\n      \n      // Add index file\n      componentFolder?.file(`index.${lang.extension}`, structure.indexContent);\n      \n      // Add geometry files\n      structure.geometries?.forEach(geometry => {\n        geometriesFolder?.file(`${geometry.name}Geometry.${lang.geometryExtension}`, geometry.content);\n      });\n      \n      // Add mesh files\n      structure.meshes.forEach(mesh => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n      \n      // Add material files\n      structure.materials.forEach(material => {\n        materialsFolder?.file(`${material.name}.${lang.extension}`, material.content);\n      });\n      \n      // Add example page\n      const appFolder = zip.folder('app');\n      const modelPageFolder = appFolder?.folder(`${componentName.toLowerCase()}-${displayMode}-page`);\n      modelPageFolder?.file(`page.${lang.extension}`, structure.examplePageContent);\n      \n      // Generate and download zip\n      zip.generateAsync({ type: 'blob' }).then(content => {\n        saveAs(content, `${componentName}-${displayMode}-${selectedLanguage}.zip`);\n      });\n    } catch (err) {\n      console.error(\"Error generating ZIP for current view\", err);\n      setError(`Failed to generate ZIP for ${displayMode} view. The model might be too large.`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadModel = () => {\n    if (!file) return;\n    const url = URL.createObjectURL(file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-slate-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-4 flex items-center justify-center gap-3\">\n            <Code className=\"w-10 h-10 text-purple-400\" />\n            GLB to Code Converter\n          </h1>\n          <p className=\"text-slate-300 max-w-3xl mx-auto text-lg\">\n            Convert your GLB 3D models into self-contained components in 15+ programming languages with separate geometry blocks for easier maintenance.\n            Handles large files efficiently with progress tracking and memory optimization.\n          </p>\n        </div>\n        \n        {/* Navigation Tabs */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"bg-slate-800 rounded-lg p-1 flex\">\n            <button\n              onClick={() => setActiveTab('upload')}\n              className={`px-6 py-2 rounded-md font-medium transition-all flex items-center gap-2 ${\n                activeTab === 'upload'\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white'\n              }`}\n            >\n              <Upload className=\"w-4 h-4\" />\n              Upload\n            </button>\n            <button\n              onClick={() => setActiveTab('preview')}\n              disabled={!file}\n              className={`px-6 py-2 rounded-md font-medium transition-all flex items-center gap-2 ${\n                activeTab === 'preview' && file\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed'\n              }`}\n            >\n              <Eye className=\"w-4 h-4\" />\n              Preview\n            </button>\n            <button\n              onClick={() => setActiveTab('code')}\n              disabled={!projectStructure}\n              className={`px-6 py-2 rounded-md font-medium transition-all flex items-center gap-2 ${\n                activeTab === 'code' && projectStructure\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed'\n              }`}\n            >\n              <Code className=\"w-4 h-4\" />\n              Code\n            </button>\n          </div>\n        </div>\n        \n        {/* Error Display */}\n        {error && (\n          <div className=\"bg-red-900/50 border border-red-500 rounded-lg p-4 mb-6 max-w-2xl mx-auto\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"w-5 h-5 text-red-400 mr-2\" />\n              <span className=\"text-red-200\">{error}</span>\n            </div>\n          </div>\n        )}\n        \n        {/* Upload Tab */}\n        {activeTab === 'upload' && (\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl p-8 border border-slate-700\">\n              <div className=\"text-center\">\n                <div className=\"border-2 border-dashed border-slate-600 rounded-lg p-12 hover:border-purple-500 transition-colors\">\n                  <Upload className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">\n                    Upload your GLB model\n                  </h3>\n                  <p className=\"text-slate-400 mb-6\">\n                    Drop your .glb file here or click to browse\n                  </p>\n                  <input\n                    type=\"file\"\n                    accept=\".glb\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                    id=\"file-upload\"\n                    disabled={isLoading}\n                  />\n                  <label\n                    htmlFor=\"file-upload\"\n                    className={`bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg cursor-pointer transition-colors inline-block ${\n                      isLoading ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      'Choose File'\n                    )}\n                  </label>\n                </div>\n              </div>\n              \n              {/* Progress Bar for Large Files */}\n              {(isLoading || isProcessing) && (\n                <div className=\"mt-6\">\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-slate-300 text-sm\">\n                      {isProcessing ? 'Processing model...' : 'Loading file...'}\n                    </span>\n                    <span className=\"text-slate-300 text-sm\">{Math.round(progress)}%</span>\n                  </div>\n                  <div className=\"w-full bg-slate-700 rounded-full h-2.5\">\n                    <div \n                      className=\"bg-purple-600 h-2.5 rounded-full transition-all duration-300\" \n                      style={{ width: `${progress}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-slate-400 text-xs mt-2\">\n                    {progress < 100 \n                      ? \"Loading large model. This may take a few moments...\" \n                      : \"Optimizing model data for transpilation...\"}\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Preview Tab */}\n        {activeTab === 'preview' && modelUrl && (\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-xl font-semibold text-white\">3D Model Preview</h3>\n                <div className=\"flex items-center gap-4\">\n                  {/* Display Mode Controls */}\n                  <div className=\"flex items-center gap-2\">\n                    <label className=\"text-slate-300 text-sm\">Display Mode:</label>\n                    <select\n                      value={displayMode}\n                      onChange={(e) => setDisplayMode(e.target.value as any)}\n                      className=\"bg-slate-700 text-white px-3 py-1 rounded border border-slate-600 focus:border-purple-500 outline-none text-sm\"\n                    >\n                      <option value=\"original\">Original</option>\n                      <option value=\"wireframe\">Wireframe</option>\n                      <option value=\"solid\">Solid Color</option>\n                      <option value=\"normals\">Normals</option>\n                      <option value=\"depth\">Depth</option>\n                      <option value=\"points\">Point Cloud</option>\n                    </select>\n                  </div>\n                  \n                  {/* Toggle Controls */}\n                  <div className=\"flex items-center gap-4\">\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={autoRotate}\n                        onChange={(e) => setAutoRotate(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Auto Rotate\n                    </label>\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={showGrid}\n                        onChange={(e) => setShowGrid(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Grid\n                    </label>\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={showAxes}\n                        onChange={(e) => setShowAxes(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Axes\n                    </label>\n                  </div>\n                  \n                  <button\n                    onClick={downloadCurrentView}\n                    disabled={isProcessing}\n                    className={`bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 ${\n                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isProcessing ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <File className=\"w-4 h-4\" />\n                        Download {displayMode} Version\n                      </>\n                    )}\n                  </button>\n                </div>\n              </div>\n              \n              {/* Display Mode Description */}\n              <div className=\"mb-4\">\n                <div className=\"bg-slate-900 rounded-lg p-3\">\n                  <p className=\"text-slate-400 text-sm\">\n                    {displayMode === 'original' && 'Showing the original model with its materials and textures.'}\n                    {displayMode === 'wireframe' && 'Displaying the model as a wireframe structure showing the mesh geometry.'}\n                    {displayMode === 'solid' && 'Rendering the model with a uniform solid color material.'}\n                    {displayMode === 'normals' && 'Visualizing surface normals with color-coded directions (RGB = XYZ).'}\n                    {displayMode === 'depth' && 'Showing depth information - closer surfaces appear lighter.'}\n                    {displayMode === 'points' && 'Displaying the model as a point cloud of vertices.'}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"bg-slate-900 rounded-lg overflow-hidden\" style={{ height: '500px' }}>\n                <Canvas \n                  camera={{ position: [0, 0, 5], fov: 50 }}\n                  gl={{ \n                    powerPreference: \"high-performance\",\n                    antialias: true,\n                    alpha: true\n                  }}\n                >\n                  <ambientLight intensity={0.5} />\n                  <pointLight position={[10, 10, 10]} />\n                  <pointLight position={[-10, -10, -10]} intensity={0.3} />\n                  \n                  {/* Memory-optimized loading for large models */}\n                  {modelUrl && (\n                    <React.Suspense fallback={\n                      <Html center>\n                        <div className=\"text-white bg-black/50 p-2 rounded\">\n                          <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n                          Loading model...\n                        </div>\n                      </Html>\n                    }>\n                      <ModelPreview \n                        url={modelUrl} \n                        displayMode={displayMode} \n                        autoRotate={autoRotate} \n                      />\n                    </React.Suspense>\n                  )}\n                  \n                  {showGrid && (\n                    <gridHelper args={[10, 10, '#444444', '#666666']} />\n                  )}\n                  {showAxes && (\n                    <axesHelper args={[2]} />\n                  )}\n                  \n                  <OrbitControls \n                    enableZoom \n                    enablePan \n                    enableRotate \n                    minDistance={0.1}\n                    maxDistance={100}\n                  />\n                  <Environment preset=\"studio\" />\n                </Canvas>\n              </div>\n              \n              <p className=\"text-slate-400 text-sm mt-4 text-center\">\n                Use mouse to rotate, zoom, and pan around the model. Try different display modes to analyze the model structure.\n              </p>\n            </div>\n          </div>\n        )}\n        {isProcessing && activeTab === 'code' && (\n  <div className=\"absolute top-4 right-4 bg-slate-800 px-3 py-1 rounded text-sm text-purple-400\">\n    Regenerating code...\n  </div>\n)}\n        {/* Code Tab */}\n        {activeTab === 'code' && projectStructure && (\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700\">\n              <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center p-6 border-b border-slate-700 gap-4\">\n                <div className=\"flex flex-col md:flex-row items-start md:items-center gap-4\">\n                  <h3 className=\"text-xl font-semibold text-white\">\n                    Project Structure\n                  </h3>\n                  {/* Language Selection */}\n                  <div className=\"flex items-center gap-2\">\n                    <LanguageSelector \n                      selectedLanguage={selectedLanguage} \n                      onChange={setSelectedLanguage} \n                    />\n                  </div>\n                </div>\n                <div className=\"flex flex-col md:flex-row gap-4 w-full md:w-auto\">\n                  <button\n                    onClick={() => downloadZip(true)}\n                    disabled={isProcessing}\n                    className={`bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 w-full md:w-auto ${\n                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isProcessing ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Layout className=\"w-4 h-4\" />\n                        Download Full Project\n                      </>\n                    )}\n                  </button>\n                  <button\n                    onClick={() => downloadZip(false)}\n                    disabled={isProcessing}\n                    className={`bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 w-full md:w-auto ${\n                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isProcessing ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <File className=\"w-4 h-4\" />\n                        Download Component\n                      </>\n                    )}\n                  </button>\n                  <button\n                    onClick={downloadModel}\n                    className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 w-full md:w-auto\"\n                  >\n                    <Download className=\"w-4 h-4\" />\n                    Download GLB\n                  </button>\n                </div>\n              </div>\n              \n              {/* Project Structure Overview */}\n              <div className=\"p-6 border-b border-slate-700\">\n                <div className=\"flex flex-col lg:flex-row items-start gap-6\">\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                      <Folder className=\"w-5 h-5 mr-2 text-purple-400\" />\n                      Project Structure\n                    </h4>\n                    <div className=\"bg-slate-900 rounded-lg p-4\">\n                      <div className=\"text-slate-400 text-sm\">\n                        <div className=\"flex items-center\">\n                          <Folder className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                          <span className=\"font-medium\">components</span>\n                        </div>\n                        <div className=\"pl-6\">\n                          <div className=\"flex items-center\">\n                            <Folder className=\"w-4 h-4 mr-2 text-blue-400\" />\n                            <span className=\"font-medium\">{componentName}</span>\n                          </div>\n                          <div className=\"pl-6\">\n                            <div className=\"flex items-center\">\n                              <FileText className=\"w-4 h-4 mr-2 text-green-400\" />\n                              <span>index.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                            </div>\n                            <div className=\"flex items-center mt-2\">\n                              <Folder className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                              <span className=\"font-medium\">geometries</span>\n                            </div>\n                            <div className=\"pl-6\">\n                              {projectStructure.geometries?.map((geometry, i) => (\n                                <div key={i} className=\"flex items-center\">\n                                  <File className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                                  <span>{geometry.name}Geometry.{LANGUAGES.find(l => l.id === selectedLanguage)?.geometryExtension}</span>\n                                </div>\n                              ))}\n                            </div>\n                            <div className=\"flex items-center mt-2\">\n                              <Folder className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                              <span className=\"font-medium\">meshes</span>\n                            </div>\n                            <div className=\"pl-6\">\n                              {projectStructure.meshes.map((mesh, i) => (\n                                <div key={i} className=\"flex items-center\">\n                                  <File className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                                  <span>{mesh.name}.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                                </div>\n                              ))}\n                            </div>\n                            <div className=\"flex items-center mt-2\">\n                              <Folder className=\"w-4 h-4 mr-2 text-orange-400\" />\n                              <span className=\"font-medium\">materials</span>\n                            </div>\n                            <div className=\"pl-6\">\n                              {projectStructure.materials.map((material, i) => (\n                                <div key={i} className=\"flex items-center\">\n                                  <File className=\"w-4 h-4 mr-2 text-orange-400\" />\n                                  <span>{material.name}.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"mt-4 flex items-center\">\n                          <Folder className=\"w-4 h-4 mr-2 text-purple-400\" />\n                          <span className=\"font-medium\">app</span>\n                        </div>\n                        <div className=\"pl-6\">\n                          <div className=\"flex items-center\">\n                            <Folder className=\"w-4 h-4 mr-2 text-blue-400\" />\n                            <span className=\"font-medium\">{componentName.toLowerCase()}-page</span>\n                          </div>\n                          <div className=\"pl-6\">\n                            <div className=\"flex items-center\">\n                              <FileText className=\"w-4 h-4 mr-2 text-green-400\" />\n                              <span>page.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                      <FileText className=\"w-5 h-5 mr-2 text-purple-400\" />\n                      Model Statistics\n                    </h4>\n                    <div className=\"bg-slate-900 rounded-lg p-4\">\n                      <div className=\"text-slate-400 text-sm space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span>Meshes:</span>\n                          <span className=\"font-medium\">{projectStructure.meshes.length}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Geometry Files:</span>\n                          <span className=\"font-medium\">{projectStructure.geometries?.length || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Materials:</span>\n                          <span className=\"font-medium\">{projectStructure.materials.length}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Total Vertices:</span>\n                          <span className=\"font-medium\">{projectStructure.totalVertices.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Total Triangles:</span>\n                          <span className=\"font-medium\">{projectStructure.totalTriangles.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>File Size:</span>\n                          <span className=\"font-medium\">{file ? (file.size / 1024 / 1024).toFixed(2) + ' MB' : 'N/A'}</span>\n                        </div>\n                        <div className=\"pt-2 border-t border-slate-700 mt-2\">\n                          <p className=\"text-xs text-slate-500\">\n                            {`Note: For extremely large models (>100MB), some meshes might be simplified \n                            during transpilation to prevent browser memory issues.`}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Code Preview */}\n              <div className=\"p-6\">\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <FileText className=\"w-5 h-5 mr-2 text-purple-400\" />\n                    index.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension} - Main Component\n                  </h4>\n                  <CodeEditor \n                    code={projectStructure.indexContent} \n                    languageId={selectedLanguage} \n                  />\n                </div>\n                \n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <Folder className=\"w-5 h-5 mr-2 text-cyan-400\" />\n                    Example Page\n                  </h4>\n                  <div className=\"bg-slate-900 rounded-lg overflow-hidden\">\n                    <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700\">\n                      <span className=\"text-purple-400 font-mono\">app/{componentName.toLowerCase()}-page/page.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                    </div>\n                    <CodeEditor \n                      code={projectStructure.examplePageContent} \n                      languageId={selectedLanguage} \n                    />\n                  </div>\n                </div>\n                \n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <Folder className=\"w-5 h-5 mr-2 text-cyan-400\" />\n                    Geometry Files\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {projectStructure.geometries?.slice(0, 3).map((geometry, i) => (\n                      <div key={i} className=\"bg-slate-900 rounded-lg overflow-hidden\">\n                        <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700\">\n                          <span className=\"text-cyan-400 font-mono\">{geometry.name}Geometry.{LANGUAGES.find(l => l.id === selectedLanguage)?.geometryExtension}</span>\n                        </div>\n                        <CodeEditor \n                          code={geometry.content} \n                          languageId={selectedLanguage} \n                        />\n                      </div>\n                    ))}\n                    {projectStructure.geometries && projectStructure.geometries.length > 3 && (\n                      <div className=\"col-span-full text-center text-slate-400 text-sm py-4\">\n                        ... and {projectStructure.geometries.length - 3} more geometry files\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <Folder className=\"w-5 h-5 mr-2 text-cyan-400\" />\n                    Mesh Components\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {projectStructure.meshes.slice(0, 3).map((mesh, i) => (\n                      <div key={i} className=\"bg-slate-900 rounded-lg overflow-hidden\">\n                        <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700\">\n                          <span className=\"text-cyan-400 font-mono\">{mesh.name}.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                        </div>\n                        <CodeEditor \n                          code={mesh.content} \n                          languageId={selectedLanguage} \n                        />\n                      </div>\n                    ))}\n                    {projectStructure.meshes.length > 3 && (\n                      <div className=\"col-span-full text-center text-slate-400 text-sm py-4\">\n                        ... and {projectStructure.meshes.length - 3} more mesh components\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <Folder className=\"w-5 h-5 mr-2 text-orange-400\" />\n                    Material Components\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {projectStructure.materials.slice(0, 3).map((material, i) => (\n                      <div key={i} className=\"bg-slate-900 rounded-lg overflow-hidden\">\n                        <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700\">\n                          <span className=\"text-orange-400 font-mono\">{material.name}.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                        </div>\n                        <CodeEditor \n                          code={material.content} \n                          languageId={selectedLanguage} \n                        />\n                      </div>\n                    ))}\n                    {projectStructure.materials.length > 3 && (\n                      <div className=\"col-span-full text-center text-slate-400 text-sm py-4\">\n                        ... and {projectStructure.materials.length - 3} more material components\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6 border-t border-slate-700\">\n                <h4 className=\"text-lg font-semibold text-white mb-3\">\n                  How to Use\n                </h4>\n                <div className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-slate-400 text-sm mb-2\">1. Download the complete project with example page:</p>\n                    <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                      <code className=\"text-blue-400\">{`<button onClick={() => downloadZip(true)}>Download Full Project</button>`}</code>\n                    </pre>\n                  </div>\n                  <div>\n                    <p className=\"text-slate-400 text-sm mb-2\">2. Extract the zip file into your project root</p>\n                  </div>\n                  <div>\n                    <p className=\"text-slate-400 text-sm mb-2\">3. The example page will be available at:</p>\n                    <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                      <code className=\"text-blue-400\">{`app/${componentName.toLowerCase()}-page/page.${LANGUAGES.find(l => l.id === selectedLanguage)?.extension}`}</code>\n                    </pre>\n                  </div>\n                  <div>\n                    <p className=\"text-slate-400 text-sm mb-2\">4. Import and use the component elsewhere:</p>\n                    <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                      <code className=\"text-blue-400\">{`import ${componentName} from '@/components/${componentName}'\n// ...\n<Canvas>\n  <${componentName} />\n</Canvas>`}</code>\n                    </pre>\n                  </div>\n                  <div>\n                    <p className=\"text-slate-400 text-sm mb-2\">5. Customize individual parts:</p>\n                    <pre className=\"bg-slate-900 rounded p-2 text-sm\">\n                      <code className=\"text-blue-400\">{`// Access specific parts\nimport { MeshName } from '@/components/${componentName}/meshes'\nimport { MeshNameGeometry } from '@/components/${componentName}/geometries'\nimport { MaterialName } from '@/components/${componentName}/materials'\n// Example: Change material of a specific mesh\nfunction CustomModel() {\n  return (\n    <${componentName}>\n      <mesh geometry={${componentName}Geometry} material={new MaterialName()} />\n    </${componentName}>\n  )\n}`}</code>\n                    </pre>\n                  </div>\n                  <div className=\"pt-2 border-t border-slate-700 mt-2\">\n                    <p className=\"text-xs text-slate-500\">\n                      For extremely large models, the converter automatically applies optimizations:\n                      <br />- Geometry data is separated into reusable blocks for better maintainability\n                      <br />- Geometry files are stored in a dedicated folder for easy access\n                      <br />- Mesh components are simplified to just import and use geometry\n                      <br />- Memory usage is optimized for large models through better data structure\n                      <br />- Example page is included for immediate use with proper Canvas setup\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Component to display the GLB model in the preview with memory optimization\nfunction ModelPreview({ url, displayMode, autoRotate }: { \n  url: string; \n  displayMode: string; \n  autoRotate: boolean \n}) {\n  const [gltf, setGltf] = useState<any>(null);\n  const meshRef = useRef<THREE.Group>(null);\n  \n  // Load GLTF with memory optimization for large files\n  useEffect(() => {\n    let isMounted = true;\n    const loader = new GLTFLoader();\n    \n    // Set up DRACO for compressed models\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\n    loader.setDRACOLoader(dracoLoader);\n    \n    // For large files, use a more memory-efficient approach\n    fetch(url)\n      .then(response => response.arrayBuffer())\n      .then(data => {\n        if (!isMounted) return;\n        loader.parse(\n          data,\n          '',\n          (gltf) => {\n            // For extremely large models, simplify geometries to prevent memory issues\n            if (gltf.scene) {\n              gltf.scene.traverse((object: THREE.Object3D) => {\n                if (object.isMesh) {\n                  const mesh = object as THREE.Mesh;\n                  const geometry = mesh.geometry;\n                  // Check if the geometry is extremely large\n                  const vertexCount = geometry.attributes.position.count;\n                  if (vertexCount > 1000000) {\n                    // For extremely large meshes, consider simplifying or warning\n                    console.warn(`Mesh ${mesh.name} has ${vertexCount} vertices - this may cause performance issues`);\n                  }\n                }\n              });\n            }\n            if (isMounted) {\n              setGltf(gltf);\n            }\n          },\n          (error) => {\n            console.error(\"Error parsing GLTF\", error);\n          }\n        );\n      })\n      .catch(error => {\n        console.error(\"Error loading GLB file\", error);\n      });\n      \n    return () => {\n      isMounted = false;\n      // Clean up GLTF resources\n      if (gltf) {\n        gltf.scene.traverse((object: THREE.Object3D) => {\n          if (object.isMesh) {\n            const mesh = object as THREE.Mesh;\n            mesh.geometry.dispose();\n            if (Array.isArray(mesh.material)) {\n              mesh.material.forEach(material => material.dispose());\n            } else {\n              mesh.material.dispose();\n            }\n          }\n        });\n      }\n    };\n  }, [url]);\n  \n  useFrame((state) => {\n    if (meshRef.current && autoRotate) {\n      meshRef.current.rotation.y = state.clock.getElapsedTime() * 0.5;\n    }\n  });\n  \n  // Apply material overrides based on display mode\n  useEffect(() => {\n    if (gltf && gltf.scene) {\n      gltf.scene.traverse((child: THREE.Object3D) => {\n        if (child.isMesh) {\n          const mesh = child as THREE.Mesh;\n          const originalMaterial = mesh.material;\n          \n          // Dispose of old materials to prevent memory leaks\n          if (Array.isArray(originalMaterial)) {\n            originalMaterial.forEach(material => material.dispose());\n          } else if (originalMaterial && 'dispose' in originalMaterial) {\n            (originalMaterial as THREE.Material).dispose();\n          }\n          \n          // Create new materials based on display mode\n          switch (displayMode) {\n            case 'wireframe':\n              if (Array.isArray(originalMaterial)) {\n                mesh.material = originalMaterial.map(mat => {\n                  const newMat = mat.clone();\n                  newMat.wireframe = true;\n                  newMat.transparent = true;\n                  newMat.opacity = 0.8;\n                  return newMat;\n                });\n              } else {\n                const newMat = originalMaterial.clone();\n                newMat.wireframe = true;\n                newMat.transparent = true;\n                newMat.opacity = 0.8;\n                mesh.material = newMat;\n              }\n              break;\n            case 'points':\n              mesh.material = new THREE.PointsMaterial({\n                color: 0x00ff00,\n                size: 0.01,\n                sizeAttenuation: true\n              });\n              break;\n            case 'normals':\n              mesh.material = new THREE.MeshNormalMaterial();\n              break;\n            case 'depth':\n              mesh.material = new THREE.MeshDepthMaterial();\n              break;\n            case 'solid':\n              mesh.material = new THREE.MeshStandardMaterial({\n                color: 0x888888,\n                metalness: 0.1,\n                roughness: 0.8\n              });\n              break;\n            default:\n              // Keep original materials for 'original' mode\n              mesh.material = originalMaterial;\n              break;\n          }\n        }\n      });\n    }\n  }, [gltf, displayMode]);\n  \n  if (!gltf) {\n    return (\n      <Html center>\n        <div className=\"text-white bg-black/50 p-2 rounded\">\n          <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n          Loading model...\n        </div>\n      </Html>\n    );\n  }\n  \n  return (\n    <primitive \n      ref={meshRef} \n      object={gltf.scene} \n      scale={[1, 1, 1]}\n      position={[0, 0, 0]}\n    />\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}
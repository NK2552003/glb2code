{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/glb-convertor/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment, Html } from '@react-three/drei';\nimport { Download, Upload, Eye, Code, Loader2, AlertCircle, File, FileText, Folder, Layout, Languages, Package, Terminal, Copy } from 'lucide-react';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport JSZip from 'jszip';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { saveAs } from 'file-saver';\nimport { generateProjectStructure } from '@/lib/glb-converter';\nimport type { MeshData, MaterialData, ProjectStructure, GeometryData } from '@/app/types/glb-convertor';\n\n// Language configuration for syntax highlighting and code generation\nconst LANGUAGES = [\n  { id: 'typescript', name: 'TypeScript', extension: 'tsx', geometryExtension: 'ts', group: 'Web' },\n  { id: 'javascript', name: 'JavaScript', extension: 'jsx', geometryExtension: 'js', group: 'Web' },\n  { id: 'python', name: 'Python', extension: 'py', geometryExtension: 'py', group: 'General' },\n  { id: 'java', name: 'Java', extension: 'java', geometryExtension: 'java', group: 'General' },\n  { id: 'csharp', name: 'C#', extension: 'cs', geometryExtension: 'cs', group: 'General' },\n  { id: 'cpp', name: 'C++', extension: 'cpp', geometryExtension: 'h', group: 'Systems' },\n  { id: 'go', name: 'Go', extension: 'go', geometryExtension: 'go', group: 'Systems' },\n  { id: 'rust', name: 'Rust', extension: 'rs', geometryExtension: 'rs', group: 'Systems' },\n  { id: 'swift', name: 'Swift', extension: 'swift', geometryExtension: 'swift', group: 'Mobile' },\n  { id: 'kotlin', name: 'Kotlin', extension: 'kt', geometryExtension: 'kt', group: 'Mobile' },\n  { id: 'ruby', name: 'Ruby', extension: 'rb', geometryExtension: 'rb', group: 'Web' },\n  { id: 'php', name: 'PHP', extension: 'php', geometryExtension: 'php', group: 'Web' },\n  { id: 'scala', name: 'Scala', extension: 'scala', geometryExtension: 'scala', group: 'General' },\n  { id: 'dart', name: 'Dart', extension: 'dart', geometryExtension: 'dart', group: 'Mobile' },\n  { id: 'r', name: 'R', extension: 'R', geometryExtension: 'R', group: 'Data Science' }\n] as const;\n\ntype LanguageId = typeof LANGUAGES[number]['id'];\n\n// Language-specific setup instructions and dependencies\nconst LANGUAGE_SETUP = {\n  typescript: {\n    packageManager: 'npm',\n    dependencies: [\n      'three',\n      '@react-three/fiber',\n      '@react-three/drei',\n      'react',\n      'react-dom',\n      '@types/three'\n    ],\n    devDependencies: [\n      'typescript',\n      '@types/react',\n      '@types/react-dom'\n    ],\n    installCommand: 'npm install three @react-three/fiber @react-three/drei react react-dom @types/three',\n    devInstallCommand: 'npm install -D typescript @types/react @types/react-dom',\n    setupSteps: [\n      'Create a new Next.js project with TypeScript',\n      'Install the required dependencies',\n      'Extract the downloaded component files to your project',\n      'Import and use the component in your pages'\n    ],\n    importExample: `import ${'{componentName}'} from '@/components/${'{componentName}'}';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\n\nexport default function ModelPage() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas camera={{ '{' } position: [0, 0, 5], fov: 50 {'}'} >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${'{componentName}'} />\n        <OrbitControls />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`,\n    customizationExample: `// Access individual parts\nimport { MeshName } from '@/components/${'{componentName}'}/meshes/MeshName';\nimport { MeshNameGeometry } from '@/components/${'{componentName}'}/geometries/MeshNameGeometry';\nimport MaterialName from '@/components/${'{componentName}'}/materials/MaterialName';\n\nfunction CustomModel() {\n  return (\n    <group>\n      <mesh geometry={MeshNameGeometry} material={MaterialName()} />\n    </group>\n  );\n}`\n  },\n  javascript: {\n    packageManager: 'npm',\n    dependencies: [\n      'three',\n      '@react-three/fiber',\n      '@react-three/drei',\n      'react',\n      'react-dom'\n    ],\n    devDependencies: [],\n    installCommand: 'npm install three @react-three/fiber @react-three/drei react react-dom',\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new React project',\n      'Install the required dependencies',\n      'Extract the downloaded component files to your project',\n      'Import and use the component in your pages'\n    ],\n    importExample: `import ${'{componentName}'} from './components/${'{componentName}'}';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\n\nexport default function ModelPage() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${'{componentName}'} />\n        <OrbitControls />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`,\n    customizationExample: `// Access individual parts\nimport { MeshName } from './components/${'{componentName}'}/meshes/MeshName';\nimport { MeshNameGeometry } from './components/${'{componentName}'}/geometries/MeshNameGeometry';\nimport MaterialName from './components/${'{componentName}'}/materials/MaterialName';\n\nfunction CustomModel() {\n  return (\n    <group>\n      <mesh geometry={MeshNameGeometry} material={MaterialName()} />\n    </group>\n  );\n}`\n  },\n  python: {\n    packageManager: 'pip',\n    dependencies: [\n      'moderngl',\n      'pyglet',\n      'numpy',\n      'pyrr'\n    ],\n    devDependencies: [],\n    installCommand: 'pip install moderngl pyglet numpy pyrr',\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Python project',\n      'Install the required dependencies',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `from ${'{componentName}'} import ${'{componentName}'}\nimport pyglet\nimport moderngl\nfrom pyrr import Matrix44\n\nclass ModelApp:\n    def __init__(self):\n        self.window = pyglet.window.Window(800, 600, caption='${'{componentName}'} Viewer')\n        self.ctx = moderngl.create_context()\n        self.scene = ${'{componentName}'}(self.ctx)\n        \n    def run(self):\n        pyglet.app.run()\n\nif __name__ == '__main__':\n    app = ModelApp()\n    app.run()`,\n    customizationExample: `# Access individual parts\nfrom meshes.MeshName import MeshName\nfrom geometries.MeshNameGeometry import MeshNameGeometry\nfrom materials.MaterialName import MaterialName\n\nclass CustomModel:\n    def __init__(self, ctx):\n        self.geometry = MeshNameGeometry()\n        self.material = MaterialName(ctx)\n        self.mesh = MeshName(ctx, self.material)`\n  },\n  java: {\n    packageManager: 'maven/gradle',\n    dependencies: [\n      'org.lwjgl:lwjgl:3.3.3',\n      'org.lwjgl:lwjgl-opengl:3.3.3',\n      'org.lwjgl:lwjgl-glfw:3.3.3'\n    ],\n    devDependencies: [],\n    installCommand: `// Maven\n<dependency>\n    <groupId>org.lwjgl</groupId>\n    <artifactId>lwjgl</artifactId>\n    <version>3.3.3</version>\n</dependency>\n\n// Gradle\nimplementation 'org.lwjgl:lwjgl:3.3.3'\nimplementation 'org.lwjgl:lwjgl-opengl:3.3.3'`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Java project with Maven or Gradle',\n      'Add LWJGL dependencies to your build file',\n      'Extract the downloaded component files to your src folder',\n      'Run the example application'\n    ],\n    importExample: `import ${'{componentName}'};\n\npublic class ModelApp {\n    public static void main(String[] args) {\n        // Initialize LWJGL and OpenGL context\n        // Create and render the model\n        ${'{componentName}'} model = new ${'{componentName}'}();\n        model.render();\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName;\nimport geometries.MeshNameGeometry;\nimport materials.MaterialName;\n\npublic class CustomModel {\n    private MeshNameGeometry geometry;\n    private MaterialName material;\n    \n    public CustomModel() {\n        this.geometry = new MeshNameGeometry();\n        this.material = new MaterialName();\n    }\n}`\n  },\n  csharp: {\n    packageManager: 'NuGet',\n    dependencies: [\n      'OpenTK',\n      'OpenTK.Graphics',\n      'OpenTK.Mathematics'\n    ],\n    devDependencies: [],\n    installCommand: 'dotnet add package OpenTK --version 4.8.2',\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new .NET project',\n      'Install OpenTK via NuGet',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `using ${'{componentName}'};\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Windowing.Desktop;\n\nclass Program\n{\n    static void Main()\n    {\n        var model = new ${'{componentName}'}();\n        model.Render();\n    }\n}`,\n    customizationExample: `// Access individual parts\nusing Meshes;\nusing Geometries;\nusing Materials;\n\npublic class CustomModel\n{\n    private MeshNameGeometry geometry;\n    private MaterialName material;\n    \n    public CustomModel()\n    {\n        geometry = new MeshNameGeometry();\n        material = new MaterialName();\n    }\n}`\n  },\n  cpp: {\n    packageManager: 'vcpkg/conan',\n    dependencies: [\n      'glew',\n      'glfw3',\n      'glm'\n    ],\n    devDependencies: [],\n    installCommand: `// vcpkg\nvcpkg install glew glfw3 glm\n\n// Or with CMake\nfind_package(glfw3 REQUIRED)\nfind_package(GLEW REQUIRED)\nfind_package(glm REQUIRED)`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new C++ project with CMake',\n      'Install OpenGL dependencies (GLEW, GLFW, GLM)',\n      'Extract the downloaded component files to your project',\n      'Compile and run the example application'\n    ],\n    importExample: `#include \"${'{componentName}'}.h\"\n#include <GL/glew.h>\n#include <GLFW/glfw3.h>\n\nint main() {\n    // Initialize GLFW and OpenGL\n    glfwInit();\n    GLFWwindow* window = glfwCreateWindow(800, 600, \"${'{componentName}'} Viewer\", NULL, NULL);\n    glfwMakeContextCurrent(window);\n    glewInit();\n    \n    ${'{componentName}'} model;\n    \n    while (!glfwWindowShouldClose(window)) {\n        model.render();\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n    \n    return 0;\n}`,\n    customizationExample: `// Access individual parts\n#include \"meshes/MeshName.h\"\n#include \"geometries/MeshNameGeometry.h\"\n#include \"materials/MaterialName.h\"\n\nclass CustomModel {\nprivate:\n    MeshNameGeometry geometry;\n    MaterialName material;\n    \npublic:\n    CustomModel() : geometry(), material() {}\n    void render() { /* custom rendering */ }\n};`\n  },\n  go: {\n    packageManager: 'go mod',\n    dependencies: [\n      'github.com/go-gl/gl/v4.1-core/gl',\n      'github.com/go-gl/glfw/v3.3/glfw',\n      'github.com/go-gl/mathgl/mgl32'\n    ],\n    devDependencies: [],\n    installCommand: `go mod init your-project\ngo get github.com/go-gl/gl/v4.1-core/gl\ngo get github.com/go-gl/glfw/v3.3/glfw\ngo get github.com/go-gl/mathgl/mgl32`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Go module',\n      'Install OpenGL dependencies',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `package main\n\nimport (\n    \"./${'{componentName}'}\"\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"github.com/go-gl/glfw/v3.3/glfw\"\n)\n\nfunc main() {\n    // Initialize GLFW and OpenGL\n    glfw.Init()\n    defer glfw.Terminate()\n    \n    window, _ := glfw.CreateWindow(800, 600, \"${'{componentName}'} Viewer\", nil, nil)\n    window.MakeContextCurrent()\n    gl.Init()\n    \n    model := ${'{componentName}'}.New${'{componentName}'}()\n    \n    for !window.ShouldClose() {\n        model.Render()\n        window.SwapBuffers()\n        glfw.PollEvents()\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport (\n    \"./meshes\"\n    \"./geometries\"\n    \"./materials\"\n)\n\ntype CustomModel struct {\n    geometry *geometries.MeshNameGeometry\n    material *materials.MaterialName\n}\n\nfunc NewCustomModel() *CustomModel {\n    return &CustomModel{\n        geometry: geometries.NewMeshNameGeometry(),\n        material: materials.NewMaterialName(),\n    }\n}`\n  },\n  rust: {\n    packageManager: 'cargo',\n    dependencies: [\n      'wgpu',\n      'winit',\n      'bytemuck',\n      'glam'\n    ],\n    devDependencies: [],\n    installCommand: `# Add to Cargo.toml\n[dependencies]\nwgpu = \"0.18\"\nwinit = \"0.28\"\nbytemuck = \"1.14\"\nglam = \"0.24\"`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Rust project with Cargo',\n      'Add wgpu dependencies to Cargo.toml',\n      'Extract the downloaded component files to your src folder',\n      'Run the example application'\n    ],\n    importExample: `use ${'{componentName}'}::${'{componentName}'};\nuse wgpu::Device;\nuse winit::event_loop::EventLoop;\n\nfn main() {\n    let event_loop = EventLoop::new();\n    // Initialize wgpu and create device\n    let device = /* initialize device */;\n    \n    let model = ${'{componentName}'}::new(&device);\n    \n    event_loop.run(move |event, _, control_flow| {\n        // Render model\n        model.render(&mut render_pass);\n    });\n}`,\n    customizationExample: `// Access individual parts\nuse meshes::MeshName;\nuse geometries::MeshNameGeometry;\nuse materials::MaterialName;\n\nstruct CustomModel {\n    geometry: MeshNameGeometry,\n    material: MaterialName,\n}\n\nimpl CustomModel {\n    fn new(device: &Device) -> Self {\n        Self {\n            geometry: MeshNameGeometry::new(device),\n            material: MaterialName::new(device),\n        }\n    }\n}`\n  },\n  swift: {\n    packageManager: 'Swift Package Manager',\n    dependencies: [\n      'Metal',\n      'MetalKit',\n      'simd'\n    ],\n    devDependencies: [],\n    installCommand: `// Add to Package.swift\ndependencies: [\n    .package(url: \"https://github.com/apple/swift-numerics\", from: \"1.0.0\")\n]`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new iOS/macOS project',\n      'Import Metal and MetalKit frameworks',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `import ${'{componentName}'}\nimport Metal\nimport MetalKit\n\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        guard let device = MTLCreateSystemDefaultDevice() else { return }\n        let model = ${'{componentName}'}(device: device)\n        \n        // Setup Metal rendering\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport Meshes\nimport Geometries\nimport Materials\n\nclass CustomModel {\n    private let geometry: MeshNameGeometry\n    private let material: MaterialName\n    \n    init(device: MTLDevice) {\n        geometry = MeshNameGeometry(device: device)\n        material = MaterialName(device: device)\n    }\n}`\n  },\n  kotlin: {\n    packageManager: 'Gradle',\n    dependencies: [\n      'org.lwjgl:lwjgl:3.3.3',\n      'org.lwjgl:lwjgl-opengl:3.3.3'\n    ],\n    devDependencies: [],\n    installCommand: `// build.gradle.kts\ndependencies {\n    implementation(\"org.lwjgl:lwjgl:3.3.3\")\n    implementation(\"org.lwjgl:lwjgl-opengl:3.3.3\")\n}`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Kotlin project with Gradle',\n      'Add LWJGL dependencies',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `import ${'{componentName}'}\nimport org.lwjgl.opengl.GL\n\nfun main() {\n    // Initialize LWJGL and OpenGL\n    val model = ${'{componentName}'}()\n    \n    // Render loop\n    model.render()\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName\nimport geometries.MeshNameGeometry\nimport materials.MaterialName\n\nclass CustomModel {\n    private val geometry = MeshNameGeometry()\n    private val material = MaterialName()\n    \n    fun render() {\n        // Custom rendering logic\n    }\n}`\n  },\n  ruby: {\n    packageManager: 'gem',\n    dependencies: [\n      'opengl',\n      'glfw',\n      'matrix'\n    ],\n    devDependencies: [],\n    installCommand: 'gem install opengl glfw matrix',\n    devInstallCommand: '',\n    setupSteps: [\n      'Install Ruby and required gems',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `require './${'{componentName}'}'\nrequire 'opengl'\nrequire 'glfw'\n\nclass ModelApp\n  def initialize\n    @model = ${'{componentName}'}::${'{componentName}'}.new\n  end\n  \n  def run\n    # Initialize OpenGL and render\n    @model.render\n  end\nend\n\napp = ModelApp.new\napp.run`,\n    customizationExample: `# Access individual parts\nrequire './meshes/mesh_name'\nrequire './geometries/mesh_name_geometry'\nrequire './materials/material_name'\n\nclass CustomModel\n  def initialize\n    @geometry = MeshNameGeometry.new\n    @material = MaterialName.new\n  end\nend`\n  },\n  php: {\n    packageManager: 'composer',\n    dependencies: [\n      'php-opengl/opengl',\n      'php-gl/math'\n    ],\n    devDependencies: [],\n    installCommand: 'composer require php-opengl/opengl php-gl/math',\n    devInstallCommand: '',\n    setupSteps: [\n      'Install PHP and Composer',\n      'Install OpenGL PHP extensions',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `<?php\nrequire_once './${'{componentName}'}.php';\nuse OpenGL\\\\GL;\n\nclass ModelApp {\n    private $model;\n    \n    public function __construct() {\n        $this->model = new ${'{componentName}'}();\n    }\n    \n    public function run() {\n        $this->model->render();\n    }\n}\n\n$app = new ModelApp();\n$app->run();`,\n    customizationExample: `<?php\n// Access individual parts\nrequire_once './meshes/MeshName.php';\nrequire_once './geometries/MeshNameGeometry.php';\nrequire_once './materials/MaterialName.php';\n\nclass CustomModel {\n    private $geometry;\n    private $material;\n    \n    public function __construct() {\n        $this->geometry = new MeshNameGeometry();\n        $this->material = new MaterialName();\n    }\n}`\n  },\n  scala: {\n    packageManager: 'sbt',\n    dependencies: [\n      'org.lwjgl:lwjgl:3.3.3',\n      'org.lwjgl:lwjgl-opengl:3.3.3'\n    ],\n    devDependencies: [],\n    installCommand: `// build.sbt\nlibraryDependencies ++= Seq(\n  \"org.lwjgl\" % \"lwjgl\" % \"3.3.3\",\n  \"org.lwjgl\" % \"lwjgl-opengl\" % \"3.3.3\"\n)`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Scala project with sbt',\n      'Add LWJGL dependencies to build.sbt',\n      'Extract the downloaded component files to your project',\n      'Run the example application'\n    ],\n    importExample: `import ${'{componentName}'}._\nimport org.lwjgl.opengl.GL\n\nobject ModelApp extends App {\n  // Initialize LWJGL and OpenGL\n  val model = new ${'{componentName}'}()\n  \n  // Render loop\n  model.render()\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName\nimport geometries.MeshNameGeometry\nimport materials.MaterialName\n\nclass CustomModel {\n  private val geometry = new MeshNameGeometry()\n  private val material = new MaterialName()\n  \n  def render(): Unit = {\n    // Custom rendering logic\n  }\n}`\n  },\n  dart: {\n    packageManager: 'pub',\n    dependencies: [\n      'flutter',\n      'vector_math',\n      'flutter_gl'\n    ],\n    devDependencies: [],\n    installCommand: `# pubspec.yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  vector_math: ^2.1.4\n  flutter_gl: ^0.0.1`,\n    devInstallCommand: '',\n    setupSteps: [\n      'Create a new Flutter project',\n      'Add dependencies to pubspec.yaml',\n      'Extract the downloaded component files to your lib folder',\n      'Run the example application'\n    ],\n    importExample: `import 'package:flutter/material.dart';\nimport './${'{componentName}'}.dart';\n\nclass ModelPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ${'{componentName}'}(),\n    );\n  }\n}`,\n    customizationExample: `// Access individual parts\nimport './meshes/mesh_name.dart';\nimport './geometries/mesh_name_geometry.dart';\nimport './materials/material_name.dart';\n\nclass CustomModel {\n  final MeshNameGeometry geometry;\n  final MaterialName material;\n  \n  CustomModel() : \n    geometry = MeshNameGeometry(),\n    material = MaterialName();\n}`\n  },\n  r: {\n    packageManager: 'CRAN',\n    dependencies: [\n      'rgl',\n      'geometry',\n      'matrix'\n    ],\n    devDependencies: [],\n    installCommand: 'install.packages(c(\"rgl\", \"geometry\", \"matrix\"))',\n    devInstallCommand: '',\n    setupSteps: [\n      'Install R and required packages',\n      'Extract the downloaded component files to your project',\n      'Source the example script'\n    ],\n    importExample: `library(rgl)\nsource(\"./${'{componentName}'}.R\")\n\n# Create and display the model\nmodel <- ${'{componentName}'}$new()\nmodel$render()`,\n    customizationExample: `# Access individual parts\nsource(\"./meshes/MeshName.R\")\nsource(\"./geometries/MeshNameGeometry.R\")\nsource(\"./materials/MaterialName.R\")\n\nCustomModel <- setRefClass(\"CustomModel\",\n  fields = list(\n    geometry = \"MeshNameGeometry\",\n    material = \"MaterialName\"\n  ),\n  methods = list(\n    initialize = function() {\n      geometry <<- MeshNameGeometry$new()\n      material <<- MaterialName$new()\n    }\n  )\n)`\n  }\n};\n\n// Copy to clipboard function\nconst copyToClipboard = (text: string) => {\n  navigator.clipboard.writeText(text).then(() => {\n    // You could add a toast notification here\n    console.log('Copied to clipboard');\n  });\n};\n\n// VS Code-like editor component with syntax highlighting\nfunction CodeEditor({ code, languageId }: { code: string; languageId: LanguageId }) {\n  const language = LANGUAGES.find(lang => lang.id === languageId);\n  const lines = code.split('\\n');\n\n  const getSyntaxClass = (line: string): string => {\n    if (line.trim().startsWith('//') || line.trim().startsWith('#')) {\n      return 'text-[#6A9955]'; // Comments\n    }\n    if (line.includes('import') || line.includes('from') || line.includes('require')) {\n      return 'text-[#C586C0]'; // Imports\n    }\n    if (line.includes('function') || line.includes('def') || line.includes('class')) {\n      return 'text-[#569CD6]'; // Keywords\n    }\n    if (line.includes('const') || line.includes('let') || line.includes('var') || line.includes('final') || line.includes('static') || line.includes('public')) {\n      return 'text-[#9CDCFE]'; // Variables\n    }\n    if (line.includes('{') || line.includes('}') || line.includes('[') || line.includes(']') || line.includes('(') || line.includes(')')) {\n      return 'text-[#D4D4D4]'; // Brackets\n    }\n    if (line.includes('=') || line.includes('+') || line.includes('-') || line.includes('*') || line.includes('/') || line.includes('%')) {\n      return 'text-[#D4D4D4]'; // Operators\n    }\n    if (line.includes('\"') || line.includes(\"'\") || line.includes('`')) {\n      return 'text-[#CE9178]'; // Strings\n    }\n    if (!isNaN(Number(line.trim())) || line.trim().match(/0x[0-9A-Fa-f]+/)) {\n      return 'text-[#B5CEA8]'; // Numbers\n    }\n    return 'text-[#D4D4D4]'; // Default\n  };\n\n  return (\n    <div className=\"bg-[#1E1E1E] rounded-lg overflow-hidden font-mono text-sm h-full flex flex-col\">\n      <div className=\"bg-[#3C3C3C] px-4 py-2 flex items-center justify-between border-b border-[#333333]\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-full bg-[#FF5F56]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#FFBD2E]\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-[#27C93F]\"></div>\n        </div>\n        <div className=\"text-[#CCCCCC] text-xs flex items-center gap-2\">\n          <span>{language?.name}</span>\n          <span className=\"text-[#858585]\">•</span>\n          <span className=\"text-[#858585]\">{lines.length} lines</span>\n          <button\n            onClick={() => copyToClipboard(code)}\n            className=\"ml-2 p-1 hover:bg-[#404040] rounded\"\n            title=\"Copy to clipboard\"\n          >\n            <Copy className=\"w-3 h-3\" />\n          </button>\n        </div>\n      </div>\n      <div className=\"flex-1 overflow-auto p-4\">\n        <div className=\"flex\">\n          <div className=\"text-[#858585] w-8 select-none flex-shrink-0 pr-4 text-right\">\n            {lines.map((_, i) => (\n              <div key={i} className=\"select-none\">{i + 1}</div>\n            ))}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            {lines.map((line, i) => (\n              <div key={i} className={`whitespace-pre ${getSyntaxClass(line)}`}>\n                {line}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Language selector component with grouping\nfunction LanguageSelector({ \n  selectedLanguage, \n  onChange \n}: { \n  selectedLanguage: LanguageId; \n  onChange: (language: LanguageId) => void \n}) {\n  const groups = Array.from(new Set(LANGUAGES.map(lang => lang.group)));\n\n  return (\n    <div className=\"relative\">\n      <div className=\"flex items-center gap-2\">\n        <Languages className=\"w-4 h-4 text-purple-400\" />\n        <select\n          value={selectedLanguage}\n          onChange={(e) => onChange(e.target.value as LanguageId)}\n          className=\"bg-slate-700 text-white px-3 py-1.5 rounded border border-slate-600 focus:border-purple-500 outline-none text-sm appearance-none pr-8 bg-[url('data:image/svg+xml;utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 24 24%22 fill=%22%239CA3AF%22><path d=%22M7 10l5 5 5-5z%22/></svg>')] bg-no-repeat bg-[right_0.5rem_center] bg-[length:1rem] cursor-pointer\"\n        >\n          {groups.map(group => (\n            <optgroup key={group} label={group}>\n              {LANGUAGES.filter(lang => lang.group === group).map(lang => (\n                <option key={lang.id} value={lang.id}>\n                  {lang.name}\n                </option>\n              ))}\n            </optgroup>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n}\n\n// How to Use section component\nfunction HowToUseSection({ \n  selectedLanguage, \n  componentName \n}: { \n  selectedLanguage: LanguageId; \n  componentName: string \n}) {\n  const setup = LANGUAGE_SETUP[selectedLanguage];\n  const lang = LANGUAGES.find(l => l.id === selectedLanguage);\n\n  const replaceComponentName = (text: string) => {\n    return text.replace(/\\{componentName\\}/g, componentName);\n  };\n\n  return (\n    <div className=\"p-6 border-t border-slate-700\">\n      <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n        <Terminal className=\"w-5 h-5 mr-2 text-purple-400\" />\n        How to Use ({setup.packageManager})\n      </h4>\n      \n      <div className=\"space-y-6\">\n        {/* Dependencies Section */}\n        <div>\n          <h5 className=\"text-md font-semibold text-white mb-2 flex items-center\">\n            <Package className=\"w-4 h-4 mr-2 text-green-400\" />\n            Dependencies\n          </h5>\n          <div className=\"bg-slate-900 rounded-lg p-4\">\n            <div className=\"mb-3\">\n              <p className=\"text-slate-400 text-sm mb-2\">Install required dependencies:</p>\n              <div className=\"bg-slate-800 rounded p-3 relative\">\n                <code className=\"text-green-400 text-sm\">{setup.installCommand}</code>\n                <button\n                  onClick={() => copyToClipboard(setup.installCommand)}\n                  className=\"absolute top-2 right-2 p-1 hover:bg-slate-700 rounded\"\n                  title=\"Copy command\"\n                >\n                  <Copy className=\"w-3 h-3 text-slate-400\" />\n                </button>\n              </div>\n            </div>\n            \n            {setup.devInstallCommand && (\n              <div className=\"mb-3\">\n                <p className=\"text-slate-400 text-sm mb-2\">Install development dependencies:</p>\n                <div className=\"bg-slate-800 rounded p-3 relative\">\n                  <code className=\"text-blue-400 text-sm\">{setup.devInstallCommand}</code>\n                  <button\n                    onClick={() => copyToClipboard(setup.devInstallCommand)}\n                    className=\"absolute top-2 right-2 p-1 hover:bg-slate-700 rounded\"\n                    title=\"Copy command\"\n                  >\n                    <Copy className=\"w-3 h-3 text-slate-400\" />\n                  </button>\n                </div>\n              </div>\n            )}\n\n            <div className=\"text-xs text-slate-500 mt-3\">\n              <p className=\"font-medium mb-1\">Required packages:</p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                {setup.dependencies.map((dep, i) => (\n                  <li key={i}>{dep}</li>\n                ))}\n              </ul>\n              {setup.devDependencies.length > 0 && (\n                <>\n                  <p className=\"font-medium mb-1 mt-2\">Development packages:</p>\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    {setup.devDependencies.map((dep, i) => (\n                      <li key={i}>{dep}</li>\n                    ))}\n                  </ul>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Setup Steps */}\n        <div>\n          <h5 className=\"text-md font-semibold text-white mb-2\">Setup Steps</h5>\n          <div className=\"bg-slate-900 rounded-lg p-4\">\n            <ol className=\"list-decimal list-inside space-y-2 text-slate-400 text-sm\">\n              {setup.setupSteps.map((step, i) => (\n                <li key={i}>{step}</li>\n              ))}\n            </ol>\n          </div>\n        </div>\n\n        {/* Download Instructions */}\n        <div>\n          <h5 className=\"text-md font-semibold text-white mb-2\">Download & Extract</h5>\n          <div className=\"bg-slate-900 rounded-lg p-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <p className=\"text-slate-400 text-sm mb-2\">1. Download the complete project:</p>\n                <div className=\"bg-slate-800 rounded p-3\">\n                  <code className=\"text-blue-400 text-sm\">Click \"Download Full Project\" button above</code>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-slate-400 text-sm mb-2\">2. Extract to your project directory:</p>\n                <div className=\"bg-slate-800 rounded p-3\">\n                  <code className=\"text-yellow-400 text-sm\">\n                    {componentName}-{selectedLanguage}-with-example.zip → your-project/\n                  </code>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-slate-400 text-sm mb-2\">3. File structure after extraction:</p>\n                <div className=\"bg-slate-800 rounded p-3 text-xs\">\n                  <div className=\"text-slate-300 font-mono\">\n                    <div>📁 components/</div>\n                    <div className=\"ml-4\">📁 {componentName}/</div>\n                    <div className=\"ml-8\">📄 index.{lang?.extension}</div>\n                    <div className=\"ml-8\">📁 geometries/</div>\n                    <div className=\"ml-8\">📁 meshes/</div>\n                    <div className=\"ml-8\">📁 materials/</div>\n                    <div>📁 app/</div>\n                    <div className=\"ml-4\">📁 {componentName.toLowerCase()}-page/</div>\n                    <div className=\"ml-8\">📄 page.{lang?.extension}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Usage Example */}\n        <div>\n          <h5 className=\"text-md font-semibold text-white mb-2\">Basic Usage</h5>\n          <div className=\"bg-slate-900 rounded-lg overflow-hidden\">\n            <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700 flex justify-between items-center\">\n              <span className=\"text-purple-400 font-mono text-sm\">\n                Basic implementation example\n              </span>\n              <button\n                onClick={() => copyToClipboard(replaceComponentName(setup.importExample))}\n                className=\"p-1 hover:bg-slate-700 rounded\"\n                title=\"Copy example\"\n              >\n                <Copy className=\"w-3 h-3 text-slate-400\" />\n              </button>\n            </div>\n            <div className=\"p-4\">\n              <pre className=\"text-sm overflow-x-auto\">\n                <code className=\"text-slate-300\">\n                  {replaceComponentName(setup.importExample)}\n                </code>\n              </pre>\n            </div>\n          </div>\n        </div>\n\n        {/* Customization Example */}\n        <div>\n          <h5 className=\"text-md font-semibold text-white mb-2\">Advanced Customization</h5>\n          <div className=\"bg-slate-900 rounded-lg overflow-hidden\">\n            <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700 flex justify-between items-center\">\n              <span className=\"text-orange-400 font-mono text-sm\">\n                Access individual components\n              </span>\n              <button\n                onClick={() => copyToClipboard(replaceComponentName(setup.customizationExample))}\n                className=\"p-1 hover:bg-slate-700 rounded\"\n                title=\"Copy example\"\n              >\n                <Copy className=\"w-3 h-3 text-slate-400\" />\n              </button>\n            </div>\n            <div className=\"p-4\">\n              <pre className=\"text-sm overflow-x-auto\">\n                <code className=\"text-slate-300\">\n                  {replaceComponentName(setup.customizationExample)}\n                </code>\n              </pre>\n            </div>\n          </div>\n        </div>\n\n        {/* Language-specific Notes */}\n        <div>\n          <h5 className=\"text-md font-semibold text-white mb-2\">Important Notes</h5>\n          <div className=\"bg-slate-900 rounded-lg p-4\">\n            <div className=\"text-xs text-slate-400 space-y-2\">\n              {selectedLanguage === 'typescript' || selectedLanguage === 'javascript' ? (\n                <>\n                  <p>• This component is designed for React Three Fiber applications</p>\n                  <p>• Make sure you have a Canvas component wrapping your 3D content</p>\n                  <p>• Geometry files are separated for better maintainability and reusability</p>\n                  <p>• Each mesh component imports its geometry from the geometries folder</p>\n                </>\n              ) : selectedLanguage === 'python' ? (\n                <>\n                  <p>• This implementation uses ModernGL for high-performance OpenGL rendering</p>\n                  <p>• Make sure you have OpenGL drivers installed on your system</p>\n                  <p>• Geometry data is optimized for NumPy arrays</p>\n                  <p>• Each component is a separate class for modularity</p>\n                </>\n              ) : selectedLanguage === 'java' ? (\n                <>\n                  <p>• This implementation uses LWJGL for OpenGL bindings</p>\n                  <p>• Make sure to include native libraries for your platform</p>\n                  <p>• Geometry data is stored in efficient buffer objects</p>\n                  <p>• Memory management is handled automatically</p>\n                </>\n              ) : selectedLanguage === 'csharp' ? (\n                <>\n                  <p>• This implementation uses OpenTK for OpenGL bindings</p>\n                  <p>• Compatible with .NET Core and .NET Framework</p>\n                  <p>• Implements IDisposable for proper resource cleanup</p>\n                  <p>• Geometry data is optimized for GPU buffers</p>\n                </>\n              ) : selectedLanguage === 'cpp' ? (\n                <>\n                  <p>• This implementation uses modern OpenGL with GLEW and GLFW</p>\n                  <p>• Requires C++11 or later</p>\n                  <p>• Uses RAII for automatic resource management</p>\n                  <p>• Geometry data is stored in efficient STL containers</p>\n                </>\n              ) : selectedLanguage === 'go' ? (\n                <>\n                  <p>• This implementation uses go-gl bindings for OpenGL</p>\n                  <p>• Requires CGO to be enabled</p>\n                  <p>• Memory management is handled by Go's garbage collector</p>\n                  <p>• Geometry data is stored in slices for efficiency</p>\n                </>\n              ) : selectedLanguage === 'rust' ? (\n                <>\n                  <p>• This implementation uses wgpu for cross-platform graphics</p>\n                  <p>• Memory safety is guaranteed by Rust's ownership system</p>\n                  <p>• Geometry data is stored in efficient Vec containers</p>\n                  <p>• Compatible with WebAssembly for web deployment</p>\n                </>\n              ) : selectedLanguage === 'swift' ? (\n                <>\n                  <p>• This implementation uses Metal for high-performance graphics</p>\n                  <p>• Compatible with iOS, macOS, and tvOS</p>\n                  <p>• Automatic reference counting handles memory management</p>\n                  <p>• Geometry data is optimized for Metal buffers</p>\n                </>\n              ) : (\n                <>\n                  <p>• Geometry files are separated for better maintainability</p>\n                  <p>• Each component is modular and can be used independently</p>\n                  <p>• Memory optimization is applied for large models</p>\n                  <p>• Follow the platform-specific best practices for your language</p>\n                </>\n              )}\n              <p className=\"pt-2 border-t border-slate-700 mt-3\">\n                <strong>Performance Tips:</strong> For extremely large models (&gt;100MB), consider:\n                <br />• Loading geometry data asynchronously\n                <br />• Implementing level-of-detail (LOD) systems\n                <br />• Using instancing for repeated geometry\n                <br />• Applying mesh simplification for distant objects\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function GLBConverter() {\n  const [file, setFile] = useState<File | null>(null);\n  const [modelUrl, setModelUrl] = useState('');\n  const [projectStructure, setProjectStructure] = useState<ProjectStructure | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState('');\n  const [activeTab, setActiveTab] = useState<'upload' | 'preview' | 'code'>('upload');\n  const [gltfData, setGltfData] = useState<any>(null);\n\n  // Display options\n  const [displayMode, setDisplayMode] = useState<'original' | 'wireframe' | 'solid' | 'normals' | 'depth' | 'points'>('original');\n  const [autoRotate, setAutoRotate] = useState(true);\n  const [showGrid, setShowGrid] = useState(false);\n  const [showAxes, setShowAxes] = useState(false);\n  const [componentName, setComponentName] = useState('Model');\n  const [selectedLanguage, setSelectedLanguage] = useState<LanguageId>('typescript');\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const uploadedFile = event.target.files?.[0];\n    if (uploadedFile && uploadedFile.name.endsWith('.glb')) {\n      setFile(uploadedFile);\n      setError('');\n      setIsLoading(true);\n      setProgress(0);\n\n      try {\n        // Create object URL for preview\n        const url = URL.createObjectURL(uploadedFile);\n        setModelUrl(url);\n\n        // Load GLTF with progress tracking for large files\n        await loadGLTFWithProgress(url, uploadedFile);\n\n        // Generate component name from filename\n        const name = uploadedFile.name.replace('.glb', '').replace(/[^a-zA-Z0-9]/g, '');\n        const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n        setComponentName(capitalizedName);\n        setActiveTab('preview');\n      } catch (err) {\n        console.error(\"Error loading GLTF\", err);\n        setError('Error processing GLB file. The file may be too large or corrupted.');\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setError('Please upload a valid .glb file');\n    }\n  };\n\n  const loadGLTFWithProgress = async (url: string, file: File): Promise<void> => {\n    setIsProcessing(true);\n    setProgress(0);\n\n    return new Promise<void>((resolve, reject) => {\n      try {\n        // Set up DRACO decoder for compressed models (common in large GLBs)\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\n\n        // Track progress for large files\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n\n        xhr.onload = function() {\n          if (xhr.status === 200) {\n            try {\n              // Process the GLB data\n              const loader = new GLTFLoader();\n              loader.setDRACOLoader(dracoLoader);\n              loader.parse(\n                xhr.response,\n                '',\n                (gltf) => {\n                  // Store GLTF data for transpilation\n                  setGltfData(gltf);\n                  \n                  // Generate project structure\n                  const structure = generateProjectStructure(\n                    gltf, \n                    componentName, \n                    displayMode, \n                    selectedLanguage\n                  );\n                  setProjectStructure(structure);\n                  setIsProcessing(false);\n                  resolve();\n                },\n                (error) => {\n                  console.error(\"Error parsing GLTF\", error);\n                  setIsProcessing(false);\n                  reject(error);\n                }\n              );\n            } catch (parseError) {\n              console.error(\"Error parsing GLTF data\", parseError);\n              setIsProcessing(false);\n              reject(parseError);\n            }\n          } else {\n            reject(new Error(`Failed to load file: ${xhr.statusText}`));\n          }\n        };\n\n        xhr.onprogress = function(event) {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            setProgress(percentComplete);\n          }\n        };\n\n        xhr.onerror = function() {\n          reject(new Error('Network error occurred while loading the file'));\n        };\n\n        xhr.send();\n      } catch (err) {\n        setIsProcessing(false);\n        reject(err);\n      }\n    });\n  };\n\n  // Add this useEffect hook to regenerate code when language changes\n  useEffect(() => {\n    if (gltfData && componentName && activeTab === 'code') {\n      setIsProcessing(true);\n      setProgress(0);\n\n      try {\n        console.log(`Regenerating project structure for ${selectedLanguage}...`);\n        // Generate project structure with current settings\n        const structure = generateProjectStructure(\n          gltfData, \n          componentName, \n          displayMode, \n          selectedLanguage\n        );\n        setProjectStructure(structure);\n        setProgress(100);\n        console.log(\"Project structure regenerated successfully\");\n      } catch (err) {\n        console.error(\"Error regenerating project structure\", err);\n        setError('Failed to regenerate project structure for the selected language');\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  }, [selectedLanguage, gltfData, componentName, displayMode, activeTab]);\n\n  const downloadZip = (includeExamplePage: boolean = false) => {\n    if (!projectStructure) return;\n\n    setIsProcessing(true);\n    try {\n      const zip = new JSZip();\n      const lang = LANGUAGES.find(l => l.id === selectedLanguage);\n      if (!lang) return;\n\n      // Create folder structure\n      const componentFolder = zip.folder(`components/${componentName}`);\n      const meshesFolder = componentFolder?.folder('meshes');\n      const geometriesFolder = componentFolder?.folder('geometries');\n      const materialsFolder = componentFolder?.folder('materials');\n\n      // Add index file\n      componentFolder?.file(`index.${lang.extension}`, projectStructure.indexContent);\n\n      // Add geometry files\n      projectStructure.geometries?.forEach(geometry => {\n        geometriesFolder?.file(\n          `${geometry.name}Geometry.${lang.geometryExtension}`, \n          geometry.content\n        );\n      });\n\n      // Add mesh files\n      projectStructure.meshes.forEach(mesh => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n\n      // Add material files\n      projectStructure.materials.forEach(material => {\n        materialsFolder?.file(`${material.name}.${lang.extension}`, material.content);\n      });\n\n      // Add example page if requested\n      if (includeExamplePage) {\n        const appFolder = zip.folder('app');\n        const modelPageFolder = appFolder?.folder(`${componentName.toLowerCase()}-page`);\n        modelPageFolder?.file(`page.${lang.extension}`, projectStructure.examplePageContent);\n      }\n\n      // Generate and download zip\n      zip.generateAsync({ type: 'blob' }).then(content => {\n        const suffix = includeExamplePage ? '-with-example' : '';\n        saveAs(content, `${componentName}-${selectedLanguage}${suffix}.zip`);\n      });\n    } catch (err) {\n      console.error(\"Error generating ZIP\", err);\n      setError('Failed to generate ZIP file. The model might be too large.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadCurrentView = () => {\n    if (!gltfData) return;\n\n    setIsProcessing(true);\n    try {\n      // Generate project structure with current display mode\n      const structure = generateProjectStructure(\n        gltfData, \n        componentName, \n        displayMode, \n        selectedLanguage\n      );\n      const zip = new JSZip();\n      const lang = LANGUAGES.find(l => l.id === selectedLanguage);\n      if (!lang) return;\n\n      // Create folder structure\n      const componentFolder = zip.folder(`components/${componentName}-${displayMode}`);\n      const meshesFolder = componentFolder?.folder('meshes');\n      const geometriesFolder = componentFolder?.folder('geometries');\n      const materialsFolder = componentFolder?.folder('materials');\n\n      // Add index file\n      componentFolder?.file(`index.${lang.extension}`, structure.indexContent);\n\n      // Add geometry files\n      structure.geometries?.forEach(geometry => {\n        geometriesFolder?.file(\n          `${geometry.name}Geometry.${lang.geometryExtension}`, \n          geometry.content\n        );\n      });\n\n      // Add mesh files\n      structure.meshes.forEach(mesh => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n\n      // Add material files\n      structure.materials.forEach(material => {\n        materialsFolder?.file(`${material.name}.${lang.extension}`, material.content);\n      });\n\n      // Add example page\n      const appFolder = zip.folder('app');\n      const modelPageFolder = appFolder?.folder(`${componentName.toLowerCase()}-${displayMode}-page`);\n      modelPageFolder?.file(`page.${lang.extension}`, structure.examplePageContent);\n\n      // Generate and download zip\n      zip.generateAsync({ type: 'blob' }).then(content => {\n        saveAs(content, `${componentName}-${displayMode}-${selectedLanguage}.zip`);\n      });\n    } catch (err) {\n      console.error(\"Error generating ZIP for current view\", err);\n      setError(`Failed to generate ZIP for ${displayMode} view. The model might be too large.`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadModel = () => {\n    if (!file) return;\n    const url = URL.createObjectURL(file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-slate-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-4 flex items-center justify-center gap-3\">\n            <Code className=\"w-10 h-10 text-purple-400\" />\n            GLB to Code Converter\n          </h1>\n          <p className=\"text-slate-300 max-w-3xl mx-auto text-lg\">\n            Convert your GLB 3D models into self-contained components in 15+ programming languages with separate geometry blocks for easier maintenance.\n            Handles large files efficiently with progress tracking and memory optimization.\n          </p>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"bg-slate-800 rounded-lg p-1 flex\">\n            <button\n              onClick={() => setActiveTab('upload')}\n              className={`px-6 py-2 rounded-md font-medium transition-all flex items-center gap-2 ${\n                activeTab === 'upload'\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white'\n              }`}\n            >\n              <Upload className=\"w-4 h-4\" />\n              Upload\n            </button>\n            <button\n              onClick={() => setActiveTab('preview')}\n              disabled={!file}\n              className={`px-6 py-2 rounded-md font-medium transition-all flex items-center gap-2 ${\n                activeTab === 'preview' && file\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed'\n              }`}\n            >\n              <Eye className=\"w-4 h-4\" />\n              Preview\n            </button>\n            <button\n              onClick={() => setActiveTab('code')}\n              disabled={!projectStructure}\n              className={`px-6 py-2 rounded-md font-medium transition-all flex items-center gap-2 ${\n                activeTab === 'code' && projectStructure\n                  ? 'bg-purple-600 text-white'\n                  : 'text-slate-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed'\n              }`}\n            >\n              <Code className=\"w-4 h-4\" />\n              Code\n            </button>\n          </div>\n        </div>\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"bg-red-900/50 border border-red-500 rounded-lg p-4 mb-6 max-w-2xl mx-auto\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"w-5 h-5 text-red-400 mr-2\" />\n              <span className=\"text-red-200\">{error}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Upload Tab */}\n        {activeTab === 'upload' && (\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl p-8 border border-slate-700\">\n              <div className=\"text-center\">\n                <div className=\"border-2 border-dashed border-slate-600 rounded-lg p-12 hover:border-purple-500 transition-colors\">\n                  <Upload className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">\n                    Upload your GLB model\n                  </h3>\n                  <p className=\"text-slate-400 mb-6\">\n                    Drop your .glb file here or click to browse\n                  </p>\n                  <input\n                    type=\"file\"\n                    accept=\".glb\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                    id=\"file-upload\"\n                    disabled={isLoading}\n                  />\n                  <label\n                    htmlFor=\"file-upload\"\n                    className={`bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg cursor-pointer transition-colors inline-block ${\n                      isLoading ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      'Choose File'\n                    )}\n                  </label>\n                </div>\n              </div>\n\n              {/* Progress Bar for Large Files */}\n              {(isLoading || isProcessing) && (\n                <div className=\"mt-6\">\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-slate-300 text-sm\">\n                      {isProcessing ? 'Processing model...' : 'Loading file...'}\n                    </span>\n                    <span className=\"text-slate-300 text-sm\">{Math.round(progress)}%</span>\n                  </div>\n                  <div className=\"w-full bg-slate-700 rounded-full h-2.5\">\n                    <div \n                      className=\"bg-purple-600 h-2.5 rounded-full transition-all duration-300\" \n                      style={{ width: `${progress}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-slate-400 text-xs mt-2\">\n                    {progress < 100\n                      ? \"Loading large model. This may take a few moments...\"\n                      : \"Optimizing model data for transpilation...\"\n                    }\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Preview Tab */}\n        {activeTab === 'preview' && modelUrl && (\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-xl font-semibold text-white\">3D Model Preview</h3>\n                <div className=\"flex items-center gap-4\">\n                  {/* Display Mode Controls */}\n                  <div className=\"flex items-center gap-2\">\n                    <label className=\"text-slate-300 text-sm\">Display Mode:</label>\n                    <select\n                      value={displayMode}\n                      onChange={(e) => setDisplayMode(e.target.value as any)}\n                      className=\"bg-slate-700 text-white px-3 py-1 rounded border border-slate-600 focus:border-purple-500 outline-none text-sm\"\n                    >\n                      <option value=\"original\">Original</option>\n                      <option value=\"wireframe\">Wireframe</option>\n                      <option value=\"solid\">Solid Color</option>\n                      <option value=\"normals\">Normals</option>\n                      <option value=\"depth\">Depth</option>\n                      <option value=\"points\">Point Cloud</option>\n                    </select>\n                  </div>\n\n                  {/* Toggle Controls */}\n                  <div className=\"flex items-center gap-4\">\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={autoRotate}\n                        onChange={(e) => setAutoRotate(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Auto Rotate\n                    </label>\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={showGrid}\n                        onChange={(e) => setShowGrid(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Grid\n                    </label>\n                    <label className=\"flex items-center gap-2 text-slate-300 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={showAxes}\n                        onChange={(e) => setShowAxes(e.target.checked)}\n                        className=\"rounded border-slate-600 bg-slate-700 text-purple-600 focus:ring-purple-500\"\n                      />\n                      Axes\n                    </label>\n                  </div>\n\n                  <button\n                    onClick={downloadCurrentView}\n                    disabled={isProcessing}\n                    className={`bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 ${\n                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isProcessing ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <File className=\"w-4 h-4\" />\n                        Download {displayMode} Version\n                      </>\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {/* Display Mode Description */}\n              <div className=\"mb-4\">\n                <div className=\"bg-slate-900 rounded-lg p-3\">\n                  <p className=\"text-slate-400 text-sm\">\n                    {displayMode === 'original' && 'Showing the original model with its materials and textures.'}\n                    {displayMode === 'wireframe' && 'Displaying the model as a wireframe structure showing the mesh geometry.'}\n                    {displayMode === 'solid' && 'Rendering the model with a uniform solid color material.'}\n                    {displayMode === 'normals' && 'Visualizing surface normals with color-coded directions (RGB = XYZ).'}\n                    {displayMode === 'depth' && 'Showing depth information - closer surfaces appear lighter.'}\n                    {displayMode === 'points' && 'Displaying the model as a point cloud of vertices.'}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"bg-slate-900 rounded-lg overflow-hidden\" style={{ height: '500px' }}>\n                <Canvas \n                  camera={{ position: [0, 0, 5], fov: 50 }}\n                  gl={{\n                    powerPreference: \"high-performance\",\n                    antialias: true,\n                    alpha: true\n                  }}\n                >\n                  <ambientLight intensity={0.5} />\n                  <pointLight position={[10, 10, 10]} />\n                  <pointLight position={[-10, -10, -10]} intensity={0.3} />\n\n                  {/* Memory-optimized loading for large models */}\n                  {modelUrl && (\n                    <React.Suspense fallback={\n                      <Html center>\n                        <div className=\"text-white bg-black/50 p-2 rounded\">\n                          <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n                          Loading model...\n                        </div>\n                      </Html>\n                    }>\n                      <ModelPreview \n                        url={modelUrl} \n                        displayMode={displayMode} \n                        autoRotate={autoRotate} \n                      />\n                    </React.Suspense>\n                  )}\n\n                  {showGrid && (\n                    <gridHelper args={[10, 10, '#444444', '#666666']} />\n                  )}\n\n                  {showAxes && (\n                    <axesHelper args={[2]} />\n                  )}\n\n                  <OrbitControls \n                    enableZoom \n                    enablePan \n                    enableRotate \n                    minDistance={0.1}\n                    maxDistance={100}\n                  />\n                  <Environment preset=\"studio\" />\n                </Canvas>\n              </div>\n\n              <p className=\"text-slate-400 text-sm mt-4 text-center\">\n                Use mouse to rotate, zoom, and pan around the model. Try different display modes to analyze the model structure.\n              </p>\n            </div>\n          </div>\n        )}\n\n        {isProcessing && activeTab === 'code' && (\n          <div className=\"absolute top-4 right-4 bg-slate-800 px-3 py-1 rounded text-sm text-purple-400\">\n            Regenerating code...\n          </div>\n        )}\n\n        {/* Code Tab */}\n        {activeTab === 'code' && projectStructure && (\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700\">\n              <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center p-6 border-b border-slate-700 gap-4\">\n                <div className=\"flex flex-col md:flex-row items-start md:items-center gap-4\">\n                  <h3 className=\"text-xl font-semibold text-white\">\n                    Project Structure\n                  </h3>\n                  {/* Language Selection */}\n                  <div className=\"flex items-center gap-2\">\n                    <LanguageSelector \n                      selectedLanguage={selectedLanguage} \n                      onChange={setSelectedLanguage} \n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col md:flex-row gap-4 w-full md:w-auto\">\n                  <button\n                    onClick={() => downloadZip(true)}\n                    disabled={isProcessing}\n                    className={`bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 w-full md:w-auto ${\n                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isProcessing ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Layout className=\"w-4 h-4\" />\n                        Download Full Project\n                      </>\n                    )}\n                  </button>\n\n                  <button\n                    onClick={() => downloadZip(false)}\n                    disabled={isProcessing}\n                    className={`bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 w-full md:w-auto ${\n                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isProcessing ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <File className=\"w-4 h-4\" />\n                        Download Component\n                      </>\n                    )}\n                  </button>\n\n                  <button\n                    onClick={downloadModel}\n                    className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 w-full md:w-auto\"\n                  >\n                    <Download className=\"w-4 h-4\" />\n                    Download GLB\n                  </button>\n                </div>\n              </div>\n\n              {/* Project Structure Overview */}\n              <div className=\"p-6 border-b border-slate-700\">\n                <div className=\"flex flex-col lg:flex-row items-start gap-6\">\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                      <Folder className=\"w-5 h-5 mr-2 text-purple-400\" />\n                      Project Structure\n                    </h4>\n                    <div className=\"bg-slate-900 rounded-lg p-4\">\n                      <div className=\"text-slate-400 text-sm\">\n                        <div className=\"flex items-center\">\n                          <Folder className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                          <span className=\"font-medium\">components</span>\n                        </div>\n                        <div className=\"pl-6\">\n                          <div className=\"flex items-center\">\n                            <Folder className=\"w-4 h-4 mr-2 text-blue-400\" />\n                            <span className=\"font-medium\">{componentName}</span>\n                          </div>\n                          <div className=\"pl-6\">\n                            <div className=\"flex items-center\">\n                              <FileText className=\"w-4 h-4 mr-2 text-green-400\" />\n                              <span>index.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                            </div>\n                            \n                            <div className=\"flex items-center mt-2\">\n                              <Folder className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                              <span className=\"font-medium\">geometries</span>\n                            </div>\n                            <div className=\"pl-6\">\n                              {projectStructure.geometries?.map((geometry, i) => (\n                                <div key={i} className=\"flex items-center\">\n                                  <File className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                                  <span>{geometry.name}Geometry.{LANGUAGES.find(l => l.id === selectedLanguage)?.geometryExtension}</span>\n                                </div>\n                              ))}\n                            </div>\n\n                            <div className=\"flex items-center mt-2\">\n                              <Folder className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                              <span className=\"font-medium\">meshes</span>\n                            </div>\n                            <div className=\"pl-6\">\n                              {projectStructure.meshes.map((mesh, i) => (\n                                <div key={i} className=\"flex items-center\">\n                                  <File className=\"w-4 h-4 mr-2 text-cyan-400\" />\n                                  <span>{mesh.name}.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                                </div>\n                              ))}\n                            </div>\n\n                            <div className=\"flex items-center mt-2\">\n                              <Folder className=\"w-4 h-4 mr-2 text-orange-400\" />\n                              <span className=\"font-medium\">materials</span>\n                            </div>\n                            <div className=\"pl-6\">\n                              {projectStructure.materials.map((material, i) => (\n                                <div key={i} className=\"flex items-center\">\n                                  <File className=\"w-4 h-4 mr-2 text-orange-400\" />\n                                  <span>{material.name}.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"mt-4 flex items-center\">\n                          <Folder className=\"w-4 h-4 mr-2 text-purple-400\" />\n                          <span className=\"font-medium\">app</span>\n                        </div>\n                        <div className=\"pl-6\">\n                          <div className=\"flex items-center\">\n                            <Folder className=\"w-4 h-4 mr-2 text-blue-400\" />\n                            <span className=\"font-medium\">{componentName.toLowerCase()}-page</span>\n                          </div>\n                          <div className=\"pl-6\">\n                            <div className=\"flex items-center\">\n                              <FileText className=\"w-4 h-4 mr-2 text-green-400\" />\n                              <span>page.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                      <FileText className=\"w-5 h-5 mr-2 text-purple-400\" />\n                      Model Statistics\n                    </h4>\n                    <div className=\"bg-slate-900 rounded-lg p-4\">\n                      <div className=\"text-slate-400 text-sm space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span>Meshes:</span>\n                          <span className=\"font-medium\">{projectStructure.meshes.length}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Geometry Files:</span>\n                          <span className=\"font-medium\">{projectStructure.geometries?.length || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Materials:</span>\n                          <span className=\"font-medium\">{projectStructure.materials.length}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Total Vertices:</span>\n                          <span className=\"font-medium\">{projectStructure.totalVertices.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Total Triangles:</span>\n                          <span className=\"font-medium\">{projectStructure.totalTriangles.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>File Size:</span>\n                          <span className=\"font-medium\">{file ? (file.size / 1024 / 1024).toFixed(2) + ' MB' : 'N/A'}</span>\n                        </div>\n                        <div className=\"pt-2 border-t border-slate-700 mt-2\">\n                          <p className=\"text-xs text-slate-500\">\n                            {`Note: For extremely large models (>100MB), some meshes might be simplified\n                             during transpilation to prevent browser memory issues.`}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Code Preview */}\n              <div className=\"p-6\">\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <FileText className=\"w-5 h-5 mr-2 text-purple-400\" />\n                    index.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension} - Main Component\n                  </h4>\n                  <CodeEditor code={projectStructure.indexContent} languageId={selectedLanguage} />\n                </div>\n\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <Folder className=\"w-5 h-5 mr-2 text-cyan-400\" />\n                    Example Page\n                  </h4>\n                  <div className=\"bg-slate-900 rounded-lg overflow-hidden\">\n                    <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700\">\n                      <span className=\"text-purple-400 font-mono\">\n                        app/{componentName.toLowerCase()}-page/page.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}\n                      </span>\n                    </div>\n                    <CodeEditor code={projectStructure.examplePageContent} languageId={selectedLanguage} />\n                  </div>\n                </div>\n\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <Folder className=\"w-5 h-5 mr-2 text-cyan-400\" />\n                    Geometry Files\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {projectStructure.geometries?.slice(0, 3).map((geometry, i) => (\n                      <div key={i} className=\"bg-slate-900 rounded-lg overflow-hidden\">\n                        <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700\">\n                          <span className=\"text-cyan-400 font-mono\">\n                            {geometry.name}Geometry.{LANGUAGES.find(l => l.id === selectedLanguage)?.geometryExtension}\n                          </span>\n                        </div>\n                        <CodeEditor code={geometry.content} languageId={selectedLanguage} />\n                      </div>\n                    ))}\n                    {projectStructure.geometries && projectStructure.geometries.length > 3 && (\n                      <div className=\"col-span-full text-center text-slate-400 text-sm py-4\">\n                        ... and {projectStructure.geometries.length - 3} more geometry files\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <Folder className=\"w-5 h-5 mr-2 text-cyan-400\" />\n                    Mesh Components\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {projectStructure.meshes.slice(0, 3).map((mesh, i) => (\n                      <div key={i} className=\"bg-slate-900 rounded-lg overflow-hidden\">\n                        <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700\">\n                          <span className=\"text-cyan-400 font-mono\">\n                            {mesh.name}.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}\n                          </span>\n                        </div>\n                        <CodeEditor code={mesh.content} languageId={selectedLanguage} />\n                      </div>\n                    ))}\n                    {projectStructure.meshes.length > 3 && (\n                      <div className=\"col-span-full text-center text-slate-400 text-sm py-4\">\n                        ... and {projectStructure.meshes.length - 3} more mesh components\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-lg font-semibold text-white mb-3 flex items-center\">\n                    <Folder className=\"w-5 h-5 mr-2 text-orange-400\" />\n                    Material Components\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {projectStructure.materials.slice(0, 3).map((material, i) => (\n                      <div key={i} className=\"bg-slate-900 rounded-lg overflow-hidden\">\n                        <div className=\"px-4 py-2 bg-slate-800 border-b border-slate-700\">\n                          <span className=\"text-orange-400 font-mono\">\n                            {material.name}.{LANGUAGES.find(l => l.id === selectedLanguage)?.extension}\n                          </span>\n                        </div>\n                        <CodeEditor code={material.content} languageId={selectedLanguage} />\n                      </div>\n                    ))}\n                    {projectStructure.materials.length > 3 && (\n                      <div className=\"col-span-full text-center text-slate-400 text-sm py-4\">\n                        ... and {projectStructure.materials.length - 3} more material components\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Updated How to Use Section */}\n              <HowToUseSection \n                selectedLanguage={selectedLanguage} \n                componentName={componentName} \n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Component to display the GLB model in the preview with memory optimization\nfunction ModelPreview({ \n  url, \n  displayMode, \n  autoRotate \n}: { \n  url: string; \n  displayMode: string; \n  autoRotate: boolean \n}) {\n  const [gltf, setGltf] = useState<any>(null);\n  const meshRef = useRef<THREE.Group>(null);\n\n  // Load GLTF with memory optimization for large files\n  useEffect(() => {\n    let isMounted = true;\n    const loader = new GLTFLoader();\n\n    // Set up DRACO for compressed models\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\n    loader.setDRACOLoader(dracoLoader);\n\n    // For large files, use a more memory-efficient approach\n    fetch(url)\n      .then(response => response.arrayBuffer())\n      .then(data => {\n        if (!isMounted) return;\n\n        loader.parse(\n          data,\n          '',\n          (gltf) => {\n            // For extremely large models, simplify geometries to prevent memory issues\n            if (gltf.scene) {\n              gltf.scene.traverse((object: THREE.Object3D) => {\n                if (object.isMesh) {\n                  const mesh = object as THREE.Mesh;\n                  const geometry = mesh.geometry;\n\n                  // Check if the geometry is extremely large\n                  const vertexCount = geometry.attributes.position.count;\n                  if (vertexCount > 1000000) {\n                    // For extremely large meshes, consider simplifying or warning\n                    console.warn(`Mesh ${mesh.name} has ${vertexCount} vertices - this may cause performance issues`);\n                  }\n                }\n              });\n            }\n\n            if (isMounted) {\n              setGltf(gltf);\n            }\n          },\n          (error) => {\n            console.error(\"Error parsing GLTF\", error);\n          }\n        );\n      })\n      .catch(error => {\n        console.error(\"Error loading GLB file\", error);\n      });\n\n    return () => {\n      isMounted = false;\n      // Clean up GLTF resources\n      if (gltf) {\n        gltf.scene.traverse((object: THREE.Object3D) => {\n          if (object.isMesh) {\n            const mesh = object as THREE.Mesh;\n            mesh.geometry.dispose();\n            if (Array.isArray(mesh.material)) {\n              mesh.material.forEach(material => material.dispose());\n            } else {\n              mesh.material.dispose();\n            }\n          }\n        });\n      }\n    };\n  }, [url]);\n\n  useFrame((state) => {\n    if (meshRef.current && autoRotate) {\n      meshRef.current.rotation.y = state.clock.getElapsedTime() * 0.5;\n    }\n  });\n\n  // Apply material overrides based on display mode\n  useEffect(() => {\n    if (gltf && gltf.scene) {\n      gltf.scene.traverse((child: THREE.Object3D) => {\n        if (child.isMesh) {\n          const mesh = child as THREE.Mesh;\n          const originalMaterial = mesh.material;\n\n          // Dispose of old materials to prevent memory leaks\n          if (Array.isArray(originalMaterial)) {\n            originalMaterial.forEach(material => material.dispose());\n          } else if (originalMaterial && 'dispose' in originalMaterial) {\n            (originalMaterial as THREE.Material).dispose();\n          }\n\n          // Create new materials based on display mode\n          switch (displayMode) {\n            case 'wireframe':\n              if (Array.isArray(originalMaterial)) {\n                mesh.material = originalMaterial.map(mat => {\n                  const newMat = mat.clone();\n                  newMat.wireframe = true;\n                  newMat.transparent = true;\n                  newMat.opacity = 0.8;\n                  return newMat;\n                });\n              } else {\n                const newMat = originalMaterial.clone();\n                newMat.wireframe = true;\n                newMat.transparent = true;\n                newMat.opacity = 0.8;\n                mesh.material = newMat;\n              }\n              break;\n            case 'points':\n              mesh.material = new THREE.PointsMaterial({\n                color: 0x00ff00,\n                size: 0.01,\n                sizeAttenuation: true\n              });\n              break;\n            case 'normals':\n              mesh.material = new THREE.MeshNormalMaterial();\n              break;\n            case 'depth':\n              mesh.material = new THREE.MeshDepthMaterial();\n              break;\n            case 'solid':\n              mesh.material = new THREE.MeshStandardMaterial({\n                color: 0x888888,\n                metalness: 0.1,\n                roughness: 0.8\n              });\n              break;\n            default:\n              // Keep original materials for 'original' mode\n              mesh.material = originalMaterial;\n              break;\n          }\n        }\n      });\n    }\n  }, [gltf, displayMode]);\n\n  if (!gltf) {\n    return (\n      <Html center>\n        <div className=\"text-white bg-black/50 p-2 rounded\">\n          <Loader2 className=\"w-4 h-4 inline mr-2 animate-spin\" />\n          Loading model...\n        </div>\n      </Html>\n    );\n  }\n\n  return (\n    <primitive \n      ref={meshRef} \n      object={gltf.scene} \n      scale={[1, 1, 1]}\n      position={[0, 0, 0]}\n    />\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAVA;;;;;;;;;;;AAcA,qEAAqE;AACrE,MAAM,YAAY;IAChB;QAAE,IAAI;QAAc,MAAM;QAAc,WAAW;QAAO,mBAAmB;QAAM,OAAO;IAAM;IAChG;QAAE,IAAI;QAAc,MAAM;QAAc,WAAW;QAAO,mBAAmB;QAAM,OAAO;IAAM;IAChG;QAAE,IAAI;QAAU,MAAM;QAAU,WAAW;QAAM,mBAAmB;QAAM,OAAO;IAAU;IAC3F;QAAE,IAAI;QAAQ,MAAM;QAAQ,WAAW;QAAQ,mBAAmB;QAAQ,OAAO;IAAU;IAC3F;QAAE,IAAI;QAAU,MAAM;QAAM,WAAW;QAAM,mBAAmB;QAAM,OAAO;IAAU;IACvF;QAAE,IAAI;QAAO,MAAM;QAAO,WAAW;QAAO,mBAAmB;QAAK,OAAO;IAAU;IACrF;QAAE,IAAI;QAAM,MAAM;QAAM,WAAW;QAAM,mBAAmB;QAAM,OAAO;IAAU;IACnF;QAAE,IAAI;QAAQ,MAAM;QAAQ,WAAW;QAAM,mBAAmB;QAAM,OAAO;IAAU;IACvF;QAAE,IAAI;QAAS,MAAM;QAAS,WAAW;QAAS,mBAAmB;QAAS,OAAO;IAAS;IAC9F;QAAE,IAAI;QAAU,MAAM;QAAU,WAAW;QAAM,mBAAmB;QAAM,OAAO;IAAS;IAC1F;QAAE,IAAI;QAAQ,MAAM;QAAQ,WAAW;QAAM,mBAAmB;QAAM,OAAO;IAAM;IACnF;QAAE,IAAI;QAAO,MAAM;QAAO,WAAW;QAAO,mBAAmB;QAAO,OAAO;IAAM;IACnF;QAAE,IAAI;QAAS,MAAM;QAAS,WAAW;QAAS,mBAAmB;QAAS,OAAO;IAAU;IAC/F;QAAE,IAAI;QAAQ,MAAM;QAAQ,WAAW;QAAQ,mBAAmB;QAAQ,OAAO;IAAS;IAC1F;QAAE,IAAI;QAAK,MAAM;QAAK,WAAW;QAAK,mBAAmB;QAAK,OAAO;IAAe;CACrF;AAID,wDAAwD;AACxD,MAAM,iBAAiB;IACrB,YAAY;QACV,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;YACA;YACA;YACA;SACD;QACD,iBAAiB;YACf;YACA;YACA;SACD;QACD,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAiBhB,sBAAuB;IAYzB;IACA,YAAY;QACV,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAiBhB,sBAAuB;IAYzB;IACA,QAAQ;QACN,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAiBhB,sBAAuB;IAUzB;IACA,MAAM;QACJ,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAUjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAUhB,sBAAuB;IAczB;IACA,QAAQ;QACN,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAYhB,sBAAuB;IAgBzB;IACA,KAAK;QACH,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAOjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAqBhB,sBAAuB;IAczB;IACA,IAAI;QACF,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAIjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAyBhB,sBAAuB;IAkBzB;IACA,MAAM;QACJ,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAMjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAgBhB,sBAAuB;IAkBzB;IACA,OAAO;QACL,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAIjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAchB,sBAAuB;IAczB;IACA,QAAQ;QACN,gBAAgB;QAChB,cAAc;YACZ;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAKjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAUhB,sBAAuB;IAazB;IACA,MAAM;QACJ,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;SACD;QACD,eAAgB;QAiBhB,sBAAuB;IAWzB;IACA,KAAK;QACH,gBAAgB;QAChB,cAAc;YACZ;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAkBhB,sBAAuB;IAezB;IACA,OAAO;QACL,gBAAgB;QAChB,cAAc;YACZ;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAKjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAUhB,sBAAuB;IAazB;IACA,MAAM;QACJ,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAMjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAWhB,sBAAuB;IAazB;IACA,GAAG;QACD,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;SACD;QACD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","debugId":null}}]
}
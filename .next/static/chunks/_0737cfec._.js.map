{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/components/upload-button.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { Upload } from 'lucide-react';\n\nexport default function UploadButton({ onClick }: { onClick: () => void }) {\n  return (\n    <button\n      onClick={onClick}\n      className=\"inline-flex items-center gap-2 rounded-md border border-indigo-500/30 bg-indigo-500/10 px-3 py-1.5 text-sm text-indigo-200 hover:bg-indigo-500/15 transition-colors\"\n    >\n      <Upload className=\"h-4 w-4\" />\n      Convert other formats to .glb\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAKe,SAAS,aAAa,KAAoC;QAApC,EAAE,OAAO,EAA2B,GAApC;IACnC,qBACE,6LAAC;QACC,SAAS;QACT,WAAU;;0BAEV,6LAAC,yMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;YAAY;;;;;;;AAIpC;KAVwB","debugId":null}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/types/constant.ts"],"sourcesContent":["export const LANGUAGES = [\n  {\n    id: \"typescript\",\n    name: \"TypeScript\",\n    extension: \"tsx\",\n    geometryExtension: \"ts\",\n    group: \"Web\",\n  },\n  {\n    id: \"javascript\",\n    name: \"JavaScript\",\n    extension: \"jsx\",\n    geometryExtension: \"js\",\n    group: \"Web\",\n  },\n  {\n    id: \"python\",\n    name: \"Python\",\n    extension: \"py\",\n    geometryExtension: \"py\",\n    group: \"General\",\n  },\n  {\n    id: \"java\",\n    name: \"Java\",\n    extension: \"java\",\n    geometryExtension: \"java\",\n    group: \"General\",\n  },\n  {\n    id: \"csharp\",\n    name: \"C#\",\n    extension: \"cs\",\n    geometryExtension: \"cs\",\n    group: \"General\",\n  },\n  {\n    id: \"cpp\",\n    name: \"C++\",\n    extension: \"cpp\",\n    geometryExtension: \"h\",\n    group: \"Systems\",\n  },\n  {\n    id: \"go\",\n    name: \"Go\",\n    extension: \"go\",\n    geometryExtension: \"go\",\n    group: \"Systems\",\n  },\n  {\n    id: \"rust\",\n    name: \"Rust\",\n    extension: \"rs\",\n    geometryExtension: \"rs\",\n    group: \"Systems\",\n  },\n  {\n    id: \"swift\",\n    name: \"Swift\",\n    extension: \"swift\",\n    geometryExtension: \"swift\",\n    group: \"Mobile\",\n  },\n  {\n    id: \"kotlin\",\n    name: \"Kotlin\",\n    extension: \"kt\",\n    geometryExtension: \"kt\",\n    group: \"Mobile\",\n  },\n  {\n    id: \"ruby\",\n    name: \"Ruby\",\n    extension: \"rb\",\n    geometryExtension: \"rb\",\n    group: \"Web\",\n  },\n  {\n    id: \"php\",\n    name: \"PHP\",\n    extension: \"php\",\n    geometryExtension: \"php\",\n    group: \"Web\",\n  },\n  {\n    id: \"scala\",\n    name: \"Scala\",\n    extension: \"scala\",\n    geometryExtension: \"scala\",\n    group: \"General\",\n  },\n  {\n    id: \"dart\",\n    name: \"Dart\",\n    extension: \"dart\",\n    geometryExtension: \"dart\",\n    group: \"Mobile\",\n  },\n  {\n    id: \"r\",\n    name: \"R\",\n    extension: \"R\",\n    geometryExtension: \"R\",\n    group: \"Data Science\",\n  },\n] as const;\n\n\nexport const LANGUAGE_SETUP = {\n  typescript: {\n    packageManager: \"npm\",\n    dependencies: [\n      \"three\",\n      \"@react-three/fiber\",\n      \"@react-three/drei\",\n      \"react\",\n      \"react-dom\",\n      \"@types/three\",\n    ],\n    devDependencies: [\"typescript\", \"@types/react\", \"@types/react-dom\"],\n    installCommand:\n      \"npm install three @react-three/fiber @react-three/drei react react-dom @types/three\",\n    devInstallCommand:\n      \"npm install -D typescript @types/react @types/react-dom\",\n    setupSteps: [\n      \"Create a new Next.js project with TypeScript\",\n      \"Install the required dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Import and use the component in your pages\",\n    ],\n    importExample: `import ${\"{componentName}\"} from '@/components/${\"{componentName}\"}';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nexport default function ModelPage() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas camera={{ '{' } position: [0, 0, 5], fov: 50 {'}'} >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${\"{componentName}\"} />\n        <OrbitControls />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`,\n    customizationExample: `// Access individual parts\nimport { MeshName } from '@/components/${\"{componentName}\"}/meshes/MeshName';\nimport { MeshNameGeometry } from '@/components/${\"{componentName}\"}/geometries/MeshNameGeometry';\nimport MaterialName from '@/components/${\"{componentName}\"}/materials/MaterialName';\nfunction CustomModel() {\n  return (\n    <group>\n      <mesh geometry={MeshNameGeometry} material={MaterialName()} />\n    </group>\n  );\n}`,\n  },\n  javascript: {\n    packageManager: \"npm\",\n    dependencies: [\n      \"three\",\n      \"@react-three/fiber\",\n      \"@react-three/drei\",\n      \"react\",\n      \"react-dom\",\n    ],\n    devDependencies: [],\n    installCommand:\n      \"npm install three @react-three/fiber @react-three/drei react react-dom\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new React project\",\n      \"Install the required dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Import and use the component in your pages\",\n    ],\n    importExample: `import ${\"{componentName}\"} from './components/${\"{componentName}\"}';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nexport default function ModelPage() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${\"{componentName}\"} />\n        <OrbitControls />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}`,\n    customizationExample: `// Access individual parts\nimport { MeshName } from './components/${\"{componentName}\"}/meshes/MeshName';\nimport { MeshNameGeometry } from './components/${\"{componentName}\"}/geometries/MeshNameGeometry';\nimport MaterialName from './components/${\"{componentName}\"}/materials/MaterialName';\nfunction CustomModel() {\n  return (\n    <group>\n      <mesh geometry={MeshNameGeometry} material={MaterialName()} />\n    </group>\n  );\n}`,\n  },\n  python: {\n    packageManager: \"pip\",\n    dependencies: [\"moderngl\", \"pyglet\", \"numpy\", \"pyrr\"],\n    devDependencies: [],\n    installCommand: \"pip install moderngl pyglet numpy pyrr\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Python project\",\n      \"Install the required dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `from ${\"{componentName}\"} import ${\"{componentName}\"}\nimport pyglet\nimport moderngl\nfrom pyrr import Matrix44\nclass ModelApp:\n    def __init__(self):\n        self.window = pyglet.window.Window(800, 600, caption='${\"{componentName}\"} Viewer')\n        self.ctx = moderngl.create_context()\n        self.scene = ${\"{componentName}\"}(self.ctx)\n    def run(self):\n        pyglet.app.run()\nif __name__ == '__main__':\n    app = ModelApp()\n    app.run()`,\n    customizationExample: `# Access individual parts\nfrom meshes.MeshName import MeshName\nfrom geometries.MeshNameGeometry import MeshNameGeometry\nfrom materials.MaterialName import MaterialName\nclass CustomModel:\n    def __init__(self, ctx):\n        self.geometry = MeshNameGeometry()\n        self.material = MaterialName(ctx)\n        self.mesh = MeshName(ctx, self.material)`,\n  },\n  java: {\n    packageManager: \"maven/gradle\",\n    dependencies: [\n      \"org.lwjgl:lwjgl:3.3.3\",\n      \"org.lwjgl:lwjgl-opengl:3.3.3\",\n      \"org.lwjgl:lwjgl-glfw:3.3.3\",\n    ],\n    devDependencies: [],\n    installCommand: `// Maven\n<dependency>\n    <groupId>org.lwjgl</groupId>\n    <artifactId>lwjgl</artifactId>\n    <version>3.3.3</version>\n</dependency>\n// Gradle\nimplementation 'org.lwjgl:lwjgl:3.3.3'\nimplementation 'org.lwjgl:lwjgl-opengl:3.3.3'`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Java project with Maven or Gradle\",\n      \"Add LWJGL dependencies to your build file\",\n      \"Extract the downloaded component files to your src folder\",\n      \"Run the example application\",\n    ],\n    importExample: `import ${\"{componentName}\"};\npublic class ModelApp {\n    public static void main(String[] args) {\n        // Initialize LWJGL and OpenGL context\n        // Create and render the model\n        ${\"{componentName}\"} model = new ${\"{componentName}\"}();\n        model.render();\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName;\nimport geometries.MeshNameGeometry;\nimport materials.MaterialName;\npublic class CustomModel {\n    private MeshNameGeometry geometry;\n    private MaterialName material;\n    public CustomModel() {\n        this.geometry = new MeshNameGeometry();\n        this.material = new MaterialName();\n    }\n}`,\n  },\n  csharp: {\n    packageManager: \"NuGet\",\n    dependencies: [\"OpenTK\", \"OpenTK.Graphics\", \"OpenTK.Mathematics\"],\n    devDependencies: [],\n    installCommand: \"dotnet add package OpenTK --version 4.8.2\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new .NET project\",\n      \"Install OpenTK via NuGet\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `using ${\"{componentName}\"};\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Windowing.Desktop;\nclass Program\n{\n    static void Main()\n    {\n        var model = new ${\"{componentName}\"}();\n        model.Render();\n    }\n}`,\n    customizationExample: `// Access individual parts\nusing Meshes;\nusing Geometries;\nusing Materials;\npublic class CustomModel\n{\n    private MeshNameGeometry geometry;\n    private MaterialName material;\n    public CustomModel()\n    {\n        geometry = new MeshNameGeometry();\n        material = new MaterialName();\n    }\n}`,\n  },\n  cpp: {\n    packageManager: \"vcpkg/conan\",\n    dependencies: [\"glew\", \"glfw3\", \"glm\"],\n    devDependencies: [],\n    installCommand: `// vcpkg\nvcpkg install glew glfw3 glm\n// Or with CMake\nfind_package(glfw3 REQUIRED)\nfind_package(GLEW REQUIRED)\nfind_package(glm REQUIRED)`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new C++ project with CMake\",\n      \"Install OpenGL dependencies (GLEW, GLFW, GLM)\",\n      \"Extract the downloaded component files to your project\",\n      \"Compile and run the example application\",\n    ],\n    importExample: `#include \"${\"{componentName}\"}.h\"\n#include <GL/glew.h>\n#include <GLFW/glfw3.h>\nint main() {\n    // Initialize GLFW and OpenGL\n    glfwInit();\n    GLFWwindow* window = glfwCreateWindow(800, 600, \"${\"{componentName}\"} Viewer\", NULL, NULL);\n    glfwMakeContextCurrent(window);\n    glewInit();\n    ${\"{componentName}\"} model;\n    while (!glfwWindowShouldClose(window)) {\n        model.render();\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n    return 0;\n}`,\n    customizationExample: `// Access individual parts\n#include \"meshes/MeshName.h\"\n#include \"geometries/MeshNameGeometry.h\"\n#include \"materials/MaterialName.h\"\nclass CustomModel {\nprivate:\n    MeshNameGeometry geometry;\n    MaterialName material;\npublic:\n    CustomModel() : geometry(), material() {}\n    void render() { /* custom rendering */ }\n};`,\n  },\n  go: {\n    packageManager: \"go mod\",\n    dependencies: [\n      \"github.com/go-gl/gl/v4.1-core/gl\",\n      \"github.com/go-gl/glfw/v3.3/glfw\",\n      \"github.com/go-gl/mathgl/mgl32\",\n    ],\n    devDependencies: [],\n    installCommand: `go mod init your-project\ngo get github.com/go-gl/gl/v4.1-core/gl\ngo get github.com/go-gl/glfw/v3.3/glfw\ngo get github.com/go-gl/mathgl/mgl32`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Go module\",\n      \"Install OpenGL dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `package main\nimport (\n    \"./${\"{componentName}\"}\"\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"github.com/go-gl/glfw/v3.3/glfw\"\n)\nfunc main() {\n    // Initialize GLFW and OpenGL\n    glfw.Init()\n    defer glfw.Terminate()\n    window, _ := glfw.CreateWindow(800, 600, \"${\"{componentName}\"} Viewer\", nil, nil)\n    window.MakeContextCurrent()\n    gl.Init()\n    model := ${\"{componentName}\"}.New${\"{componentName}\"}()\n    for !window.ShouldClose() {\n        model.Render()\n        window.SwapBuffers()\n        glfw.PollEvents()\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport (\n    \"./meshes\"\n    \"./geometries\"\n    \"./materials\"\n)\ntype CustomModel struct {\n    geometry *geometries.MeshNameGeometry\n    material *materials.MaterialName\n}\nfunc NewCustomModel() *CustomModel {\n    return &CustomModel{\n        geometry: geometries.NewMeshNameGeometry(),\n        material: materials.NewMaterialName(),\n    }\n}`,\n  },\n  rust: {\n    packageManager: \"cargo\",\n    dependencies: [\"wgpu\", \"winit\", \"bytemuck\", \"glam\"],\n    devDependencies: [],\n    installCommand: `# Add to Cargo.toml\n[dependencies]\nwgpu = \"0.18\"\nwinit = \"0.28\"\nbytemuck = \"1.14\"\nglam = \"0.24\"`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Rust project with Cargo\",\n      \"Add wgpu dependencies to Cargo.toml\",\n      \"Extract the downloaded component files to your src folder\",\n      \"Run the example application\",\n    ],\n    importExample: `use ${\"{componentName}\"}::${\"{componentName}\"};\nuse wgpu::Device;\nuse winit::event_loop::EventLoop;\nfn main() {\n    let event_loop = EventLoop::new();\n    // Initialize wgpu and create device\n    let device = /* initialize device */;\n    let model = ${\"{componentName}\"}::new(&device);\n    event_loop.run(move |event, _, control_flow| {\n        // Render model\n        model.render(&mut render_pass);\n    });\n}`,\n    customizationExample: `// Access individual parts\nuse meshes::MeshName;\nuse geometries::MeshNameGeometry;\nuse materials::MaterialName;\nstruct CustomModel {\n    geometry: MeshNameGeometry,\n    material: MaterialName,\n}\nimpl CustomModel {\n    fn new(device: &Device) -> Self {\n        Self {\n            geometry: MeshNameGeometry::new(device),\n            material: MaterialName::new(device),\n        }\n    }\n}`,\n  },\n  swift: {\n    packageManager: \"Swift Package Manager\",\n    dependencies: [\"Metal\", \"MetalKit\", \"simd\"],\n    devDependencies: [],\n    installCommand: `// Add to Package.swift\ndependencies: [\n    .package(url: \"https://github.com/apple/swift-numerics\", from: \"1.0.0\")\n]`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new iOS/macOS project\",\n      \"Import Metal and MetalKit frameworks\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `import ${\"{componentName}\"}\nimport Metal\nimport MetalKit\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        guard let device = MTLCreateSystemDefaultDevice() else { return }\n        let model = ${\"{componentName}\"}(device: device)\n        // Setup Metal rendering\n    }\n}`,\n    customizationExample: `// Access individual parts\nimport Meshes\nimport Geometries\nimport Materials\nclass CustomModel {\n    private let geometry: MeshNameGeometry\n    private let material: MaterialName\n    init(device: MTLDevice) {\n        geometry = MeshNameGeometry(device: device)\n        material = MaterialName(device: device)\n    }\n}`,\n  },\n  kotlin: {\n    packageManager: \"Gradle\",\n    dependencies: [\"org.lwjgl:lwjgl:3.3.3\", \"org.lwjgl:lwjgl-opengl:3.3.3\"],\n    devDependencies: [],\n    installCommand: `// build.gradle.kts\ndependencies {\n    implementation(\"org.lwjgl:lwjgl:3.3.3\")\n    implementation(\"org.lwjgl:lwjgl-opengl:3.3.3\")\n}`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Kotlin project with Gradle\",\n      \"Add LWJGL dependencies\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `import ${\"{componentName}\"}\nimport org.lwjgl.opengl.GL\nfun main() {\n    // Initialize LWJGL and OpenGL\n    val model = ${\"{componentName}\"}()\n    // Render loop\n    model.render()\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName\nimport geometries.MeshNameGeometry\nimport materials.MaterialName\nclass CustomModel {\n    private val geometry = MeshNameGeometry()\n    private val material = MaterialName()\n    fun render() {\n        // Custom rendering logic\n    }\n}`,\n  },\n  ruby: {\n    packageManager: \"gem\",\n    dependencies: [\"opengl\", \"glfw\", \"matrix\"],\n    devDependencies: [],\n    installCommand: \"gem install opengl glfw matrix\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Install Ruby and required gems\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `require './${\"{componentName}\"}'\nrequire 'opengl'\nrequire 'glfw'\nclass ModelApp\n  def initialize\n    @model = ${\"{componentName}\"}::${\"{componentName}\"}.new\n  end\n  def run\n    # Initialize OpenGL and render\n    @model.render\n  end\nend\napp = ModelApp.new\napp.run`,\n    customizationExample: `# Access individual parts\nrequire './meshes/mesh_name'\nrequire './geometries/mesh_name_geometry'\nrequire './materials/material_name'\nclass CustomModel\n  def initialize\n    @geometry = MeshNameGeometry.new\n    @material = MaterialName.new\n  end\nend`,\n  },\n  php: {\n    packageManager: \"composer\",\n    dependencies: [\"php-opengl/opengl\", \"php-gl/math\"],\n    devDependencies: [],\n    installCommand: \"composer require php-opengl/opengl php-gl/math\",\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Install PHP and Composer\",\n      \"Install OpenGL PHP extensions\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `<?php\nrequire_once './${\"{componentName}\"}.php';\nuse OpenGL\\\\GL;\nclass ModelApp {\n    private $model;\n    public function __construct() {\n        $this->model = new ${\"{componentName}\"}();\n    }\n    public function run() {\n        $this->model->render();\n    }\n}\n$app = new ModelApp();\n$app->run();`,\n    customizationExample: `<?php\n// Access individual parts\nrequire_once './meshes/MeshName.php';\nrequire_once './geometries/MeshNameGeometry.php';\nrequire_once './materials/MaterialName.php';\nclass CustomModel {\n    private $geometry;\n    private $material;\n    public function __construct() {\n        $this->geometry = new MeshNameGeometry();\n        $this->material = new MaterialName();\n    }\n}`,\n  },\n  scala: {\n    packageManager: \"sbt\",\n    dependencies: [\"org.lwjgl:lwjgl:3.3.3\", \"org.lwjgl:lwjgl-opengl:3.3.3\"],\n    devDependencies: [],\n    installCommand: `// build.sbt\nlibraryDependencies ++= Seq(\n  \"org.lwjgl\" % \"lwjgl\" % \"3.3.3\",\n  \"org.lwjgl\" % \"lwjgl-opengl\" % \"3.3.3\"\n)`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Scala project with sbt\",\n      \"Add LWJGL dependencies to build.sbt\",\n      \"Extract the downloaded component files to your project\",\n      \"Run the example application\",\n    ],\n    importExample: `import ${\"{componentName}\"}._\nimport org.lwjgl.opengl.GL\nobject ModelApp extends App {\n  // Initialize LWJGL and OpenGL\n  val model = new ${\"{componentName}\"}()\n  // Render loop\n  model.render()\n}`,\n    customizationExample: `// Access individual parts\nimport meshes.MeshName\nimport geometries.MeshNameGeometry\nimport materials.MaterialName\nclass CustomModel {\n  private val geometry = new MeshNameGeometry()\n  private val material = new MaterialName()\n  def render(): Unit = {\n    // Custom rendering logic\n  }\n}`,\n  },\n  dart: {\n    packageManager: \"pub\",\n    dependencies: [\"flutter\", \"vector_math\", \"flutter_gl\"],\n    devDependencies: [],\n    installCommand: `# pubspec.yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  vector_math: ^2.1.4\n  flutter_gl: ^0.0.1`,\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Create a new Flutter project\",\n      \"Add dependencies to pubspec.yaml\",\n      \"Extract the downloaded component files to your lib folder\",\n      \"Run the example application\",\n    ],\n    importExample: `import 'package:flutter/material.dart';\nimport './${\"{componentName}\"}.dart';\nclass ModelPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ${\"{componentName}\"}(),\n    );\n  }\n}`,\n    customizationExample: `// Access individual parts\nimport './meshes/mesh_name.dart';\nimport './geometries/mesh_name_geometry.dart';\nimport './materials/material_name.dart';\nclass CustomModel {\n  final MeshNameGeometry geometry;\n  final MaterialName material;\n  CustomModel() : \n    geometry = MeshNameGeometry(),\n    material = MaterialName();\n}`,\n  },\n  r: {\n    packageManager: \"CRAN\",\n    dependencies: [\"rgl\", \"geometry\", \"matrix\"],\n    devDependencies: [],\n    installCommand: 'install.packages(c(\"rgl\", \"geometry\", \"matrix\"))',\n    devInstallCommand: \"\",\n    setupSteps: [\n      \"Install R and required packages\",\n      \"Extract the downloaded component files to your project\",\n      \"Source the example script\",\n    ],\n    importExample: `library(rgl)\nsource(\"./${\"{componentName}\"}.R\")\n# Create and display the model\nmodel <- ${\"{componentName}\"}$new()\nmodel$render()`,\n    customizationExample: `# Access individual parts\nsource(\"./meshes/MeshName.R\")\nsource(\"./geometries/MeshNameGeometry.R\")\nsource(\"./materials/MaterialName.R\")\nCustomModel <- setRefClass(\"CustomModel\",\n  fields = list(\n    geometry = \"MeshNameGeometry\",\n    material = \"MaterialName\"\n  ),\n  methods = list(\n    initialize = function() {\n      geometry <<- MeshNameGeometry$new()\n      material <<- MaterialName$new()\n    }\n  )\n)`,\n  },\n};\nexport type LanguageId = (typeof LANGUAGES)[number][\"id\"];\n\n"],"names":[],"mappings":";;;;AAAO,MAAM,YAAY;IACvB;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,WAAW;QACX,mBAAmB;QACnB,OAAO;IACT;CACD;AAGM,MAAM,iBAAiB;IAC5B,YAAY;QACV,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;YACA;YACA;YACA;SACD;QACD,iBAAiB;YAAC;YAAc;YAAgB;SAAmB;QACnE,gBACE;QACF,mBACE;QACF,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAgBhB,sBAAuB;IAWzB;IACA,YAAY;QACV,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBACE;QACF,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAgBhB,sBAAuB;IAWzB;IACA,QAAQ;QACN,gBAAgB;QAChB,cAAc;YAAC;YAAY;YAAU;YAAS;SAAO;QACrD,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAchB,sBAAuB;IASzB;IACA,MAAM;QACJ,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QASjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAShB,sBAAuB;IAYzB;IACA,QAAQ;QACN,gBAAgB;QAChB,cAAc;YAAC;YAAU;YAAmB;SAAqB;QACjE,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAWhB,sBAAuB;IAczB;IACA,KAAK;QACH,gBAAgB;QAChB,cAAc;YAAC;YAAQ;YAAS;SAAM;QACtC,iBAAiB,EAAE;QACnB,gBAAiB;QAMjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAiBhB,sBAAuB;IAYzB;IACA,IAAI;QACF,gBAAgB;QAChB,cAAc;YACZ;YACA;YACA;SACD;QACD,iBAAiB,EAAE;QACnB,gBAAiB;QAIjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAoBhB,sBAAuB;IAgBzB;IACA,MAAM;QACJ,gBAAgB;QAChB,cAAc;YAAC;YAAQ;YAAS;YAAY;SAAO;QACnD,iBAAiB,EAAE;QACnB,gBAAiB;QAMjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAahB,sBAAuB;IAgBzB;IACA,OAAO;QACL,gBAAgB;QAChB,cAAc;YAAC;YAAS;YAAY;SAAO;QAC3C,iBAAiB,EAAE;QACnB,gBAAiB;QAIjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAWhB,sBAAuB;IAYzB;IACA,QAAQ;QACN,gBAAgB;QAChB,cAAc;YAAC;YAAyB;SAA+B;QACvE,iBAAiB,EAAE;QACnB,gBAAiB;QAKjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAQhB,sBAAuB;IAWzB;IACA,MAAM;QACJ,gBAAgB;QAChB,cAAc;YAAC;YAAU;YAAQ;SAAS;QAC1C,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;SACD;QACD,eAAgB;QAchB,sBAAuB;IAUzB;IACA,KAAK;QACH,gBAAgB;QAChB,cAAc;YAAC;YAAqB;SAAc;QAClD,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAchB,sBAAuB;IAazB;IACA,OAAO;QACL,gBAAgB;QAChB,cAAc;YAAC;YAAyB;SAA+B;QACvE,iBAAiB,EAAE;QACnB,gBAAiB;QAKjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAQhB,sBAAuB;IAWzB;IACA,MAAM;QACJ,gBAAgB;QAChB,cAAc;YAAC;YAAW;YAAe;SAAa;QACtD,iBAAiB,EAAE;QACnB,gBAAiB;QAMjB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;YACA;SACD;QACD,eAAgB;QAUhB,sBAAuB;IAWzB;IACA,GAAG;QACD,gBAAgB;QAChB,cAAc;YAAC;YAAO;YAAY;SAAS;QAC3C,iBAAiB,EAAE;QACnB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;YACV;YACA;YACA;SACD;QACD,eAAgB;QAKhB,sBAAuB;IAgBzB;AACF","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/components/code-editor.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport prettier from 'prettier/standalone';\nimport babelPlugin from 'prettier/plugins/babel';\nimport typescriptPlugin from 'prettier/plugins/typescript';\n\nimport Editor from '@monaco-editor/react';\nimport type { LanguageId } from '@/types/constant';\n\nexport default function CodeEditor({\n  code,\n  languageId,\n}: {\n  code: string;\n  languageId: LanguageId;\n}) {\n  const [formatted, setFormatted] = useState(code);\n\n  const parser = useMemo(\n    () => (languageId === 'typescript' ? 'typescript' : 'babel'),\n    [languageId]\n  );\n\nuseEffect(() => {\n  const formatCode = async () => {\n    try {\n      const result = await prettier.format(code, {\n        parser,\n        plugins: [babelPlugin, typescriptPlugin],\n        semi: true,\n        singleQuote: true,\n        trailingComma: 'all',\n        printWidth: 100,\n      });\n      setFormatted(result.trim());\n    } catch {\n      setFormatted(code);\n    }\n  };\n\n  formatCode();\n}, [code, parser]);\n\n  const monacoLanguage = languageId === 'typescript' ? 'typescript' : 'javascript';\n\n  const defineTheme = (monaco: any) => {\n    monaco.editor.defineTheme('v0-dark', {\n      base: 'vs-dark',\n      inherit: true,\n      rules: [\n        { token: '', background: '0B0B0F' },\n        { token: 'keyword', foreground: 'C084FC' },\n        { token: 'number', foreground: '93C5FD' },\n        { token: 'string', foreground: '86EFAC' },\n        { token: 'type', foreground: 'FCA5A5' },\n      ],\n      colors: {\n        'editor.background': '#0B0B0F',\n        'editor.lineHighlightBackground': '#12121A',\n        'editorCursor.foreground': '#F472B6',\n        'editor.selectionBackground': '#6D28D933',\n        'editorLineNumber.foreground': '#49506B',\n        'editorGutter.background': '#0B0B0F',\n      },\n    });\n  };\n\n  return (\n    <Editor\n      value={formatted}\n      language={monacoLanguage}\n      theme=\"v0-dark\"\n      beforeMount={defineTheme}\n      options={{\n        readOnly: true,\n        minimap: { enabled: false },\n        scrollBeyondLastLine: false,\n        fontSize: 13,\n        fontFamily:\n          'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace',\n        lineHeight: 20,\n        wordWrap: 'on',\n        smoothScrolling: true,\n        automaticLayout: true,\n      }}\n      height=\"60vh\"\n    />\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AACA;AAEA;AAAA;;;AARA;;;;;;AAWe,SAAS,WAAW,KAMlC;QANkC,EACjC,IAAI,EACJ,UAAU,EAIX,GANkC;;IAOjC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;sCACnB,IAAO,eAAe,eAAe,eAAe;qCACpD;QAAC;KAAW;IAGhB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,MAAM;mDAAa;oBACjB,IAAI;wBACF,MAAM,SAAS,MAAM,0IAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM;4BACzC;4BACA,SAAS;gCAAC,gJAAA,CAAA,UAAW;gCAAE,qJAAA,CAAA,UAAgB;6BAAC;4BACxC,MAAM;4BACN,aAAa;4BACb,eAAe;4BACf,YAAY;wBACd;wBACA,aAAa,OAAO,IAAI;oBAC1B,EAAE,UAAM;wBACN,aAAa;oBACf;gBACF;;YAEA;QACF;+BAAG;QAAC;QAAM;KAAO;IAEf,MAAM,iBAAiB,eAAe,eAAe,eAAe;IAEpE,MAAM,cAAc,CAAC;QACnB,OAAO,MAAM,CAAC,WAAW,CAAC,WAAW;YACnC,MAAM;YACN,SAAS;YACT,OAAO;gBACL;oBAAE,OAAO;oBAAI,YAAY;gBAAS;gBAClC;oBAAE,OAAO;oBAAW,YAAY;gBAAS;gBACzC;oBAAE,OAAO;oBAAU,YAAY;gBAAS;gBACxC;oBAAE,OAAO;oBAAU,YAAY;gBAAS;gBACxC;oBAAE,OAAO;oBAAQ,YAAY;gBAAS;aACvC;YACD,QAAQ;gBACN,qBAAqB;gBACrB,kCAAkC;gBAClC,2BAA2B;gBAC3B,8BAA8B;gBAC9B,+BAA+B;gBAC/B,2BAA2B;YAC7B;QACF;IACF;IAEA,qBACE,6LAAC,gLAAA,CAAA,UAAM;QACL,OAAO;QACP,UAAU;QACV,OAAM;QACN,aAAa;QACb,SAAS;YACP,UAAU;YACV,SAAS;gBAAE,SAAS;YAAM;YAC1B,sBAAsB;YACtB,UAAU;YACV,YACE;YACF,YAAY;YACZ,UAAU;YACV,iBAAiB;YACjB,iBAAiB;QACnB;QACA,QAAO;;;;;;AAGb;GA/EwB;KAAA","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/components/language-selector.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { LANGUAGES, type LanguageId } from '@/types/constant';\n\nexport default function LanguageSelector({\n  selectedLanguage,\n  onChange,\n}: {\n  selectedLanguage: LanguageId;\n  onChange: (id: LanguageId) => void;\n}) {\n  return (\n    <div className=\"flex items-center gap-2\">\n      <label className=\"text-xs text-slate-400\">Language</label>\n      <select\n        className=\"rounded-md border border-white/10 bg-[#0E0E13] px-2 py-1 text-sm text-slate-200 outline-none focus:border-fuchsia-500\"\n        value={selectedLanguage}\n        onChange={(e) => onChange(e.target.value as LanguageId)}\n      >\n        {LANGUAGES.map((l) => (\n          <option value={l.id} key={l.id}>\n            {l.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAKe,SAAS,iBAAiB,KAMxC;QANwC,EACvC,gBAAgB,EAChB,QAAQ,EAIT,GANwC;IAOvC,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAM,WAAU;0BAAyB;;;;;;0BAC1C,6LAAC;gBACC,WAAU;gBACV,OAAO;gBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;0BAEvC,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,CAAC,kBACd,6LAAC;wBAAO,OAAO,EAAE,EAAE;kCAChB,EAAE,IAAI;uBADiB,EAAE,EAAE;;;;;;;;;;;;;;;;AAOxC;KAvBwB","debugId":null}},
    {"offset": {"line": 648, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/components/file-tree.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { ChevronDown, ChevronRight, FileIcon, FolderIcon } from 'lucide-react';\nimport type { ProjectStructure } from '@/types/glb-convertor';\nimport { LANGUAGES, type LanguageId } from '@/types/constant';\n\nfunction Row({\n  icon,\n  label,\n  selected,\n  onClick,\n}: {\n  icon: React.ReactNode;\n  label: string;\n  selected?: boolean;\n  onClick?: () => void;\n}) {\n  return (\n    <div\n      onClick={onClick}\n      className={`flex cursor-pointer items-center gap-2 rounded px-2 py-1.5 text-sm ${\n        selected ? 'bg-fuchsia-500/15 text-fuchsia-200' : 'text-slate-300 hover:bg-white/5 hover:text-white'\n      }`}\n    >\n      {icon}\n      <span className=\"truncate\">{label}</span>\n    </div>\n  );\n}\n\nexport default function FileTree({\n  projectStructure,\n  selectedLanguage,\n  onSelectFile,\n  expandedFolders,\n  toggleFolder,\n  activeFile,\n  componentName,\n}: {\n  projectStructure: ProjectStructure;\n  selectedLanguage: LanguageId;\n  onSelectFile: (path: string, content: string) => void;\n  expandedFolders: Record<string, boolean>;\n  toggleFolder: (folder: string) => void;\n  activeFile: string | null;\n  componentName: string;\n}) {\n  const lang = LANGUAGES.find((l) => l.id === selectedLanguage)!;\n\n  return (\n    <div className=\"space-y-1\">\n      {/* components */}\n      <div>\n        <div\n          className=\"flex items-center gap-1 px-2 py-1.5 text-xs uppercase tracking-wider text-slate-400 cursor-pointer\"\n          onClick={() => toggleFolder('components')}\n        >\n          {expandedFolders.components ? <ChevronDown className=\"h-3.5 w-3.5\" /> : <ChevronRight className=\"h-3.5 w-3.5\" />}\n          <span>components</span>\n        </div>\n\n        {expandedFolders.components && (\n          <div className=\"ml-4\">\n            {/* Component folder */}\n            <div className=\"mb-1\">\n              <div className=\"flex items-center gap-1 px-2 py-1.5 text-xs uppercase tracking-wider text-slate-400 cursor-pointer\"\n                   onClick={() => toggleFolder('componentName')}>\n                {expandedFolders.componentName ? <ChevronDown className=\"h-3.5 w-3.5\" /> : <ChevronRight className=\"h-3.5 w-3.5\" />}\n                <FolderIcon className=\"h-4 w-4 text-amber-400\" />\n                <span>{componentName}</span>\n              </div>\n\n              {expandedFolders.componentName && (\n                <div className=\"ml-4 space-y-1\">\n                  <Row\n                    icon={<FileIcon className=\"h-4 w-4 text-slate-400\" />}\n                    label={`index.${lang.extension}`}\n                    selected={activeFile === 'index'}\n                    onClick={() => onSelectFile('index', projectStructure.indexContent)}\n                  />\n\n                  {/* geometries */}\n                  <div>\n                    <div\n                      className=\"flex items-center gap-1 px-2 py-1.5 text-xs uppercase tracking-wider text-slate-400 cursor-pointer\"\n                      onClick={() => toggleFolder('geometries')}\n                    >\n                      {expandedFolders.geometries ? <ChevronDown className=\"h-3.5 w-3.5\" /> : <ChevronRight className=\"h-3.5 w-3.5\" />}\n                      <span>geometries</span>\n                    </div>\n                    {expandedFolders.geometries && (\n                      <div className=\"ml-4\">\n                        {projectStructure.geometries?.length ? (\n                          projectStructure.geometries.map((g) => (\n                            <Row\n                              key={g.name}\n                              icon={<FileIcon className=\"h-4 w-4 text-slate-400\" />}\n                              label={`${g.name}Geometry.${lang.geometryExtension}`}\n                              selected={activeFile === `geometry:${g.name}`}\n                              onClick={() => onSelectFile(`geometry:${g.name}`, g.content)}\n                            />\n                          ))\n                        ) : (\n                          <div className=\"px-2 py-1 text-xs text-slate-500\">Empty</div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* meshes */}\n                  <div>\n                    <div\n                      className=\"flex items-center gap-1 px-2 py-1.5 text-xs uppercase tracking-wider text-slate-400 cursor-pointer\"\n                      onClick={() => toggleFolder('meshes')}\n                    >\n                      {expandedFolders.meshes ? <ChevronDown className=\"h-3.5 w-3.5\" /> : <ChevronRight className=\"h-3.5 w-3.5\" />}\n                      <span>meshes</span>\n                    </div>\n                    {expandedFolders.meshes && (\n                      <div className=\"ml-4\">\n                        {projectStructure.meshes.map((m) => (\n                          <Row\n                            key={m.name}\n                            icon={<FileIcon className=\"h-4 w-4 text-slate-400\" />}\n                            label={`${m.name}.${lang.extension}`}\n                            selected={activeFile === `mesh:${m.name}`}\n                            onClick={() => onSelectFile(`mesh:${m.name}`, m.content)}\n                          />\n                        ))}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* materials */}\n                  <div>\n                    <div\n                      className=\"flex items-center gap-1 px-2 py-1.5 text-xs uppercase tracking-wider text-slate-400 cursor-pointer\"\n                      onClick={() => toggleFolder('materials')}\n                    >\n                      {expandedFolders.materials ? <ChevronDown className=\"h-3.5 w-3.5\" /> : <ChevronRight className=\"h-3.5 w-3.5\" />}\n                      <span>materials</span>\n                    </div>\n                    {expandedFolders.materials && (\n                      <div className=\"ml-4\">\n                        {projectStructure.materials.map((m) => (\n                          <Row\n                            key={m.name}\n                            icon={<FileIcon className=\"h-4 w-4 text-slate-400\" />}\n                            label={`${m.name}.${lang.extension}`}\n                            selected={activeFile === `material:${m.name}`}\n                            onClick={() => onSelectFile(`material:${m.name}`, m.content)}\n                          />\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* app */}\n      <div>\n        <div\n          className=\"flex items-center gap-1 px-2 py-1.5 text-xs uppercase tracking-wider text-slate-400 cursor-pointer\"\n          onClick={() => toggleFolder('app')}\n        >\n          {expandedFolders.app ? <ChevronDown className=\"h-3.5 w-3.5\" /> : <ChevronRight className=\"h-3.5 w-3.5\" />}\n          <span>app</span>\n        </div>\n        {expandedFolders.app && (\n          <div className=\"ml-4\">\n            <div\n              className=\"flex items-center gap-1 px-2 py-1.5 text-xs uppercase tracking-wider text-slate-400 cursor-pointer\"\n              onClick={() => toggleFolder('modelPage')}\n            >\n              {expandedFolders.modelPage ? <ChevronDown className=\"h-3.5 w-3.5\" /> : <ChevronRight className=\"h-3.5 w-3.5\" />}\n              <FolderIcon className=\"h-4 w-4 text-amber-400\" />\n              <span>{`${componentName.toLowerCase()}-page`}</span>\n            </div>\n            {expandedFolders.modelPage && (\n              <div className=\"ml-4\">\n                <Row\n                  icon={<FileIcon className=\"h-4 w-4 text-slate-400\" />}\n                  label={`page.${lang.extension}`}\n                  selected={activeFile === 'examplePage'}\n                  onClick={() => onSelectFile('examplePage', projectStructure.examplePageContent)}\n                />\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1124, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/components/model-preview.tsx"],"sourcesContent":["'use client';\n\nimport React, { useMemo, useRef } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { useLoader } from '@react-three/fiber';\nimport * as THREE from 'three';\n\ntype Mode = 'original' | 'wireframe' | 'solid' | 'normals' | 'depth' | 'points';\n\nexport default function ModelPreview({\n  url,\n  displayMode,\n  autoRotate,\n}: {\n  url: string;\n  displayMode: Mode;\n  autoRotate: boolean;\n}) {\n  const gltf = useLoader(\n    GLTFLoader,\n    url,\n    (loader) => {\n      const dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\n      (loader as GLTFLoader).setDRACOLoader(dracoLoader);\n    }\n  ) as any;\n\n  const group = useRef<THREE.Group>(null!);\n\n  // Collect mesh info to rebuild materials per mode without mutating original too much\n  const meshes = useMemo(() => {\n    const list: Array<{\n      geometry: THREE.BufferGeometry;\n      position: THREE.Vector3;\n      rotation: THREE.Euler;\n      scale: THREE.Vector3;\n    }> = [];\n    gltf.scene.traverse((child: any) => {\n      if ((child as THREE.Mesh).isMesh && child.geometry) {\n        const pos = new THREE.Vector3();\n        const rot = new THREE.Euler();\n        const scl = new THREE.Vector3();\n        child.updateMatrixWorld();\n        child.matrixWorld.decompose(pos, new THREE.Quaternion().setFromEuler(child.rotation), scl);\n        // Use local transforms\n        list.push({\n          geometry: child.geometry,\n          position: child.position.clone(),\n          rotation: child.rotation.clone(),\n          scale: child.scale.clone(),\n        });\n      }\n    });\n    return list;\n  }, [gltf]);\n\n  useFrame((_state, delta) => {\n    if (autoRotate && group.current) {\n      group.current.rotation.y += delta * 0.3;\n    }\n  });\n\n  return (\n    <group ref={group} dispose={null}>\n      {displayMode === 'original' ? (\n        <primitive object={gltf.scene} />\n      ) : displayMode === 'wireframe' ? (\n        meshes.map((m, i) => (\n          <mesh key={i} geometry={m.geometry} position={m.position} rotation={m.rotation} scale={m.scale}>\n            <meshStandardMaterial color=\"#c4b5fd\" wireframe />\n          </mesh>\n        ))\n      ) : displayMode === 'solid' ? (\n        meshes.map((m, i) => (\n          <mesh key={i} geometry={m.geometry} position={m.position} rotation={m.rotation} scale={m.scale}>\n            <meshStandardMaterial color=\"#8b5cf6\" metalness={0.1} roughness={0.9} />\n          </mesh>\n        ))\n      ) : displayMode === 'normals' ? (\n        meshes.map((m, i) => (\n          <mesh key={i} geometry={m.geometry} position={m.position} rotation={m.rotation} scale={m.scale}>\n            <meshNormalMaterial />\n          </mesh>\n        ))\n      ) : displayMode === 'depth' ? (\n        meshes.map((m, i) => (\n          <mesh key={i} geometry={m.geometry} position={m.position} rotation={m.rotation} scale={m.scale}>\n            <meshDepthMaterial />\n          </mesh>\n        ))\n      ) : (\n        // points\n        meshes.map((m, i) => (\n          <points key={i} geometry={m.geometry} position={m.position} rotation={m.rotation} scale={m.scale}>\n            <pointsMaterial size={0.01} color=\"#a78bfa\" />\n          </points>\n        ))\n      )}\n    </group>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1303, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/cpp.ts"],"sourcesContent":["export function CPPExample(componentName){\n    return `#include <GL/glew.h>\n    #include <GLFW/glfw3.h>\n    #include \"components/${componentName}.h\"\n\n    /**\n     * Example application for ${componentName} using OpenGL\n     */\n    int main() {\n        // Initialize GLFW\n        if (!glfwInit()) {\n            return -1;\n        }\n        \n        // Create window\n        GLFWwindow* window = glfwCreateWindow(800, 600, \"${componentName} Viewer\", NULL, NULL);\n        if (!window) {\n            glfwTerminate();\n            return -1;\n        }\n        \n        glfwMakeContextCurrent(window);\n        glewInit();\n        \n        // Enable depth testing\n        glEnable(GL_DEPTH_TEST);\n        \n        // Create model\n        ${componentName} model;\n        \n        // Main loop\n        while (!glfwWindowShouldClose(window)) {\n            // Clear the screen\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n            \n            // Set up perspective projection\n            // (In a real application, you would set up matrices here)\n            \n            // Render model\n            model.render();\n            \n            // Swap buffers and poll events\n            glfwSwapBuffers(window);\n            glfwPollEvents();\n        }\n        \n        // Cleanup\n        glfwTerminate();\n        return 0;\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,WAAW,aAAa;IACpC,OAAO,AAAC,+EAKqB,OAHN,eAAc,mDAYkB,OAT1B,eAAc,sOAsBrC,OAbiD,eAAc,qTAajD,OAAd,eAAc;AAuBxB;KAnDgB","debugId":null}},
    {"offset": {"line": 1321, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/csharp.ts"],"sourcesContent":["export function CSharpExample(componentName){\n    return `using System;\nusing OpenTK.Graphics.OpenGL4;\nusing OpenTK.Windowing.Common;\nusing OpenTK.Windowing.Desktop;\n\n/// <summary>\n/// Example application for ${componentName} using OpenTK\n/// </summary>\npublic class ${componentName}App : GameWindow\n{\n    private ${componentName} _model;\n    \n    public ${componentName}App() : base(GameWindowSettings.Default, \n        new NativeWindowSettings()\n        {\n            Size = new OpenTK.Mathematics.Vector2i(800, 600),\n            Title = \"${componentName} Viewer\"\n        })\n    {\n    }\n    \n    protected override void OnLoad()\n    {\n        base.OnLoad();\n        \n        GL.ClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        GL.Enable(EnableCap.DepthTest);\n        \n        _model = new ${componentName}();\n    }\n    \n    protected override void OnRenderFrame(FrameEventArgs e)\n    {\n        base.OnRenderFrame(e);\n        \n        GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);\n        \n        _model.Render();\n        \n        SwapBuffers();\n    }\n    \n    protected override void OnUnload()\n    {\n        _model?.Dispose();\n        base.OnUnload();\n    }\n    \n    public static void Main()\n    {\n        using var app = new ${componentName}App();\n        app.Run();\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,cAAc,aAAa;IACvC,OAAO,AAAC,gKAQG,OAFe,eAAc,gDAI9B,OAFC,eAAc,qCAIhB,OAFC,eAAc,+BAML,OAJV,eAAc,kLAgBJ,OAZA,eAAc,qPAkCP,OAtBP,eAAc,+dAsBO,OAAd,eAAc;AAK5C;KAxDgB","debugId":null}},
    {"offset": {"line": 1339, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/dart.ts"],"sourcesContent":["export function DartExample(\n  componentName\n) {\n return `import 'package:flutter/material.dart';\n    import 'package:opengl/opengl.dart';\n    import 'package:flutter_gl/flutter_gl.dart';\n    /**\n     * Example application for ${componentName} using Flutter OpenGL\n     */\n    class ${componentName}Page extends StatefulWidget {\n      @override\n      _${componentName}PageState createState() => _${componentName}PageState();\n    }\n\n    class _${componentName}PageState extends State<${componentName}Page> {\n      late OpenGLRenderer _renderer;\n      late FlutterGlPlugin _glPlugin;\n      late ${componentName} _model;\n      double _rotation = 0.0;\n\n      @override\n      void initState() {\n        super.initState();\n        _glPlugin = FlutterGlPlugin();\n        _glPlugin.initialize().then((_) {\n          _renderer = OpenGLRenderer(_glPlugin);\n          _model = ${componentName}();\n          _startAnimation();\n        });\n      }\n\n      void _startAnimation() {\n        Future.delayed(Duration(milliseconds: 16), () {\n          if (mounted) {\n            _rotation += 0.01;\n            setState(() {});\n            _startAnimation();\n          }\n        });\n      }\n\n      @override\n      Widget build(BuildContext context) {\n        return Scaffold(\n          appBar: AppBar(title: Text('${componentName} Viewer')),\n          body: Builder(\n            builder: (context) => GestureDetector(\n              onPanUpdate: (details) => setState(() => _rotation += details.delta.dx * 0.01),\n              child: CustomPaint(\n                painter: _${componentName}Painter(_renderer, _model, _rotation),\n                size: Size.infinite,\n              ),\n            ),\n          ),\n        );\n      }\n\n      @override\n      void dispose() {\n        _glPlugin.dispose();\n        super.dispose();\n      }\n    }\n\n    class _${componentName}Painter extends CustomPainter {\n      final OpenGLRenderer renderer;\n      final ${componentName} model;\n      final double rotation;\n\n      _${componentName}Painter(this.renderer, this.model, this.rotation);\n\n      @override\n      void paint(Canvas canvas, Size size) {\n        renderer.render((gl) {\n          gl.clearColor(0.2, 0.3, 0.3, 1.0);\n          gl.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n          gl.enable(GL_DEPTH_TEST);\n          \n          // Render model\n          model.render();\n        });\n      }\n\n      @override\n      bool shouldRepaint(_) => true;\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,YACd,aAAa;IAEd,OAAO,AAAC,gLAMG,OAFqB,eAAc,8CAItC,OAFG,eAAc,2DAE2B,OAA5C,eAAc,gCAGV,OAHwC,eAAc,sCAGd,OAAxC,eAAc,4BAGd,OAHwC,eAAc,qGAY9C,OATR,eAAc,8QA2Ba,OAlBnB,eAAc,kbAuBP,OALY,eAAc,2PAoBzC,OAfe,eAAc,uRAiB5B,OAFD,eAAc,uFAKlB,OAHK,eAAc,oDAGL,OAAd,eAAc;AAkBvB;KAvFgB","debugId":null}},
    {"offset": {"line": 1357, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/go.ts"],"sourcesContent":["export function GoExample(componentName){\n    return `package main\n\n    import (\n        \"github.com/go-gl/gl/v4.1-core/gl\"\n        \"github.com/go-gl/glfw/v3.3/glfw\"\n        \"yourproject/components\"\n        \"runtime\"\n    )\n\n    // initGlfw initializes GLFW and returns a Window\n    func initGlfw() *glfw.Window {\n        if err := glfw.Init(); err != nil {\n            panic(err)\n        }\n        glfw.WindowHint(glfw.Resizable, glfw.True)\n        glfw.WindowHint(glfw.ContextVersionMajor, 4)\n        glfw.WindowHint(glfw.ContextVersionMinor, 1)\n        glfw.WindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)\n        glfw.WindowHint(glfw.OpenGLForwardCompatible, glfw.True)\n\n        window, err := glfw.CreateWindow(800, 600, \"${componentName} Viewer\", nil, nil)\n        if err != nil {\n            panic(err)\n        }\n        window.MakeContextCurrent()\n\n        return window\n    }\n\n    // initOpenGL initializes OpenGL\n    func initOpenGL() {\n        if err := gl.Init(); err != nil {\n            panic(err)\n        }\n        version := gl.GoStr(gl.GetString(gl.VERSION))\n        println(\"OpenGL version\", version)\n        \n        gl.Enable(gl.DEPTH_TEST)\n        gl.DepthFunc(gl.LESS)\n        gl.ClearColor(0.2, 0.3, 0.3, 1.0)\n    }\n\n    func main() {\n        runtime.LockOSThread()\n        \n        window := initGlfw()\n        initOpenGL()\n        \n        // Create model\n        model := components.New${componentName}()\n        \n        // Main loop\n        for !window.ShouldClose() {\n            // Clear the screen\n            gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n            \n            // Render model\n            model.Render()\n            \n            // Maintenance\n            window.SwapBuffers()\n            glfw.PollEvents()\n        }\n        \n        // Cleanup\n        model.Cleanup()\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,UAAU,aAAa;IACnC,OAAO,AAAC,8rBAiDqB,OA7BqB,eAAc,8rBA6BrB,OAAd,eAAc;AAmB/C;KArEgB","debugId":null}},
    {"offset": {"line": 1375, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/java.ts"],"sourcesContent":["export function JavaExample(componentName){\n    return `/**\n * Example application for ${componentName} using LWJGL\n */\nimport ${componentName};\nimport org.lwjgl.glfw.GLFW;\nimport org.lwjgl.opengl.GL;\nimport static org.lwjgl.opengl.GL11.*;\n\npublic class ${componentName}App {\n    private long window;\n    private ${componentName} model;\n    \n    public void run() {\n        init();\n        loop();\n        cleanup();\n    }\n    \n    private void init() {\n        // Initialize GLFW\n        if (!GLFW.glfwInit()) {\n            throw new IllegalStateException(\"Unable to initialize GLFW\");\n        }\n        \n        // Create window\n        window = GLFW.glfwCreateWindow(800, 600, \"${componentName} Viewer\", 0, 0);\n        if (window == 0) {\n            throw new RuntimeException(\"Failed to create the GLFW window\");\n        }\n        \n        GLFW.glfwMakeContextCurrent(window);\n        GL.createCapabilities();\n        \n        // Initialize model\n        model = new ${componentName}();\n        \n        // Enable depth testing\n        glEnable(GL_DEPTH_TEST);\n    }\n    \n    private void loop() {\n        while (!GLFW.glfwWindowShouldClose(window)) {\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n            \n            // Render model\n            model.render();\n            \n            GLFW.glfwSwapBuffers(window);\n            GLFW.glfwPollEvents();\n        }\n    }\n    \n    private void cleanup() {\n        model.cleanup();\n        GLFW.glfwTerminate();\n    }\n    \n    public static void main(String[] args) {\n        new ${componentName}App().run();\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,YAAY,aAAa;IACrC,OAAO,AAAC,mCAGH,OAFoB,eAAc,8BAO5B,OALN,eAAc,wHAOT,OAFC,eAAc,iDAiBuB,OAftC,eAAc,mXAwBN,OAT8B,eAAc,+RAiCpD,OAxBQ,eAAc,ilBAwBR,OAAd,eAAc;AAI5B;KA/DgB","debugId":null}},
    {"offset": {"line": 1393, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/javascript.ts"],"sourcesContent":["export function JavascriptExample(componentName){\n    return `import React from 'react';\n    import { Canvas } from '@react-three/fiber';\n    import { OrbitControls, Environment } from '@react-three/drei';\n    import ${componentName} from '@/components/${componentName}';\n    /**\n     * Example page for ${componentName}\n     */\n    export default function ${componentName}Page() {\n      return (\n        <div className=\"w-full h-screen\">\n          <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n            <ambientLight intensity={0.5} />\n            <pointLight position={[10, 10, 10]} />\n            <${componentName} />\n            <OrbitControls enableZoom enablePan enableRotate />\n            <Environment preset=\"studio\" />\n          </Canvas>\n        </div>\n      );\n    }\n    `;\n}"],"names":[],"mappings":";;;AAAO,SAAS,kBAAkB,aAAa;IAC3C,OAAO,AAAC,iKAGqC,OAApC,eAAc,wBAED,OAFuB,eAAc,yCAIjC,OAFJ,eAAc,2CAQzB,OANe,eAAc,sPAMf,OAAd,eAAc;AAQ7B;KAtBgB","debugId":null}},
    {"offset": {"line": 1411, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/kotlin.ts"],"sourcesContent":["export function KotlinExample(componentName){\n     return `import org.lwjgl.glfw.GLFWErrorCallback\n    import org.lwjgl.opengl.GL\n    /**\n     * Example application for ${componentName} using LWJGL in Kotlin\n     */\n    object ${componentName}App {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            // Setup error callback\n            GLFWErrorCallback.createPrint(System.err).set()\n\n            // Initialize GLFW\n            if (!glfwInit()) throw IllegalStateException(\"Unable to initialize GLFW\")\n\n            // Create window\n            val window = glfwCreateWindow(800, 600, \"${componentName} Viewer\", 0, 0)\n            if (window == 0L) throw RuntimeException(\"Failed to create GLFW window\")\n\n            glfwMakeContextCurrent(window)\n            GL.createCapabilities()\n\n            // Enable depth testing\n            glEnable(GL_DEPTH_TEST)\n\n            // Create model\n            val model = ${componentName}()\n\n            // Main loop\n            while (!glfwWindowShouldClose(window)) {\n                glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT)\n\n                // Render model\n                model.render()\n\n                glfwSwapBuffers(window)\n                glfwPollEvents()\n            }\n\n            // Cleanup\n            glfwTerminate()\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,cAAc,aAAa;IACtC,OAAO,AAAC,oHAKA,OAFoB,eAAc,gDAYQ,OAV1C,eAAc,wXAoBD,OAV6B,eAAc,iUAU7B,OAAd,eAAc;AAkBxC;KA5CgB","debugId":null}},
    {"offset": {"line": 1429, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/php.ts"],"sourcesContent":["\n    export function PHPExample(componentName){\n        return `<?php\n    /**\n     * Example application for ${componentName} using PHP-GLFW\n     */\n    require_once 'vendor/autoload.php';\n    use GL\\\\GL;\n    use GL\\\\Window\\\\Window;\n    class ${componentName}App {\n        private $window;\n        private $model;\n        public function __construct() {\n            $this->init();\n        }\n        private function init() {\n            $this->window = new Window(800, 600, \"${componentName} Viewer\");\n            $this->window->setSwapInterval(1);\n            $this->model = new ${componentName}();\n        }\n        public function run() {\n            while (!$this->window->shouldClose()) {\n                GL::clear(GL::COLOR_BUFFER_BIT | GL::DEPTH_BUFFER_BIT);\n                // Render model\n                $this->model->render();\n                $this->window->swapBuffers();\n                $this->window->pollEvents();\n            }\n        }\n    }\n    if (php_sapi_name() === 'cli') {\n        $app = new ${componentName}App();\n        $app->run();\n    }\n    `;\n  }"],"names":[],"mappings":";;;AACW,SAAS,WAAW,aAAa;IACpC,OAAO,AAAC,kDAOJ,OALqB,eAAc,+HAYK,OAPxC,eAAc,mOASO,OAFmB,eAAc,+FAe7C,OAbY,eAAc,obAaZ,OAAd,eAAc;AAIjC;KAlCkB","debugId":null}},
    {"offset": {"line": 1447, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/python.ts"],"sourcesContent":["export function PythonExample(componentName){\n     return `\"\"\"Example application for ${componentName}\"\"\"\nimport pyglet\nimport moderngl\nimport numpy as np\nfrom pyglet.window import key\nfrom pyrr import Matrix44\nfrom .${componentName} import ${componentName}\n\nclass ${componentName}App:\n    \"\"\"Example application for ModernGL implementation\"\"\"\n    \n    def __init__(self, width: int = 800, height: int = 600):\n        self.window = pyglet.window.Window(width, height, caption='${componentName} Viewer')\n        self.ctx = moderngl.create_context()\n        \n        # Create matrices\n        self.projection = Matrix44.perspective_projection(50, width/height, 0.1, 1000)\n        self.view = Matrix44.look_at([0, 0, 5], [0, 0, 0], [0, 1, 0])\n        \n        # Create the 3D component\n        self.scene = ${componentName}(self.ctx)\n        \n        # Animation state\n        self.rotation = 0\n        \n        # Set up event handlers\n        self.window.event(self.on_draw)\n        self.window.event(self.on_resize)\n        self.window.event(self.on_key_press)\n        \n    def on_draw(self):\n        \"\"\"Handle window draw event\"\"\"\n        self.window.clear()\n        self.ctx.enable(moderngl.DEPTH_TEST)\n        \n        # Update rotation\n        self.rotation += 0.5\n        model = Matrix44.from_y_rotation(np.radians(self.rotation))\n        \n        # Render the scene\n        self.scene.render(self.projection, self.view, model)\n        \n    def on_resize(self, width: int, height: int):\n        \"\"\"Handle window resize event\"\"\"\n        self.projection = Matrix44.perspective_projection(50, width/height, 0.1, 1000)\n        \n    def on_key_press(self, symbol: int, modifiers: int):\n        \"\"\"Handle key press events\"\"\"\n        if symbol == key.ESCAPE:\n            pyglet.app.exit()\n            \n    def run(self):\n        \"\"\"Start the application\"\"\"\n        pyglet.app.run()\n\nif __name__ == '__main__':\n    app = ${componentName}App()\n    app.run()\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,cAAc,aAAa;IACtC,OAAO,AAAC,8BAML,OANkC,eAAc,6HAMxB,OAAxB,eAAc,YAEd,OAFwB,eAAc,cAMuB,OAJ7D,eAAc,6MAYC,OAR8C,eAAc,mUA4CvE,OApCW,eAAc,onCAoCX,OAAd,eAAc;AAG1B;KA5DgB","debugId":null}},
    {"offset": {"line": 1465, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/r.ts"],"sourcesContent":["export function RExample(componentName){\n        return `#' Example application for ${componentName} using R OpenGL\n    #' @importFrom OpenGL gl\n    #' @importFrom magick image_read\n    library(OpenGL)\n    library(magick)\n\n    #' Initialize OpenGL context\n    initGL <- function(width = 800, height = 600) {\n      # Create window\n      glInit(\"R 3D Viewer\", width, height)\n      \n      # Setup viewport\n      glViewport(0, 0, width, height)\n      \n      # Enable depth testing\n      glEnable(GL_DEPTH_TEST)\n      \n      # Set clear color\n      glClearColor(0.2, 0.3, 0.3, 1.0)\n    }\n\n    #' Main rendering loop\n    renderLoop <- function(model, rotation = 0) {\n      # Clear buffers\n      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n      \n      # Render model\n      do.call(model$render, list())\n      \n      # Swap buffers\n      glSwapBuffers()\n      \n      # Update rotation\n      rotation <- (rotation + 0.5) %% 360\n      \n      # Continue loop\n      Sys.sleep(0.016)\n      renderLoop(model, rotation)\n    }\n\n    #' Main application function\n    main <- function() {\n      # Initialize OpenGL\n      initGL()\n      \n      # Create model\n      model <- ${componentName}()\n      \n      # Start rendering loop\n      renderLoop(model)\n    }\n\n    # Run application if script is executed directly\n    if (sys.frames() == 0) {\n      main()\n    }\n    `;\n  }"],"names":[],"mappings":";;;AAAO,SAAS,SAAS,aAAa;IAC9B,OAAO,AAAC,8BA8CC,OA9C4B,eAAc,0lCA8C5B,OAAd,eAAc;AAW7B;KA1Dc","debugId":null}},
    {"offset": {"line": 1483, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/ruby.ts"],"sourcesContent":["\n   export function RubyExample(componentName){\n    return `# Example application for ${componentName} using Ruby OpenGL\n    require 'opengl'\n    require 'glut'\n    include Gl, Glu, Glut\n    class ${componentName}App\n      def initialize\n        glutInit\n        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)\n        glutInitWindowSize(800, 600)\n        glutCreateWindow(\"${componentName} Viewer\")\n        glEnable(GL_DEPTH_TEST)\n        @model = ${componentName}.new\n        glutDisplayFunc(method(:display))\n        glutIdleFunc(method(:idle))\n      end\n      def display\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n        @model.render\n        glutSwapBuffers\n      end\n      def idle\n        glutPostRedisplay\n      end\n      def run\n        glutMainLoop\n      end\n    end\n    if __FILE__ == $0\n      app = ${componentName}App.new\n      app.run\n    end\n    `;\n   }"],"names":[],"mappings":";;;AACU,SAAS,YAAY,aAAa;IACxC,OAAO,AAAC,6BAIA,OAJ4B,eAAc,uGAS1B,OALhB,eAAc,mLAOP,OAFS,eAAc,iEAmB5B,OAjBK,eAAc,iYAiBL,OAAd,eAAc;AAIzB;KAjCgB","debugId":null}},
    {"offset": {"line": 1501, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/rust.ts"],"sourcesContent":["export function RustExample(componentName){\n    return `use wgpu::SurfaceConfiguration;\n    use winit::{\n        event::*,\n        event_loop::{EventLoop, ControlFlow},\n        window::WindowBuilder,\n    };\n    use ${componentName};\n\n    /// Example application for ${componentName} using wgpu\n    struct State {\n        surface: wgpu::Surface,\n        device: wgpu::Device,\n        queue: wgpu::Queue,\n        config: SurfaceConfiguration,\n        size: winit::dpi::PhysicalSize<u32>,\n        model: ${componentName},\n    }\n\n    impl State {\n        async fn new(window: &winit::window::Window) -> Self {\n            let size = window.inner_size();\n            \n            // The instance is a handle to our GPU\n            let instance = wgpu::Instance::new(wgpu::Backends::all());\n            let surface = unsafe { instance.create_surface(window) };\n            let adapter = instance.request_adapter(\n                &wgpu::RequestAdapterOptions {\n                    power_preference: wgpu::PowerPreference::HighPerformance,\n                    compatible_surface: Some(&surface),\n                    force_fallback_adapter: false,\n                },\n            ).await.unwrap();\n            \n            let (device, queue) = adapter.request_device(\n                &wgpu::DeviceDescriptor {\n                    features: wgpu::Features::empty(),\n                    limits: wgpu::Limits::default(),\n                    label: None,\n                },\n                None,\n            ).await.unwrap();\n            \n            let config = wgpu::SurfaceConfiguration {\n                usage: wgpu::TextureUsages::RENDER_ATTACHMENT,\n                format: surface.get_preferred_format(&adapter).unwrap(),\n                width: size.width,\n                height: size.height,\n                present_mode: wgpu::PresentMode::Fifo,\n            };\n            surface.configure(&device, &config);\n            \n            let model = ${componentName}::new(&device);\n            \n            Self {\n                surface,\n                device,\n                queue,\n                config,\n                size,\n                model,\n            }\n        }\n        \n        fn resize(&mut self, new_size: winit::dpi::PhysicalSize<u32>) {\n            if new_size.width > 0 && new_size.height > 0 {\n                self.size = new_size;\n                self.config.width = new_size.width;\n                self.config.height = new_size.height;\n                self.surface.configure(&self.device, &self.config);\n            }\n        }\n        \n        fn render(&mut self) -> Result<(), wgpu::SurfaceError> {\n            let output = self.surface.get_current_frame()?.output;\n            let view = output.texture.create_view(&wgpu::TextureViewDescriptor::default());\n            \n            let mut encoder = self.device.create_command_encoder(&wgpu::CommandEncoderDescriptor {\n                label: Some(\"${componentName} Encoder\"),\n            });\n            \n            {\n                let mut render_pass = encoder.begin_render_pass(&wgpu::RenderPassDescriptor {\n                    label: Some(\"${componentName} Render Pass\"),\n                    color_attachments: &[wgpu::RenderPassColorAttachment {\n                        view: &view,\n                        resolve_target: None,\n                        ops: wgpu::Operations {\n                            load: wgpu::LoadOp::Clear(wgpu::Color {\n                                r: 0.2,\n                                g: 0.3,\n                                b: 0.3,\n                                a: 1.0,\n                            }),\n                            store: true,\n                        },\n                    }],\n                    depth_stencil_attachment: None,\n                });\n                \n                self.model.render(&mut render_pass);\n            }\n            \n            self.queue.submit(std::iter::once(encoder.finish()));\n            Ok(())\n        }\n    }\n\n    pub async fn run() {\n        let event_loop = EventLoop::new();\n        let window = WindowBuilder::new()\n            .with_title(\"${componentName} Viewer\")\n            .build(&event_loop)\n            .unwrap();\n        \n        let mut state = State::new(&window).await;\n        \n        event_loop.run(move |event, _, control_flow| {\n            match event {\n                Event::WindowEvent {\n                    ref event,\n                    window_id,\n                } if window_id == window.id() => match event {\n                    WindowEvent::CloseRequested => *control_flow = ControlFlow::Exit,\n                    WindowEvent::Resized(physical_size) => {\n                        state.resize(*physical_size);\n                    }\n                    WindowEvent::ScaleFactorChanged { new_inner_size, .. } => {\n                        state.resize(**new_inner_size);\n                    }\n                    _ => {}\n                },\n                Event::RedrawRequested(window_id) if window_id == window.id() => {\n                    if let Err(e) = state.render() {\n                        eprintln!(\"{:?}\", e);\n                        *control_flow = ControlFlow::Exit;\n                        return;\n                    }\n                }\n                Event::MainEventsCleared => {\n                    window.request_redraw();\n                }\n                _ => {}\n            }\n        });\n    }\n\n    fn main() {\n        #[cfg(target_arch = \"wasm32\")]\n        {\n            std::panic::set_hook(Box::new(console_error_panic_hook::hook));\n            console_log::init().expect(\"Could not initialize logger\");\n            wasm_bindgen_futures::spawn_local(run());\n        }\n        \n        #[cfg(not(target_arch = \"wasm32\"))]\n        {\n            pollster::block_on(run());\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,YAAY,aAAa;IACrC,OAAO,AAAC,wKAQsB,OAFxB,eAAc,yCASP,OAPiB,eAAc,sOA2CtB,OApCT,eAAc,27CA8DA,OA1BL,eAAc,i+BA+BL,OALJ,eAAc,+LAiClB,OA5BQ,eAAc,o/BA4BR,OAAd,eAAc;AAkDzC;KAjKgB","debugId":null}},
    {"offset": {"line": 1519, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/scala.ts"],"sourcesContent":["export function ScalaExample(componentName){\n   return `import org.lwjgl.glfw.GLFWErrorCallback\n    import org.lwjgl.opengl.GL\n    /**\n     * Example application for ${componentName} using LWJGL in Scala\n     */\n    object ${componentName}App {\n      def main(args: Array[String]): Unit = {\n        // Setup error callback\n        GLFWErrorCallback.createPrint(System.err).set()\n        \n        // Initialize GLFW\n        if (!glfwInit()) throw new IllegalStateException(\"Unable to initialize GLFW\")\n        \n        // Create window\n        val window = glfwCreateWindow(800, 600, \"${componentName} Viewer\", 0L, 0L)\n        if (window == 0) throw new RuntimeException(\"Failed to create GLFW window\")\n        \n        glfwMakeContextCurrent(window)\n        GL.createCapabilities()\n        \n        // Enable depth testing\n        glEnable(GL_DEPTH_TEST)\n        \n        // Create model\n        val model = new ${componentName}()\n        \n        // Main loop\n        while (!glfwWindowShouldClose(window)) {\n          glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n          \n          // Render model\n          model.render()\n          \n          glfwSwapBuffers(window)\n          glfwPollEvents()\n        }\n        \n        // Cleanup\n        glfwTerminate()\n      }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,aAAa,aAAa;IACvC,OAAO,AAAC,oHAKE,OAFoB,eAAc,+CAWI,OATtC,eAAc,sWAmBD,OAVyB,eAAc,sUAUzB,OAAd,eAAc;AAkBxC;KA3CgB","debugId":null}},
    {"offset": {"line": 1537, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/swift.ts"],"sourcesContent":["export function SwiftExample(componentName){\n   return `import Metal\n    import MetalKit\n    import AppKit\n\n    /// View controller for ${componentName} example\n    class ${componentName}ViewController: NSViewController {\n        var renderer: ${componentName}Renderer?\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            guard let mtkView = view as? MTKView else {\n                print(\"View is not an MTKView\")\n                return\n            }\n            \n            // Select the device to render with\n            guard let device = MTLCreateSystemDefaultDevice() else {\n                print(\"Metal is not supported on this device\")\n                return\n            }\n            \n            mtkView.device = device\n            mtkView.clearColor = MTLClearColor(red: 0.2, green: 0.3, blue: 0.3, alpha: 1.0)\n            \n            // Create renderer\n            renderer = ${componentName}Renderer(mtkView: mtkView)\n            renderer?.loadAssets()\n        }\n        \n        override var acceptsFirstResponder: Bool {\n            return true\n        }\n    }\n\n    /// Renderer for ${componentName}\n    class ${componentName}Renderer: NSObject {\n        let commandQueue: MTLCommandQueue\n        let mtkView: MTKView\n        var model: ${componentName}?\n        \n        init(mtkView: MTKView) {\n            self.mtkView = mtkView\n            self.commandQueue = mtkView.device!.makeCommandQueue()!\n            \n            super.init()\n            \n            mtkView.delegate = self\n        }\n        \n        func loadAssets() {\n            // Create the 3D model\n            model = ${componentName}(device: mtkView.device!)\n        }\n    }\n\n    extension ${componentName}Renderer: MTKViewDelegate {\n        func mtkView(_ view: MTKView, drawableSizeWillChange size: CGSize) {\n            // Handle resize if needed\n        }\n        \n        func draw(in view: MTKView) {\n            guard let drawable = view.currentDrawable,\n                  let renderPassDescriptor = view.currentRenderPassDescriptor else {\n                return\n            }\n            \n            let commandBuffer = commandQueue.makeCommandBuffer()\n            let renderEncoder = commandBuffer?.makeRenderCommandEncoder(descriptor: renderPassDescriptor)\n            \n            // Render the model\n            model?.render(renderEncoder: renderEncoder!)\n            \n            renderEncoder?.endEncoding()\n            commandBuffer?.present(drawable)\n            commandBuffer?.commit()\n        }\n    }\n\n    /// macOS application delegate\n    class AppDelegate: NSObject, NSApplicationDelegate {\n        func applicationDidFinishLaunching(_ notification: Notification) {\n            // Create window\n            let window = NSWindow(\n                contentRect: NSRect(x: 0, y: 0, width: 800, height: 600),\n                styleMask: [.titled, .closable, .miniaturizable, .resizable],\n                backing: .buffered,\n                defer: false\n            )\n            window.title = \"${componentName} Viewer\"\n            window.center()\n            window.makeKeyAndOrderFront(nil)\n            \n            // Create Metal view\n            let metalView = MTKView(frame: window.contentView!.bounds)\n            window.contentView?.addSubview(metalView)\n            \n            // Create view controller\n            let viewController = ${componentName}ViewController()\n            window.contentViewController = viewController\n        }\n    }\n\n    // Entry point\n    let delegate = AppDelegate()\n    NSApplication.shared.delegate = delegate\n    _ = NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,aAAa,aAAa;IACvC,OAAO,AAAC,uFAKC,OADkB,eAAc,wBAEpB,OADZ,eAAc,8DAqBD,OApBD,eAAc,isBA6Bf,OATE,eAAc,+MAU3B,OADW,eAAc,gBAIhB,OAHT,eAAc,sHAgBJ,OAbD,eAAc,iWAiBnB,OAJM,eAAc,iEAqCN,OAjCd,eAAc,+zCA0CK,OATL,eAAc,8VASK,OAAd,eAAc;AAUjD;KA7GgB","debugId":null}},
    {"offset": {"line": 1555, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/example/typescript.ts"],"sourcesContent":["export function TypescriptExample(componentName){\n   return `use 'client';\n   import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport ${componentName} from '@/components/${componentName}';\n\n/**\n * Example page demonstrating how to use the ${componentName} component\n */\nexport default function ${componentName}Page() {\n  return (\n    <div className=\"w-full h-screen\">\n      <Canvas \n        camera={{ position: [0, 0, 5], fov: 50 }}\n        gl={{\n          powerPreference: \"high-performance\",\n          antialias: true,\n          alpha: true\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <${componentName} />\n        <OrbitControls \n          enableZoom\n          enablePan\n          enableRotate\n          minDistance={0.1}\n          maxDistance={100}\n        />\n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n}\n`;\n}"],"names":[],"mappings":";;;AAAO,SAAS,kBAAkB,aAAa;IAC5C,OAAO,AAAC,uKAIkC,OAApC,eAAc,wBAGwB,OAHF,eAAc,4DAKjC,OAFqB,eAAc,6CAelD,OAbe,eAAc,8WAaf,OAAd,eAAc;AAczB;KArCgB","debugId":null}},
    {"offset": {"line": 1573, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/generator/generateExamplePage.tsx"],"sourcesContent":["import { CPPExample } from \"@/templates/example/cpp\";\nimport { CSharpExample } from \"@/templates/example/csharp\";\nimport { DartExample } from \"@/templates/example/dart\";\nimport { GoExample } from \"@/templates/example/go\";\nimport { JavaExample } from \"@/templates/example/java\";\nimport { JavascriptExample } from \"@/templates/example/javascript\";\nimport { KotlinExample } from \"@/templates/example/kotlin\";\nimport { PHPExample } from \"@/templates/example/php\";\nimport { PythonExample } from \"@/templates/example/python\";\nimport { RExample } from \"@/templates/example/r\";\nimport { RubyExample } from \"@/templates/example/ruby\";\nimport { RustExample } from \"@/templates/example/rust\";\nimport { ScalaExample } from \"@/templates/example/scala\";\nimport { SwiftExample } from \"@/templates/example/swift\";\nimport { TypescriptExample } from \"@/templates/example/typescript\";\nimport { LanguageId, LANGUAGES } from \"@/types/constant\";\n\nexport default function generateExamplePage(\n  componentName: string,\n  languageId: LanguageId\n): string {\n  const lang = LANGUAGES[languageId];\n\n  switch (languageId) {\n    case \"typescript\":\n      return TypescriptExample(componentName);\n    case \"javascript\":\n      return JavascriptExample(componentName);\n    case \"python\":\n     return PythonExample(componentName);\n    case \"java\":\n      return JavaExample(componentName);\n    case \"csharp\":\n      return CSharpExample(componentName);\n    case \"php\":\n      return PHPExample(componentName);\n    case \"ruby\":\n      return RubyExample(componentName);\n    case \"scala\":\n      return ScalaExample(componentName);\n    case \"kotlin\":\n      return KotlinExample(componentName);\n    case \"dart\":\n      return DartExample(componentName);\n    case \"r\":\n      return RExample(componentName);\n    case \"cpp\":\n      return CPPExample(componentName);\n    case \"go\":\n      return GoExample(componentName);\n    case \"rust\":\n      return RustExample(componentName);\n    case \"swift\":\n      return SwiftExample(componentName);\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateExamplePage(componentName, \"typescript\");\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEe,SAAS,oBACtB,aAAqB,EACrB,UAAsB;IAEtB,MAAM,OAAO,oHAAA,CAAA,YAAS,CAAC,WAAW;IAElC,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,qIAAA,CAAA,oBAAiB,AAAD,EAAE;QAC3B,KAAK;YACH,OAAO,CAAA,GAAA,qIAAA,CAAA,oBAAiB,AAAD,EAAE;QAC3B,KAAK;YACJ,OAAO,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;QACtB,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE;QACrB,KAAK;YACH,OAAO,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE;QACpB,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE;QACrB,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE;QACtB,KAAK;YACH,OAAO,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE;QACrB,KAAK;YACH,OAAO,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD,EAAE;QAClB,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE;QACpB,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE;QACnB,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE;QACrB,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE;QACtB;YACE,mDAAmD;YACnD,OAAO,oBAAoB,eAAe;IAC9C;AACF","debugId":null}},
    {"offset": {"line": 1655, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/functions/getLanguageSpacificName.ts"],"sourcesContent":["import { LanguageId } from \"@/types/constant\";\n\nexport function getLanguageSpecificName(name: string, languageId: LanguageId): string {\n  // First sanitize the name\n  let safeName = name.replace(/[^a-zA-Z0-9_]/g, \"_\");\n  // Ensure it starts with a letter\n  if (!/^[a-zA-Z_]/.test(safeName)) {\n    safeName = \"_\" + safeName;\n  }\n  // Handle reserved keywords\n  const reservedKeywords = [\n    \"default\",\n    \"function\",\n    \"class\",\n    \"export\",\n    \"import\",\n    \"let\",\n    \"const\",\n    \"var\",\n    \"continue\",\n    \"break\",\n    \"case\",\n  ];\n  if (reservedKeywords.includes(safeName.toLowerCase())) {\n    safeName = \"_\" + safeName;\n  }\n\n  switch (languageId) {\n    case \"go\":\n    case \"java\":\n    case \"csharp\":\n    case \"scala\":\n    case \"kotlin\":\n    case \"ruby\":\n    case \"cpp\":\n    case \"rust\":\n    case \"swift\":\n    case \"dart\":\n      // Convert to PascalCase (MyMaterialName)\n      return safeName.replace(/(^|_)(\\w)/g, (_, _1, c) => c.toUpperCase());\n\n    case \"typescript\":\n    case \"javascript\":\n      // Convert to camelCase (myMaterialName)\n      return (\n        safeName.charAt(0).toLowerCase() +\n        safeName.slice(1).replace(/(_)(\\w)/g, (_, _1, c) => c.toUpperCase())\n      );\n\n    case \"python\":\n      // Convert to CamelCase (MyMaterialName)\n      return safeName.replace(/(^|_)(\\w)/g, (_, _1, c) => c.toUpperCase());\n\n    case \"php\":\n      // For PHP, class names are typically CamelCase\n      return safeName.replace(/(^|_)(\\w)/g, (_, _1, c) => c.toUpperCase());\n\n    case \"r\":\n      // For R, function names are typically snake_case\n      return safeName.toLowerCase().replace(/[^a-z0-9]/g, \"_\");\n\n    default:\n      // For other languages, just capitalize the first letter\n      return safeName.charAt(0).toUpperCase() + safeName.slice(1);\n  }\n}"],"names":[],"mappings":";;;AAEO,SAAS,wBAAwB,IAAY,EAAE,UAAsB;IAC1E,0BAA0B;IAC1B,IAAI,WAAW,KAAK,OAAO,CAAC,kBAAkB;IAC9C,iCAAiC;IACjC,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW;QAChC,WAAW,MAAM;IACnB;IACA,2BAA2B;IAC3B,MAAM,mBAAmB;QACvB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,IAAI,iBAAiB,QAAQ,CAAC,SAAS,WAAW,KAAK;QACrD,WAAW,MAAM;IACnB;IAEA,OAAQ;QACN,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACH,yCAAyC;YACzC,OAAO,SAAS,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,IAAM,EAAE,WAAW;QAEnE,KAAK;QACL,KAAK;YACH,wCAAwC;YACxC,OACE,SAAS,MAAM,CAAC,GAAG,WAAW,KAC9B,SAAS,KAAK,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,GAAG,IAAI,IAAM,EAAE,WAAW;QAGrE,KAAK;YACH,wCAAwC;YACxC,OAAO,SAAS,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,IAAM,EAAE,WAAW;QAEnE,KAAK;YACH,+CAA+C;YAC/C,OAAO,SAAS,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,IAAM,EAAE,WAAW;QAEnE,KAAK;YACH,iDAAiD;YACjD,OAAO,SAAS,WAAW,GAAG,OAAO,CAAC,cAAc;QAEtD;YACE,wDAAwD;YACxD,OAAO,SAAS,MAAM,CAAC,GAAG,WAAW,KAAK,SAAS,KAAK,CAAC;IAC7D;AACF","debugId":null}},
    {"offset": {"line": 1722, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/functions/sanitizeName.ts"],"sourcesContent":["export function sanitizeName(name: string): string {\n  // Replace invalid characters with underscores\n  let safeName = name.replace(/[^a-zA-Z0-9_]/g, \"_\");\n\n  // Ensure it starts with a letter\n  if (!/^[a-zA-Z_]/.test(safeName)) {\n    safeName = \"_\" + safeName;\n  }\n\n  // Handle reserved keywords\n  const reservedKeywords = [\n    \"default\",\n    \"function\",\n    \"class\",\n    \"export\",\n    \"import\",\n    \"let\",\n    \"const\",\n    \"var\",\n    \"continue\",\n    \"break\",\n    \"case\",\n  ];\n  if (reservedKeywords.includes(safeName.toLowerCase())) {\n    safeName = \"_\" + safeName;\n  }\n\n  return safeName;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,aAAa,IAAY;IACvC,8CAA8C;IAC9C,IAAI,WAAW,KAAK,OAAO,CAAC,kBAAkB;IAE9C,iCAAiC;IACjC,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW;QAChC,WAAW,MAAM;IACnB;IAEA,2BAA2B;IAC3B,MAAM,mBAAmB;QACvB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,IAAI,iBAAiB,QAAQ,CAAC,SAAS,WAAW,KAAK;QACrD,WAAW,MAAM;IACnB;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1760, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/functions/formatArrayData.ts"],"sourcesContent":["export function formatArrayData(\n  data: number[],\n  languageId: LanguageId,\n  chunkSize: number = 1000\n): string {\n  if (data.length <= chunkSize) {\n    // Use language-specific array syntax only if needed\n    switch (languageId) {\n      case \"typescript\":\n      case \"javascript\":\n        return `[${data.join(\", \")}]`;\n\n      case \"python\":\n        return `[${data.join(\", \")}]`;\n\n      case \"java\":\n      case \"csharp\":\n        return `new float[]{${data.join(\"f, \")}f}`;\n\n      case \"cpp\":\n        return `{${data.join(\"f, \")}f}`;\n\n      case \"go\":\n        return `[]float32{${data.join(\", \")}}`;\n\n      case \"rust\":\n        return `vec![${data.join(\", \")}]`;\n\n      case \"swift\":\n        return `[${data.join(\", \")}]`;\n\n      default:\n        return `[${data.join(\", \")}]`;\n    }\n  }\n\n  // Large arrays: use appropriate memory-efficient syntax\n  switch (languageId) {\n    case \"typescript\":\n    case \"javascript\":\n      return `new Float32Array([${data.join(\", \")}])`;\n\n    case \"python\":\n      return `np.array([${data.join(\", \")}], dtype=np.float32)`;\n\n    case \"java\":\n    case \"csharp\":\n      return `new float[]{${data.join(\"f, \")}f}`;\n\n    case \"cpp\":\n      return `{${data.join(\"f, \")}f}`;\n\n    case \"go\":\n      return `[]float32{${data.join(\", \")}}`;\n\n    case \"rust\":\n      return `vec![${data.join(\", \")}]`;\n\n    case \"swift\":\n      return `[${data.join(\", \")}]`;\n\n    default:\n      return `[${data.join(\", \")}]`;\n  }\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,gBACd,IAAc,EACd,UAAsB;QACtB,YAAA,iEAAoB;IAEpB,IAAI,KAAK,MAAM,IAAI,WAAW;QAC5B,oDAAoD;QACpD,OAAQ;YACN,KAAK;YACL,KAAK;gBACH,OAAO,AAAC,IAAmB,OAAhB,KAAK,IAAI,CAAC,OAAM;YAE7B,KAAK;gBACH,OAAO,AAAC,IAAmB,OAAhB,KAAK,IAAI,CAAC,OAAM;YAE7B,KAAK;YACL,KAAK;gBACH,OAAO,AAAC,eAA+B,OAAjB,KAAK,IAAI,CAAC,QAAO;YAEzC,KAAK;gBACH,OAAO,AAAC,IAAoB,OAAjB,KAAK,IAAI,CAAC,QAAO;YAE9B,KAAK;gBACH,OAAO,AAAC,aAA4B,OAAhB,KAAK,IAAI,CAAC,OAAM;YAEtC,KAAK;gBACH,OAAO,AAAC,QAAuB,OAAhB,KAAK,IAAI,CAAC,OAAM;YAEjC,KAAK;gBACH,OAAO,AAAC,IAAmB,OAAhB,KAAK,IAAI,CAAC,OAAM;YAE7B;gBACE,OAAO,AAAC,IAAmB,OAAhB,KAAK,IAAI,CAAC,OAAM;QAC/B;IACF;IAEA,wDAAwD;IACxD,OAAQ;QACN,KAAK;QACL,KAAK;YACH,OAAO,AAAC,qBAAoC,OAAhB,KAAK,IAAI,CAAC,OAAM;QAE9C,KAAK;YACH,OAAO,AAAC,aAA4B,OAAhB,KAAK,IAAI,CAAC,OAAM;QAEtC,KAAK;QACL,KAAK;YACH,OAAO,AAAC,eAA+B,OAAjB,KAAK,IAAI,CAAC,QAAO;QAEzC,KAAK;YACH,OAAO,AAAC,IAAoB,OAAjB,KAAK,IAAI,CAAC,QAAO;QAE9B,KAAK;YACH,OAAO,AAAC,aAA4B,OAAhB,KAAK,IAAI,CAAC,OAAM;QAEtC,KAAK;YACH,OAAO,AAAC,QAAuB,OAAhB,KAAK,IAAI,CAAC,OAAM;QAEjC,KAAK;YACH,OAAO,AAAC,IAAmB,OAAhB,KAAK,IAAI,CAAC,OAAM;QAE7B;YACE,OAAO,AAAC,IAAmB,OAAhB,KAAK,IAAI,CAAC,OAAM;IAC/B;AACF","debugId":null}},
    {"offset": {"line": 1819, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/typescript.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function TypescriptGeometry(meshName, isLargeGeometry,normals,uvs,indices,positions, languageId,){\n    return `import * as THREE from 'three';\n    \n    // ${meshName} geometry definition\n    export const ${meshName}Geometry = (() => {\n      const geometry = new THREE.BufferGeometry();\n      \n      ${isLargeGeometry\n              ? `// Large geometry - using chunked approach\n      const createGeometryChunk = (data: number[], itemSize: number) => {\n        const chunkSize = 50000;\n        const chunks: Float32Array[] = [];\n        for (let i = 0; i < data.length; i += chunkSize) {\n          const chunk = data.slice(i, i + chunkSize);\n          chunks.push(new Float32Array(chunk));\n        }\n        return chunks;\n      };\n      \n      const positionChunks = createGeometryChunk(${JSON.stringify(positions)}, 3);\n      const positions = new Float32Array(positionChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      \n      ${normals\n                ? `const normalChunks = createGeometryChunk(${JSON.stringify(\n                  normals\n                )}, 3);\n      const normals = new Float32Array(normalChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n      geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));`\n                : \"\"\n              }\n      \n      ${uvs\n                ? `const uvChunks = createGeometryChunk(${JSON.stringify(uvs)}, 2);\n      const uvs = new Float32Array(uvChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n      geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));`\n                : \"\"\n              }\n      \n      ${indices\n                ? `const indexChunks = createGeometryChunk(${JSON.stringify(indices)}, 1);\n      const indices = new Uint16Array(indexChunks.reduce((acc, chunk) => [...acc, ...chunk], [] as number[]));\n      geometry.setIndex(new THREE.BufferAttribute(indices, 1));`\n                : \"\"\n              }`\n              : `// Position data\n      const positions = ${formatArrayData(positions, languageId)};\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      \n      ${normals\n                ? `// Normal data\n      const normals = ${formatArrayData(normals, languageId)};\n      geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));`\n                : \"\"\n              }\n      \n      ${uvs\n                ? `// UV data\n      const uvs = ${formatArrayData(uvs, languageId)};\n      geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));`\n                : \"\"\n              }\n      \n      ${indices\n                ? `// Index data\n      const indices = new Uint16Array(${JSON.stringify(indices)});\n      geometry.setIndex(new THREE.BufferAttribute(indices, 1));`\n                : \"\"\n              }`\n            }\n    \n      geometry.computeVertexNormals();\n      return geometry;\n    })();\n    `;\n}"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,mBAAmB,QAAQ,EAAE,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAE,UAAU;IAClG,OAAO,AAAC,iDAGO,OADV,UAAS,2CAIV,OAHW,UAAS,2FAiEf,OA9DL,kBACQ,AAAC,kdAeT,OAJ2C,KAAK,SAAS,CAAC,YAAW,kOAarE,OATA,UACU,AAAC,4CAED,OAF4C,KAAK,SAAS,CAC1D,UACA,4MAGA,IACH,oBASP,OAPA,MACU,AAAC,wCAA2D,OAApB,KAAK,SAAS,CAAC,MAAK,4LAG5D,IACH,oBAOA,OALP,UACU,AAAC,2CAAkE,OAAxB,KAAK,SAAS,CAAC,UAAS,4LAGnE,MAEF,AAAC,6CAIT,OAHkB,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,wGAUzD,OAPA,UACU,AAAC,yCAC0C,OAArC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,SAAS,aAAY,sFAE3C,IACH,oBASP,OAPA,MACU,AAAC,iCACkC,OAAjC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,KAAK,aAAY,8EAEnC,IACH,oBAOA,OALP,UACU,AAAC,wDAC6C,OAAxB,KAAK,SAAS,CAAC,UAAS,yEAE9C,KAEL;AAMb;KA3EgB","debugId":null}},
    {"offset": {"line": 1839, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/javascript.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function JavascriptGeometry(meshName, isLargeGeometry,normals,uvs,indices,positions, languageId,){\n    return `import * as THREE from 'three';\n        // ${meshName} geometry definition\n        export const ${meshName}Geometry = (() => {\n          const geometry = new THREE.BufferGeometry();\n          // Position data\n          const positions = ${formatArrayData(positions, languageId)};\n          geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n          ${normals\n              ? `// Normal data\n          const normals = ${formatArrayData(normals, languageId)};\n          geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));`\n              : \"\"\n            }\n          ${uvs\n              ? `// UV data\n          const uvs = ${formatArrayData(uvs, languageId)};\n          geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));`\n              : \"\"\n            }\n          ${indices\n              ? `// Index data\n          const indices = new Uint16Array(${JSON.stringify(indices)});\n          geometry.setIndex(new THREE.BufferAttribute(indices, 1));`\n              : \"\"\n            }\n          geometry.computeVertexNormals();\n          return geometry;\n        })();\n        `;\n}"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,mBAAmB,QAAQ,EAAE,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAE,UAAU;IAClG,OAAO,AAAC,+CAEW,OADV,UAAS,+CAIQ,OAHP,UAAS,yIAKpB,OAFkB,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,wGAQzD,OANA,UACI,AAAC,6CACgD,OAArC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,SAAS,aAAY,0FAEjD,IACH,gBAOD,OANA,MACI,AAAC,qCACwC,OAAjC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,KAAK,aAAY,kFAEzC,IACH,gBAMA,OALD,UACI,AAAC,4DACmD,OAAxB,KAAK,SAAS,CAAC,UAAS,6EAEpD,IACH;AAKb;KA9BgB","debugId":null}},
    {"offset": {"line": 1859, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/python.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function PythonGeometry(meshName, isLargeGeometry,normals,uvs,indices,positions, languageId,){\n    return `import numpy as np\n    import moderngl\n    from typing import Optional\n    \n    class ${meshName}Geometry:\n        \"\"\"${meshName} geometry definition for ModernGL\"\"\"\n        \n        def __init__(self):\n            # Position data\n            self.positions = ${formatArrayData(positions, languageId)}\n            ${normals\n              ? `# Normal data\n            self.normals = ${formatArrayData(normals, languageId)}`\n              : \"self.normals = None\"\n            }\n            ${uvs\n              ? `# UV data\n            self.uvs = ${formatArrayData(uvs, languageId)}`\n              : \"self.uvs = None\"\n            }\n            ${indices\n              ? `# Index data\n            self.indices = np.array([${indices.join(\", \")}], dtype=np.uint32)`\n              : \"self.indices = None\"\n            }\n        \n        def create_vao(self, ctx: moderngl.Context, program: moderngl.Program) -> moderngl.VertexArray:\n            \"\"\"Create vertex array object for rendering\"\"\"\n            vbo_positions = ctx.buffer(self.positions.tobytes())\n            \n            vao_content = [(vbo_positions, '3f', 'in_position')]\n            \n            ${normals\n              ? `if self.normals is not None:\n                vbo_normals = ctx.buffer(self.normals.tobytes())\n                vao_content.append((vbo_normals, '3f', 'in_normal'))`\n              : \"\"\n            }\n            \n            ${uvs\n              ? `if self.uvs is not None:\n                vbo_uvs = ctx.buffer(self.uvs.tobytes())\n                vao_content.append((vbo_uvs, '2f', 'in_uv'))`\n              : \"\"\n            }\n            \n            ${indices\n              ? `if self.indices is not None:\n                ibo = ctx.buffer(self.indices.tobytes())\n                return ctx.vertex_array(program, vao_content, index_buffer=ibo)\n            else:\n                return ctx.vertex_array(program, vao_content)`\n              : \"return ctx.vertex_array(program, vao_content)\"\n            }\n    `;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,eAAe,QAAQ,EAAE,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAE,UAAU;IAC9F,OAAO,AAAC,6FAKC,OADD,UAAS,0BAKU,OAJlB,UAAS,2IAKR,OADiB,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,kBAMxD,OALA,UACE,AAAC,6CACiD,OAArC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,SAAS,eACtC,uBACH,kBAMC,OALA,MACE,AAAC,qCACyC,OAAjC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,KAAK,eAC9B,mBACH,kBAaC,OAZA,UACE,AAAC,sDACyC,OAAnB,QAAQ,IAAI,CAAC,OAAM,yBAC1C,uBACH,qWAeC,OAPA,UACG,yKAGD,IACH,gCASC,OAPA,MACG,qJAGD,IACH,gCASA,OAPC,UACG,8PAKD,iDACH;AAEb;KAxDgB","debugId":null}},
    {"offset": {"line": 1879, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/java.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function JavaGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `import java.nio.FloatBuffer;\n    import java.nio.IntBuffer;\n    import org.lwjgl.BufferUtils;\n    import static org.lwjgl.opengl.GL30.*;\n    \n    /**\n     * ${meshName} geometry definition for LWJGL OpenGL\n     */\n    public class ${meshName}Geometry {\n        private int vao;\n        private int vbo;\n        ${indices ? \"private int ebo;\" : \"\"}\n        private int vertexCount;\n        \n        public ${meshName}Geometry() {\n            setupBuffers();\n        }\n        \n        private void setupBuffers() {\n            // Position data\n            float[] positions = ${formatArrayData(positions, languageId)};\n            ${normals\n              ? `float[] normals = ${formatArrayData(normals || [], languageId)};`\n              : \"\"\n            }\n            ${uvs ? `float[] uvs = ${formatArrayData(uvs || [], languageId)};` : \"\"}\n            ${indices ? `int[] indices = {${indices.join(\", \")}};` : \"\"}\n            \n            vao = glGenVertexArrays();\n            vbo = glGenBuffers();\n            ${indices ? \"ebo = glGenBuffers();\" : \"\"}\n            \n            glBindVertexArray(vao);\n            \n            // Position buffer\n            glBindBuffer(GL_ARRAY_BUFFER, vbo);\n            FloatBuffer positionBuffer = BufferUtils.createFloatBuffer(positions.length);\n            positionBuffer.put(positions).flip();\n            glBufferData(GL_ARRAY_BUFFER, positionBuffer, GL_STATIC_DRAW);\n            glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * Float.BYTES, 0);\n            glEnableVertexAttribArray(0);\n            \n            ${normals\n              ? `// Normal buffer\n            FloatBuffer normalBuffer = BufferUtils.createFloatBuffer(normals.length);\n            normalBuffer.put(normals).flip();\n            glBufferData(GL_ARRAY_BUFFER, normalBuffer, GL_STATIC_DRAW);\n            glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * Float.BYTES, 0);\n            glEnableVertexAttribArray(1);`\n              : \"\"\n            }\n            \n            ${uvs\n              ? `// UV buffer\n            FloatBuffer uvBuffer = BufferUtils.createFloatBuffer(uvs.length);\n            uvBuffer.put(uvs).flip();\n            glBufferData(GL_ARRAY_BUFFER, uvBuffer, GL_STATIC_DRAW);\n            glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * Float.BYTES, 0);\n            glEnableVertexAttribArray(2);`\n              : \"\"\n            }\n            \n            ${indices\n              ? `// Element buffer\n            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);\n            IntBuffer indexBuffer = BufferUtils.createIntBuffer(indices.length);\n            indexBuffer.put(indices).flip();\n            glBufferData(GL_ELEMENT_ARRAY_BUFFER, indexBuffer, GL_STATIC_DRAW);\n            vertexCount = indices.length;`\n              : `vertexCount = positions.length / 3;`\n            }\n            \n            glBindVertexArray(0);\n        }\n        \n        public void render() {\n            glBindVertexArray(vao);\n            ${indices\n              ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0);\"\n              : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount);\"\n            }\n            glBindVertexArray(0);\n        }\n        \n        public void cleanup() {\n            glDeleteVertexArrays(vao);\n            glDeleteBuffers(vbo);\n            ${indices ? \"glDeleteBuffers(ebo);\" : \"\"}\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,aAAa,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IAC1F,OAAO,AAAC,sKAQO,OAFV,UAAS,qEAKR,OAHS,UAAS,4EAMX,OAHP,UAAU,qBAAqB,IAAG,iEASV,OANjB,UAAS,yKAOZ,OADoB,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,mBAK3D,OAJA,UACE,AAAC,qBAA+D,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,aAAY,OAChE,IACH,kBAEC,OADA,MAAM,AAAC,iBAAuD,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,aAAY,OAAK,IAAG,kBAKtE,OAJA,UAAU,AAAC,oBAAsC,OAAnB,QAAQ,IAAI,CAAC,OAAM,QAAM,IAAG,2GAgB1D,OAZA,UAAU,0BAA0B,IAAG,sgBAsBvC,OAVA,UACG,+VAMD,IACH,gCAYC,OAVA,MACG,uUAMD,IACH,gCAiBC,OAfA,UACG,2UAMA,uCACJ,6JAiBC,OAVA,UACE,mEACA,+CACH,sLAOwC,OAAvC,UAAU,0BAA0B,IAAG;AAIrD;KA5FgB","debugId":null}},
    {"offset": {"line": 1899, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/csharp.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function CSharpGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `using System;\n    using OpenTK.Graphics.OpenGL4;\n    using OpenTK.Mathematics;\n    \n    /// <summary>\n    /// ${meshName} geometry definition for OpenTK\n    /// </summary>\n    public class ${meshName}Geometry : IDisposable\n    {\n        private int _vao;\n        private int _vbo;\n        ${indices ? \"private int _ebo;\" : \"\"}\n        private int _vertexCount;\n        \n        public ${meshName}Geometry()\n        {\n            SetupBuffers();\n        }\n        \n        private void SetupBuffers()\n        {\n            // Position data\n            float[] positions = ${formatArrayData(positions, languageId)};\n            ${normals\n              ? `float[] normals = ${formatArrayData(normals || [], languageId)};`\n              : \"\"\n            }\n            ${uvs ? `float[] uvs = ${formatArrayData(uvs || [], languageId)};` : \"\"}\n            ${indices ? `uint[] indices = {${indices.join(\", \")}};` : \"\"}\n            \n            _vao = GL.GenVertexArray();\n            _vbo = GL.GenBuffer();\n            ${indices ? \"_ebo = GL.GenBuffer();\" : \"\"}\n            \n            GL.BindVertexArray(_vao);\n            \n            // Position buffer\n            GL.BindBuffer(BufferTarget.ArrayBuffer, _vbo);\n            GL.BufferData(BufferTarget.ArrayBuffer, positions.Length * sizeof(float), positions, BufferUsageHint.StaticDraw);\n            GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\n            GL.EnableVertexAttribArray(0);\n            \n            ${normals\n              ? `// Normal buffer\n            GL.BufferData(BufferTarget.ArrayBuffer, normals.Length * sizeof(float), normals, BufferUsageHint.StaticDraw);\n            GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\n            GL.EnableVertexAttribArray(1);`\n              : \"\"\n            }\n            \n            ${uvs\n              ? `// UV buffer\n            GL.BufferData(BufferTarget.ArrayBuffer, uvs.Length * sizeof(float), uvs, BufferUsageHint.StaticDraw);\n            GL.VertexAttribPointer(2, 2, VertexAttribPointerType.Float, false, 2 * sizeof(float), 0);\n            GL.EnableVertexAttribArray(2);`\n              : \"\"\n            }\n            \n            ${indices\n              ? `// Element buffer\n            GL.BindBuffer(BufferTarget.ElementArrayBuffer, _ebo);\n            GL.BufferData(BufferTarget.ElementArrayBuffer, indices.Length * sizeof(uint), indices, BufferUsageHint.StaticDraw);\n            _vertexCount = indices.Length;`\n              : `_vertexCount = positions.Length / 3;`\n            }\n            \n            GL.BindVertexArray(0);\n        }\n        \n        public void Render()\n        {\n            GL.BindVertexArray(_vao);\n            ${indices\n              ? \"GL.DrawElements(PrimitiveType.Triangles, _vertexCount, DrawElementsType.UnsignedInt, 0);\"\n              : \"GL.DrawArrays(PrimitiveType.Triangles, 0, _vertexCount);\"\n            }\n            GL.BindVertexArray(0);\n        }\n        \n        public void Dispose()\n        {\n            GL.DeleteVertexArray(_vao);\n            GL.DeleteBuffer(_vbo);\n            ${indices ? \"GL.DeleteBuffer(_ebo);\" : \"\"}\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,eAAe,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IAC5F,OAAO,AAAC,sHAOO,OAFT,UAAS,0EAMT,OAJS,UAAS,iGAOX,OAHP,UAAU,sBAAsB,IAAG,kEAWX,OARjB,UAAS,2LASZ,OADoB,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,mBAK3D,OAJA,UACE,AAAC,qBAA+D,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,aAAY,OAChE,IACH,kBAEC,OADA,MAAM,AAAC,iBAAuD,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,aAAY,OAAK,IAAG,kBAKtE,OAJA,UAAU,AAAC,qBAAuC,OAAnB,QAAQ,IAAI,CAAC,OAAM,QAAM,IAAG,6GAc3D,OAVA,UAAU,2BAA2B,IAAG,idAkBxC,OARA,UACG,mSAID,IACH,gCAUC,OARA,MACG,uRAID,IACH,gCAgBC,OAdA,UACG,sQAIA,wCACJ,yKAmBC,OAXA,UACE,6FACA,4DACH,kMAQyC,OAAxC,UAAU,2BAA2B,IAAG;AAItD;KAxFgB","debugId":null}},
    {"offset": {"line": 1919, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/cpp.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function CPPGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `#pragma once\n    #include <vector>\n    #include <GL/glew.h>\n    #include <glm/glm.hpp>\n    \n    /**\n     * ${meshName} geometry definition for OpenGL with GLM\n     */\n    class ${meshName}Geometry {\n    private:\n        GLuint VAO, VBO${indices ? \", EBO\" : \"\"};\n        ${indices ? \"int indexCount;\" : \"int vertexCount;\"}\n        \n    public:\n        ${meshName}Geometry() {\n            setupBuffers();\n        }\n        \n        ~${meshName}Geometry() {\n            cleanup();\n        }\n        \n    private:\n        void setupBuffers() {\n            // Position data\n            std::vector<float> positions = ${formatArrayData(\n            positions,\n            languageId\n          )};\n            ${normals\n              ? `std::vector<float> normals = ${formatArrayData(\n                normals || [],\n                languageId\n              )};`\n              : \"\"\n            }\n            ${uvs\n              ? `std::vector<float> uvs = ${formatArrayData(\n                uvs || [],\n                languageId\n              )};`\n              : \"\"\n            }\n            ${indices\n              ? `std::vector<unsigned int> indices = {${indices.join(\", \")}};`\n              : \"\"\n            }\n            \n            glGenVertexArrays(1, &VAO);\n            glGenBuffers(1, &VBO);\n            ${indices ? \"glGenBuffers(1, &EBO);\" : \"\"}\n            \n            glBindVertexArray(VAO);\n            \n            // Position buffer\n            glBindBuffer(GL_ARRAY_BUFFER, VBO);\n            glBufferData(GL_ARRAY_BUFFER, positions.size() * sizeof(float), positions.data(), GL_STATIC_DRAW);\n            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n            glEnableVertexAttribArray(0);\n            \n            ${normals\n              ? `// Normal buffer\n            glBufferData(GL_ARRAY_BUFFER, normals.size() * sizeof(float), normals.data(), GL_STATIC_DRAW);\n            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n            glEnableVertexAttribArray(1);`\n              : \"\"\n            }\n            \n            ${uvs\n              ? `// UV buffer\n            glBufferData(GL_ARRAY_BUFFER, uvs.size() * sizeof(float), uvs.data(), GL_STATIC_DRAW);\n            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);\n            glEnableVertexAttribArray(2);`\n              : \"\"\n            }\n            \n            ${indices\n              ? `// Element buffer\n            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n            glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), indices.data(), GL_STATIC_DRAW);\n            indexCount = indices.size();`\n              : `vertexCount = positions.size() / 3;`\n            }\n            \n            glBindVertexArray(0);\n        }\n        \n    public:\n        void render() {\n            glBindVertexArray(VAO);\n            ${indices\n              ? \"glDrawElements(GL_TRIANGLES, indexCount, GL_UNSIGNED_INT, 0);\"\n              : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount);\"\n            }\n            glBindVertexArray(0);\n        }\n        \n        void cleanup() {\n            glDeleteVertexArrays(1, &VAO);\n            glDeleteBuffers(1, &VBO);\n            ${indices ? \"glDeleteBuffers(1, &EBO);\" : \"\"}\n        }\n    };\n    `;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,YAAY,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IACzF,OAAO,AAAC,oHAQA,OAFH,UAAS,iEAIO,OAFb,UAAS,qDAGX,OADe,UAAU,UAAU,IAAG,eAItC,OAHA,UAAU,oBAAoB,oBAAmB,qCAOhD,OAJD,UAAS,6EAW0B,OAPlC,UAAS,qLAWN,OAJ+B,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAC/C,WACA,aACA,mBAQE,OAPA,UACE,AAAC,gCAGD,OAHgC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAC9C,WAAW,EAAE,EACb,aACA,OACA,IACH,kBAQC,OAPA,MACE,AAAC,4BAGD,OAH4B,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAC1C,OAAO,EAAE,EACT,aACA,OACA,IACH,kBAQC,OAPA,UACE,AAAC,wCAA0D,OAAnB,QAAQ,IAAI,CAAC,OAAM,QAC3D,IACH,6GAcC,OAVA,UAAU,2BAA2B,IAAG,waAkBxC,OARA,UACG,uQAID,IACH,gCAUC,OARA,MACG,2PAID,IACH,gCAgBC,OAdA,UACG,oPAIA,uCACJ,mKAkBC,OAVA,UACE,kEACA,+CACH,uLAO4C,OAA3C,UAAU,8BAA8B,IAAG;AAIzD;KAzGgB","debugId":null}},
    {"offset": {"line": 1939, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/go.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function GoGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `package geometry\n\nimport (\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"github.com/go-gl/mathgl/mgl32\"\n)\n\n// ${meshName}Geometry represents the geometry data for ${meshName}\ntype ${meshName}Geometry struct {\n    vao uint32\n    vbo uint32\n    ${indices ? \"ebo uint32\" : \"\"}\n    ${indices ? \"indexCount int32\" : \"vertexCount int32\"}\n}\n\n// New${meshName}Geometry creates a new ${meshName} geometry\nfunc New${meshName}Geometry() *${meshName}Geometry {\n    geom := &${meshName}Geometry{}\n    geom.setupBuffers()\n    return geom\n}\n\nfunc (g *${meshName}Geometry) setupBuffers() {\n    // Position data\n    positions := ${formatArrayData(positions, languageId)}\n    ${normals ? `normals := ${formatArrayData(normals || [], languageId)}` : \"\"}\n    ${uvs ? `uvs := ${formatArrayData(uvs || [], languageId)}` : \"\"}\n    ${indices ? `indices := []uint32{${indices.join(\", \")}}` : \"\"}\n    \n    gl.GenVertexArrays(1, &g.vao)\n    gl.GenBuffers(1, &g.vbo)\n    ${indices ? \"gl.GenBuffers(1, &g.ebo)\" : \"\"}\n    \n    gl.BindVertexArray(g.vao)\n    \n    // Position buffer\n    gl.BindBuffer(gl.ARRAY_BUFFER, g.vbo)\n    gl.BufferData(gl.ARRAY_BUFFER, len(positions)*4, gl.Ptr(positions), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 3*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(0)\n    \n    ${normals\n          ? `// Normal buffer\n    gl.BufferData(gl.ARRAY_BUFFER, len(normals)*4, gl.Ptr(normals), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(1, 3, gl.FLOAT, false, 3*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(1)`\n          : \"\"\n        }\n    \n    ${uvs\n          ? `// UV buffer\n    gl.BufferData(gl.ARRAY_BUFFER, len(uvs)*4, gl.Ptr(uvs), gl.STATIC_DRAW)\n    gl.VertexAttribPointer(2, 2, gl.FLOAT, false, 2*4, gl.PtrOffset(0))\n    gl.EnableVertexAttribArray(2)`\n          : \"\"\n        }\n    \n    ${indices\n          ? `// Element buffer\n    gl.BindBuffer(gl.ELEMENT_ARRAY_BUFFER, g.ebo)\n    gl.BufferData(gl.ELEMENT_ARRAY_BUFFER, len(indices)*4, gl.Ptr(indices), gl.STATIC_DRAW)\n    g.indexCount = int32(len(indices))`\n          : `g.vertexCount = int32(len(positions) / 3)`\n        }\n    \n    gl.BindVertexArray(0)\n}\n\n// Render renders the geometry\nfunc (g *${meshName}Geometry) Render() {\n    gl.BindVertexArray(g.vao)\n    ${indices\n          ? \"gl.DrawElements(gl.TRIANGLES, g.indexCount, gl.UNSIGNED_INT, gl.PtrOffset(0))\"\n          : \"gl.DrawArrays(gl.TRIANGLES, 0, g.vertexCount)\"\n        }\n    gl.BindVertexArray(0)\n}\n\n// Cleanup cleans up OpenGL resources\nfunc (g *${meshName}Geometry) Cleanup() {\n    gl.DeleteVertexArrays(1, &g.vao)\n    gl.DeleteBuffers(1, &g.vbo)\n    ${indices ? \"gl.DeleteBuffers(1, &g.ebo)\" : \"\"}\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,WAAW,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IACxF,OAAO,AAAC,sHAO8C,OAArD,UAAS,8CACP,OADmD,UAAS,WAI7D,OAHC,UAAS,2DAIV,OADA,UAAU,eAAe,IAAG,UAI1B,OAHF,UAAU,qBAAqB,qBAAoB,iBAGf,OAAlC,UAAS,2BACP,OADgC,UAAS,uBAClB,OAAvB,UAAS,gBACJ,OADkB,UAAS,6BAM/B,OALI,UAAS,wEAOL,OAFR,UAAS,uEAGd,OADa,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,UAEpD,OADA,UAAU,AAAC,cAAwD,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,eAAgB,IAAG,UAE1E,OADA,MAAM,AAAC,UAAgD,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,eAAgB,IAAG,UAK9D,OAJA,UAAU,AAAC,uBAAyC,OAAnB,QAAQ,IAAI,CAAC,OAAM,OAAK,IAAG,iFAc5D,OAVA,UAAU,6BAA6B,IAAG,mUAkB1C,OARA,UACO,sNAID,IACH,gBAUH,OARA,MACO,0MAID,IACH,gBAcE,OAZL,UACO,8MAIA,6CACJ,qFAQH,OAFK,UAAS,6DAUT,OARL,UACM,kFACA,iDACH,sFAQH,OAHK,UAAS,sGAG+B,OAA7C,UAAU,gCAAgC,IAAG;AAGnD;KAtFgB","debugId":null}},
    {"offset": {"line": 1959, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/rust.ts"],"sourcesContent":["export function RustGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `use wgpu::util::DeviceExt;\n\n/// ${meshName} geometry definition for wgpu\npub struct ${meshName}Geometry {\n    vertex_buffer: wgpu::Buffer,\n    ${indices ? \"index_buffer: wgpu::Buffer,\" : \"\"}\n    ${indices ? \"num_indices: u32,\" : \"num_vertices: u32,\"}\n}\n\nimpl ${meshName}Geometry {\n    pub fn new(device: &wgpu::Device) -> Self {\n        // Position data\n        let positions: Vec<f32> = vec![${positions.join(\", \")}];\n        ${normals\n          ? `let normals: Vec<f32> = vec![${(normals || []).join(\", \")}];`\n          : \"\"\n        }\n        ${uvs ? `let uvs: Vec<f32> = vec![${(uvs || []).join(\", \")}];` : \"\"}\n        ${indices ? `let indices: Vec<u16> = vec![${indices.join(\", \")}];` : \"\"}\n        \n        // Create vertex data\n        let mut vertex_data = Vec::new();\n        for i in (0..positions.len()).step_by(3) {\n            vertex_data.extend_from_slice(&positions[i..i+3]);\n            ${normals\n          ? `if i < normals.len() - 2 {\n                vertex_data.extend_from_slice(&normals[i..i+3]);\n            }`\n          : \"\"\n        }\n            ${uvs\n          ? `let uv_index = (i / 3) * 2;\n            if uv_index < uvs.len() - 1 {\n                vertex_data.extend_from_slice(&uvs[uv_index..uv_index+2]);\n            }`\n          : \"\"\n        }\n        }\n        \n        let vertex_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {\n            label: Some(\"${meshName} Vertex Buffer\"),\n            contents: bytemuck::cast_slice(&vertex_data),\n            usage: wgpu::BufferUsages::VERTEX,\n        });\n        \n        ${indices\n          ? `let index_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {\n            label: Some(\"${meshName} Index Buffer\"),\n            contents: bytemuck::cast_slice(&indices),\n            usage: wgpu::BufferUsages::INDEX,\n        });\n        \n        Self {\n            vertex_buffer,\n            index_buffer,\n            num_indices: indices.len() as u32,\n        }`\n          : `Self {\n            vertex_buffer,\n            num_vertices: (positions.len() / 3) as u32,\n        }`\n        }\n    }\n    \n    pub fn render<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n        render_pass.set_vertex_buffer(0, self.vertex_buffer.slice(..));\n        ${indices\n          ? `render_pass.set_index_buffer(self.index_buffer.slice(..), wgpu::IndexFormat::Uint16);\n        render_pass.draw_indexed(0..self.num_indices, 0, 0..1);`\n          : \"render_pass.draw(0..self.num_vertices, 0..1);\"\n        }\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,aAAa,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IAC1F,OAAO,AAAC,qCAGC,OADP,UAAS,8CAGT,OAFO,UAAS,sDAGhB,OADA,UAAU,gCAAgC,IAAG,UAI5C,OAHD,UAAU,sBAAsB,sBAAqB,gBAMlB,OAHlC,UAAS,kIAIN,OAD+B,UAAU,IAAI,CAAC,OAAM,gBAKpD,OAJA,UACE,AAAC,gCAA0D,OAA3B,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,OAAM,QAC3D,IACH,cAEC,OADA,MAAM,AAAC,4BAAkD,OAAvB,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,OAAM,QAAM,IAAG,cAO9D,OANJ,UAAU,AAAC,gCAAkD,OAAnB,QAAQ,IAAI,CAAC,OAAM,QAAM,IAAG,0NAYlE,OANA,UACD,gHAGD,IACH,kBAWkB,OAVb,MACD,sKAID,IACH,+IASC,OALiB,UAAS,iKA0B1B,OArBA,UACE,AAAC,8GACuB,OAAT,UAAS,qRAUvB,0GAIJ,+KASA,OAJC,UACG,2JAED,iDACH;AAIT;KA3EgB","debugId":null}},
    {"offset": {"line": 1977, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/swift.ts"],"sourcesContent":["export function SwiftGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `import Metal\n    import simd\n    \n    /// ${meshName} geometry definition for Metal\n    class ${meshName}Geometry {\n        private var vertexBuffer: MTLBuffer?\n        ${indices ? \"private var indexBuffer: MTLBuffer?\" : \"\"}\n        ${indices ? \"private var indexCount: Int\" : \"private var vertexCount: Int\"}\n        \n        init(device: MTLDevice) {\n            // Position data\n            let positions: [Float] = [${positions.join(\", \")}]\n            ${normals\n              ? `let normals: [Float] = [${(normals || []).join(\", \")}]`\n              : \"\"\n            }\n            ${uvs ? `let uvs: [Float] = [${(uvs || []).join(\", \")}]` : \"\"}\n            ${indices ? `let indices: [UInt16] = [${indices.join(\", \")}]` : \"\"}\n            \n            // Create vertex data\n            var vertexData: [Float] = []\n            for i in stride(from: 0, to: positions.count, by: 3) {\n                vertexData.append(contentsOf: [positions[i], positions[i+1], positions[i+2]])\n                ${normals\n              ? `if i < normals.count - 2 {\n                    vertexData.append(contentsOf: [normals[i], normals[i+1], normals[i+2]])\n                }`\n              : \"\"\n            }\n                ${uvs\n              ? `let uvIndex = (i / 3) * 2\n                if uvIndex < uvs.count - 1 {\n                    vertexData.append(contentsOf: [uvs[uvIndex], uvs[uvIndex+1]])\n                }`\n              : \"\"\n            }\n            }\n            \n            vertexBuffer = device.makeBuffer(\n                bytes: vertexData,\n                length: vertexData.count * MemoryLayout<Float>.size,\n                options: []\n            )\n            \n            ${indices\n              ? `indexBuffer = device.makeBuffer(\n                bytes: indices,\n                length: indices.count * MemoryLayout<UInt16>.size,\n                options: []\n            )\n            indexCount = indices.count`\n              : `vertexCount = positions.count / 3`\n            }\n        }\n        \n        func render(renderEncoder: MTLRenderCommandEncoder) {\n            guard let vertexBuffer = vertexBuffer else { return }\n            \n            renderEncoder.setVertexBuffer(vertexBuffer, offset: 0, index: 0)\n            \n            ${indices\n              ? `guard let indexBuffer = indexBuffer else { return }\n            renderEncoder.drawIndexedPrimitives(\n                type: .triangle,\n                indexCount: indexCount,\n                indexType: .uint16,\n                indexBuffer: indexBuffer,\n                indexBufferOffset: 0\n            )`\n              : `renderEncoder.drawPrimitives(\n                type: .triangle,\n                vertexStart: 0,\n                vertexCount: vertexCount\n            )`\n            }\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,cAAc,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IAC3F,OAAO,AAAC,gDAIA,OADF,UAAS,8CAGT,OAFE,UAAS,sEAGX,OADA,UAAU,wCAAwC,IAAG,cAKvB,OAJ9B,UAAU,gCAAgC,gCAA+B,uHAKrE,OAD0B,UAAU,IAAI,CAAC,OAAM,mBAK/C,OAJA,UACE,AAAC,2BAAqD,OAA3B,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,OAAM,OACtD,IACH,kBAEC,OADA,MAAM,AAAC,uBAA6C,OAAvB,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,OAAM,OAAK,IAAG,kBAOxD,OANJ,UAAU,AAAC,4BAA8C,OAAnB,QAAQ,IAAI,CAAC,OAAM,OAAK,IAAG,oRAY7D,OANA,UACD,+IAGD,IACH,sBAgBC,OAfI,MACD,kLAID,IACH,kQAyBC,OAhBA,UACG,8NAMA,qCACJ,mRAsBA,OAdC,UACG,0TAQA,6JAKJ;AAIb;KA/EgB","debugId":null}},
    {"offset": {"line": 1995, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/php.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\n    export function PHPGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n        return `<?php\n    /**\n     * ${meshName} geometry definition for PHP-GLFW\n     */\n    class ${meshName}Geometry {\n        private $vao;\n        private $vbo;\n        ${indices ? \"private $ebo;\" : \"\"}\n        private $vertexCount;\n        public function __construct() {\n            $this->setupBuffers();\n        }\n        private function setupBuffers() {\n            // Position data\n            $positions = ${formatArrayData(positions, languageId)};\n            ${normals\n          ? `$normals = ${formatArrayData(normals || [], languageId)};`\n          : \"\"\n        }\n            ${uvs ? `$uvs = ${formatArrayData(uvs || [], languageId)};` : \"\"}\n            ${indices ? `$indices = array(${indices.join(\", \")});` : \"\"}\n            \n            $this->vao = glfwCreateVertexArray();\n            $this->vbo = glfwCreateBuffer();\n            ${indices ? \"$this->ebo = glfwCreateBuffer();\" : \"\"}\n            \n            glfwBindVertexArray($this->vao);\n            // Position buffer\n            glfwBindBuffer(GLFW_ARRAY_BUFFER, $this->vbo);\n            glfwBufferData(GLFW_ARRAY_BUFFER, count($positions) * 4, $positions, GLFW_STATIC_DRAW);\n            glfwVertexAttribPointer(0, 3, GLFW_FLOAT, false, 3 * 4, 0);\n            glfwEnableVertexAttribArray(0);\n            ${normals\n          ? `// Normal buffer\n            glfwBufferData(GLFW_ARRAY_BUFFER, count($normals) * 4, $normals, GLFW_STATIC_DRAW);\n            glfwVertexAttribPointer(1, 3, GLFW_FLOAT, false, 3 * 4, 0);\n            glfwEnableVertexAttribArray(1);`\n          : \"\"\n        }\n            ${uvs\n          ? `// UV buffer\n            glfwBufferData(GLFW_ARRAY_BUFFER, count($uvs) * 4, $uvs, GLFW_STATIC_DRAW);\n            glfwVertexAttribPointer(2, 2, GLFW_FLOAT, false, 2 * 4, 0);\n            glfwEnableVertexAttribArray(2);`\n          : \"\"\n        }\n            ${indices\n          ? `// Element buffer\n            glfwBindBuffer(GLFW_ELEMENT_ARRAY_BUFFER, $this->ebo);\n            glfwBufferData(GLFW_ELEMENT_ARRAY_BUFFER, count($indices) * 4, $indices, GLFW_STATIC_DRAW);\n            $this->vertexCount = count($indices);`\n          : `$this->vertexCount = count($positions) / 3;`\n        }\n            glfwBindVertexArray(0);\n        }\n        public function render() {\n            glfwBindVertexArray($this->vao);\n            ${indices\n          ? \"glfwDrawElements(GLFW_TRIANGLES, $this->vertexCount, GLFW_UNSIGNED_INT, 0);\"\n          : \"glfwDrawArrays(GLFW_TRIANGLES, 0, $this->vertexCount);\"\n        }\n            glfwBindVertexArray(0);\n        }\n    }\n    `;}"],"names":[],"mappings":";;;AAAA;;AAEW,SAAS,YAAY,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IACzF,OAAO,AAAC,0BAIJ,OAFH,UAAS,0DAKR,OAHE,UAAS,sEAUM,OAPjB,UAAU,kBAAkB,IAAG,+NAQ3B,OADa,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,mBAKpD,OAJA,UACF,AAAC,cAAwD,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,aAAY,OACzD,IACH,kBAEK,OADA,MAAM,AAAC,UAAgD,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,aAAY,OAAK,IAAG,kBAK/D,OAJA,UAAU,AAAC,oBAAsC,OAAnB,QAAQ,IAAI,CAAC,OAAM,QAAM,IAAG,iIAY1D,OARA,UAAU,qCAAqC,IAAG,qYAelD,OAPA,UACD,4OAID,IACH,kBAQK,OAPA,MACD,gOAID,IACH,kBAYK,OAXA,UACD,sPAIA,+CACJ,oJAQA,OAHK,UACF,gFACA,0DACH;AAIH;KAjEc","debugId":null}},
    {"offset": {"line": 2015, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/ruby.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\n   export function RubyGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `# ${meshName} geometry definition for Ruby OpenGL\n        class ${meshName}Geometry\n          def initialize\n            setup_buffers\n          end\n    \n          private\n    \n          def setup_buffers\n            # Position data\n            positions = ${formatArrayData(positions, languageId)}\n            ${normals\n              ? `normals = ${formatArrayData(normals || [], languageId)}`\n              : \"\"\n            }\n            ${uvs ? `uvs = ${formatArrayData(uvs || [], languageId)}` : \"\"}\n            ${indices ? `indices = [${indices.join(\", \")}]` : \"\"}\n    \n            @vao = glGenVertexArrays(1)[0]\n            @vbo = glGenBuffers(1)[0]\n            ${indices ? \"@ebo = glGenBuffers(1)[0]\" : \"\"}\n    \n            glBindVertexArray(@vao)\n    \n            # Position buffer\n            glBindBuffer(GL::ARRAY_BUFFER, @vbo)\n            glBufferData(GL::ARRAY_BUFFER, positions.pack('F*'), GL::STATIC_DRAW)\n            glVertexAttribPointer(0, 3, GL::FLOAT, false, 3 * 4, 0)\n            glEnableVertexAttribArray(0)\n    \n            ${normals\n              ? `# Normal buffer\n            glBufferData(GL::ARRAY_BUFFER, normals.pack('F*'), GL::STATIC_DRAW)\n            glVertexAttribPointer(1, 3, GL::FLOAT, false, 3 * 4, 0)\n            glEnableVertexAttribArray(1)`\n              : \"\"\n            }\n    \n            ${uvs\n              ? `# UV buffer\n            glBufferData(GL::ARRAY_BUFFER, uvs.pack('F*'), GL::STATIC_DRAW)\n            glVertexAttribPointer(2, 2, GL::FLOAT, false, 2 * 4, 0)\n            glEnableVertexAttribArray(2)`\n              : \"\"\n            }\n    \n            ${indices\n              ? `# Element buffer\n            glBindBuffer(GL::ELEMENT_ARRAY_BUFFER, @ebo)\n            glBufferData(GL::ELEMENT_ARRAY_BUFFER, indices.pack('I*'), GL::STATIC_DRAW)\n            @vertex_count = indices.length`\n              : \"@vertex_count = positions.length / 3\"\n            }\n    \n            glBindVertexArray(0)\n          end\n    \n          public\n    \n          def render\n            glBindVertexArray(@vao)\n            ${indices\n              ? \"glDrawElements(GL::TRIANGLES, @vertex_count, GL::UNSIGNED_INT, nil)\"\n              : \"glDrawArrays(GL::TRIANGLES, 0, @vertex_count)\"\n            }\n            glBindVertexArray(0)\n          end\n        end\n        `;\n   }"],"names":[],"mappings":";;;AAAA;;AAEU,SAAS,aAAa,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IAC7F,OAAO,AAAC,KACI,OADA,UAAS,wDAUC,OATV,UAAS,mMAUX,OADY,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,kBAKnD,OAJA,UACE,AAAC,aAAuD,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,eAC5C,IACH,kBAEC,OADA,MAAM,AAAC,SAA+C,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,eAAgB,IAAG,kBAK7D,OAJA,UAAU,AAAC,cAAgC,OAAnB,QAAQ,IAAI,CAAC,OAAM,OAAK,IAAG,2GAcnD,OAVA,UAAU,8BAA8B,IAAG,4VAkB3C,OARA,UACG,oNAID,IACH,wBAUC,OARA,MACG,4MAID,IACH,wBAiBC,OAfA,UACG,oNAID,wCACH,kKAYA,OAHC,UACE,wEACA,iDACH;AAKV;KAtEgB","debugId":null}},
    {"offset": {"line": 2035, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/scala.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function ScalaGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `import org.lwjgl.opengl.GL30._\n        import org.lwjgl.system.MemoryUtil._\n        /**\n         * ${meshName} geometry definition for LWJGL in Scala\n         */\n        class ${meshName}Geometry {\n          private var vao: Int = _\n          private var vbo: Int = _\n          ${indices ? \"private var ebo: Int = _\" : \"\"}\n          private var vertexCount: Int = _\n          \n          setupBuffers()\n          \n          private def setupBuffers(): Unit = {\n            // Position data\n            val positions = ${formatArrayData(positions, languageId)}\n            ${normals\n              ? `val normals = ${formatArrayData(normals || [], languageId)}`\n              : \"\"\n            }\n            ${uvs ? `val uvs = ${formatArrayData(uvs || [], languageId)}` : \"\"}\n            ${indices ? `val indices = Array(${indices.join(\", \")})` : \"\"}\n            \n            vao = glGenVertexArrays()\n            vbo = glGenBuffers()\n            ${indices ? \"ebo = glGenBuffers()\" : \"\"}\n            \n            glBindVertexArray(vao)\n            // Position buffer\n            glBindBuffer(GL_ARRAY_BUFFER, vbo)\n            glBufferData(GL_ARRAY_BUFFER, positions, GL_STATIC_DRAW)\n            glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * 4, 0)\n            glEnableVertexAttribArray(0)\n            ${normals\n              ? `// Normal buffer\n            glBufferData(GL_ARRAY_BUFFER, normals, GL_STATIC_DRAW)\n            glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * 4, 0)\n            glEnableVertexAttribArray(1)`\n              : \"\"\n            }\n            ${uvs\n              ? `// UV buffer\n            glBufferData(GL_ARRAY_BUFFER, uvs, GL_STATIC_DRAW)\n            glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * 4, 0)\n            glEnableVertexAttribArray(2)`\n              : \"\"\n            }\n            ${indices\n              ? `// Element buffer\n            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo)\n            glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW)\n            vertexCount = indices.length`\n              : \"vertexCount = positions.length / 3\"\n            }\n            glBindVertexArray(0)\n          }\n          \n          def render(): Unit = {\n            glBindVertexArray(vao)\n            ${indices\n              ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0L)\"\n              : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount)\"\n            }\n            glBindVertexArray(0)\n          }\n        }\n        `;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,cAAc,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IAC3F,OAAO,AAAC,yGAKI,OAFH,UAAS,wEAKV,OAHI,UAAS,kGAUK,OAPlB,UAAU,6BAA6B,IAAG,8MAQxC,OADgB,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,kBAKvD,OAJA,UACE,AAAC,iBAA2D,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,eAChD,IACH,kBAEC,OADA,MAAM,AAAC,aAAmD,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,eAAgB,IAAG,kBAKjE,OAJA,UAAU,AAAC,uBAAyC,OAAnB,QAAQ,IAAI,CAAC,OAAM,OAAK,IAAG,yGAY5D,OARA,UAAU,yBAAyB,IAAG,wUAetC,OAPA,UACG,uMAID,IACH,kBAQC,OAPA,MACG,+LAID,IACH,kBAaC,OAZA,UACG,oMAID,sCACH,mJASA,OAHC,UACE,mEACA,8CACH;AAKb;KApEgB","debugId":null}},
    {"offset": {"line": 2055, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/kotlin.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function KotlinGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n    return `import org.lwjgl.opengl.GL30.*\n        import org.lwjgl.system.MemoryUtil.*\n        /**\n         * ${meshName} geometry definition for LWJGL in Kotlin\n         */\n        class ${meshName}Geometry {\n            private var vao: Int = 0\n            private var vbo: Int = 0\n            ${indices ? \"private var ebo: Int = 0\" : \"\"}\n            private var vertexCount: Int = 0\n    \n            init {\n                setupBuffers()\n            }\n    \n            private fun setupBuffers() {\n                // Position data\n                val positions = ${formatArrayData(positions, languageId)}\n                ${normals\n              ? `val normals = ${formatArrayData(normals || [], languageId)}`\n              : \"\"\n            }\n                ${uvs ? `val uvs = ${formatArrayData(uvs || [], languageId)}` : \"\"}\n                ${indices ? `val indices = intArrayOf(${indices.join(\", \")})` : \"\"}\n    \n                vao = glGenVertexArrays()\n                vbo = glGenBuffers()\n                ${indices ? \"ebo = glGenBuffers()\" : \"\"}\n    \n                glBindVertexArray(vao)\n                // Position buffer\n                glBindBuffer(GL_ARRAY_BUFFER, vbo)\n                glBufferData(GL_ARRAY_BUFFER, positions, GL_STATIC_DRAW)\n                glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * 4, 0)\n                glEnableVertexAttribArray(0)\n                ${normals\n              ? `// Normal buffer\n                glBufferData(GL_ARRAY_BUFFER, normals, GL_STATIC_DRAW)\n                glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * 4, 0)\n                glEnableVertexAttribArray(1)`\n              : \"\"\n            }\n                ${uvs\n              ? `// UV buffer\n                glBufferData(GL_ARRAY_BUFFER, uvs, GL_STATIC_DRAW)\n                glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * 4, 0)\n                glEnableVertexAttribArray(2)`\n              : \"\"\n            }\n                ${indices\n              ? `// Element buffer\n                glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo)\n                glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW)\n                vertexCount = indices.size`\n              : \"vertexCount = positions.size / 3\"\n            }\n                glBindVertexArray(0)\n            }\n    \n            fun render() {\n                glBindVertexArray(vao)\n                ${indices\n              ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0L)\"\n              : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount)\"\n            }\n                glBindVertexArray(0)\n            }\n        }\n        `;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,eAAe,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IAC5F,OAAO,AAAC,yGAKI,OAFH,UAAS,yEAKR,OAHE,UAAS,wGAYS,OATpB,UAAU,6BAA6B,IAAG,+OAUtC,OADgB,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,sBAKvD,OAJA,UACF,AAAC,iBAA2D,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,eAChD,IACH,sBAEK,OADA,MAAM,AAAC,aAAmD,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,eAAgB,IAAG,sBAKjE,OAJA,UAAU,AAAC,4BAA8C,OAAnB,QAAQ,IAAI,CAAC,OAAM,OAAK,IAAG,6GAYjE,OARA,UAAU,yBAAyB,IAAG,4VAetC,OAPA,UACD,mNAID,IACH,sBAQK,OAPA,MACD,2MAID,IACH,sBAaK,OAZA,UACD,8MAID,oCACH,qJASA,OAHK,UACF,mEACA,8CACH;AAKb;KAtEgB","debugId":null}},
    {"offset": {"line": 2075, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/dart.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function DartGeometry(\n  meshName,\n  isLargeGeometry,\n  normals,\n  uvs,\n  indices,\n  positions,\n  languageId\n) {\n  return `import 'dart:ffi';\n    import 'package:ffi/ffi.dart';\n    import 'package:opengl/opengl.dart';\n    /**\n     * ${meshName} geometry definition for OpenGL in Dart\n     */\n    class ${meshName}Geometry {\n      int vao = 0;\n      int vbo = 0;\n      ${indices ? \"int ebo = 0;\" : \"\"}\n      int vertexCount = 0;\n\n      ${meshName}Geometry() {\n        setupBuffers();\n      }\n\n      void setupBuffers() {\n        // Position data\n        final positions = ${formatArrayData(positions, languageId)};\n        ${\n          normals\n            ? `final normals = ${formatArrayData(normals || [], languageId)};`\n            : \"\"\n        }\n        ${uvs ? `final uvs = ${formatArrayData(uvs || [], languageId)};` : \"\"}\n        ${indices ? `final indices = [${indices.join(\", \")}];` : \"\"}\n\n        vao = glGenVertexArrays();\n        vbo = glGenBuffers();\n        ${indices ? \"ebo = glGenBuffers();\" : \"\"}\n\n        glBindVertexArray(vao);\n        // Position buffer\n        glBindBuffer(GL_ARRAY_BUFFER, vbo);\n        glBufferData(GL_ARRAY_BUFFER, positions, GL_STATIC_DRAW);\n        glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * 4, 0);\n        glEnableVertexAttribArray(0);\n        ${\n          normals\n            ? `// Normal buffer\n        glBufferData(GL_ARRAY_BUFFER, normals, GL_STATIC_DRAW);\n        glVertexAttribPointer(1, 3, GL_FLOAT, false, 3 * 4, 0);\n        glEnableVertexAttribArray(1);`\n            : \"\"\n        }\n        ${\n          uvs\n            ? `// UV buffer\n        glBufferData(GL_ARRAY_BUFFER, uvs, GL_STATIC_DRAW);\n        glVertexAttribPointer(2, 2, GL_FLOAT, false, 2 * 4, 0);\n        glEnableVertexAttribArray(2);`\n            : \"\"\n        }\n        ${\n          indices\n            ? `// Element buffer\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW);\n        vertexCount = indices.length;`\n            : \"vertexCount = positions.length ~/ 3;\"\n        }\n        glBindVertexArray(0);\n      }\n\n      void render() {\n        glBindVertexArray(vao);\n        ${\n          indices\n            ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0);\"\n            : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount);\"\n        }\n        glBindVertexArray(0);\n      }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,aACd,QAAQ,EACR,eAAe,EACf,OAAO,EACP,GAAG,EACH,OAAO,EACP,SAAS,EACT,UAAU;IAEV,OAAO,AAAC,qHAME,OAFH,UAAS,gEAKV,OAHI,UAAS,8DAMb,OAHA,UAAU,iBAAiB,IAAG,0CASV,OANpB,UAAS,uIAQP,OAFkB,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,eAMzD,OAJA,UACI,AAAC,mBAA6D,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,aAAY,OAC9D,IACL,cAEC,OADA,MAAM,AAAC,eAAqD,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,aAAY,OAAK,IAAG,cAKpE,OAJA,UAAU,AAAC,oBAAsC,OAAnB,QAAQ,IAAI,CAAC,OAAM,QAAM,IAAG,mFAa1D,OATA,UAAU,0BAA0B,IAAG,qSAiBvC,OARA,UACK,8LAID,IACL,cAUC,OARA,MACK,sLAID,IACL,cAeC,OAbA,UACK,2LAID,wCACL,gHAUA,OAHC,UACI,mEACA,+CACL;AAKT;KApFgB","debugId":null}},
    {"offset": {"line": 2095, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/geometry/r.ts"],"sourcesContent":["import { formatArrayData } from \"@/lib/functions/formatArrayData\";\n\nexport function RGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId){\n        return `#' ${meshName} geometry definition for R OpenGL\n    #' @export\n    ${meshName}Geometry <- function() {\n      # Position data\n      positions <- ${formatArrayData(positions, languageId)}\n      ${normals\n          ? `normals <- ${formatArrayData(normals || [], languageId)}`\n          : \"\"\n        }\n      ${uvs ? `uvs <- ${formatArrayData(uvs || [], languageId)}` : \"\"}\n      ${indices ? `indices <- c(${indices.join(\", \")})` : \"\"}\n      \n      # Create buffers\n      vao <- glCreateVertexArrays(1)\n      vbo <- glCreateBuffers(1)\n      ${indices ? \"ebo <- glCreateBuffers(1)\" : \"\"}\n      \n      glBindVertexArray(vao)\n      # Position buffer\n      glBindBuffer(GL_ARRAY_BUFFER, vbo)\n      glBufferData(GL_ARRAY_BUFFER, positions, GL_STATIC_DRAW)\n      glVertexAttribPointer(0, 3, GL_FLOAT, FALSE, 3 * 4, 0)\n      glEnableVertexAttribArray(0)\n      ${normals\n          ? `# Normal buffer\n      glBufferData(GL_ARRAY_BUFFER, normals, GL_STATIC_DRAW)\n      glVertexAttribPointer(1, 3, GL_FLOAT, FALSE, 3 * 4, 0)\n      glEnableVertexAttribArray(1)`\n          : \"\"\n        }\n      ${uvs\n          ? `# UV buffer\n      glBufferData(GL_ARRAY_BUFFER, uvs, GL_STATIC_DRAW)\n      glVertexAttribPointer(2, 2, GL_FLOAT, FALSE, 2 * 4, 0)\n      glEnableVertexAttribArray(2)`\n          : \"\"\n        }\n      ${indices\n          ? `# Element buffer\n      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo)\n      glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW)\n      vertexCount <- length(indices)`\n          : \"vertexCount <- length(positions) / 3\"\n        }\n      glBindVertexArray(0)\n      \n      # Return geometry object\n      list(\n        vao = vao,\n        render = function() {\n          glBindVertexArray(vao)\n          ${indices\n          ? \"glDrawElements(GL_TRIANGLES, vertexCount, GL_UNSIGNED_INT, 0)\"\n          : \"glDrawArrays(GL_TRIANGLES, 0, vertexCount)\"\n        }\n          glBindVertexArray(0)\n        }\n      )\n    }\n    `;}"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,UAAU,QAAQ,EAAC,eAAe,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,SAAS,EAAC,UAAU;IACnF,OAAO,AAAC,MAEV,OAFe,UAAS,2DAIT,OAFf,UAAS,wEAGP,OADa,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,aAAY,YAKpD,OAJA,UACI,AAAC,cAAwD,OAA3C,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,EAAE,EAAE,eAC7C,IACH,YAED,OADA,MAAM,AAAC,UAAgD,OAAvC,CAAA,GAAA,sIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE,EAAE,eAAgB,IAAG,YAM9D,OALA,UAAU,AAAC,gBAAkC,OAAnB,QAAQ,IAAI,CAAC,OAAM,OAAK,IAAG,mHAarD,OARA,UAAU,8BAA8B,IAAG,uRAe3C,OAPA,UACK,oLAID,IACH,YAQD,OAPA,MACK,4KAID,IACH,YAeG,OAdJ,UACK,mLAID,wCACH,sLAWA,OAHG,UACA,kEACA,8CACH;AAKH;KA5DU","debugId":null}},
    {"offset": {"line": 2115, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/generator/generateGeometryFile.tsx"],"sourcesContent":["import { LanguageId } from '@/types/constant';\nimport * as THREE from 'three'\nimport { TypescriptGeometry } from '@/templates/geometry/typescript';\nimport { JavascriptGeometry } from '@/templates/geometry/javascript';\nimport { PythonGeometry } from '@/templates/geometry/python';\nimport { JavaGeometry } from '@/templates/geometry/java';\nimport { CSharpGeometry } from '@/templates/geometry/csharp';\nimport { CPPGeometry } from '@/templates/geometry/cpp';\nimport { GoGeometry } from '@/templates/geometry/go';\nimport { RustGeometry } from '@/templates/geometry/rust';\nimport { SwiftGeometry } from '@/templates/geometry/swift';\nimport { PHPGeometry } from '@/templates/geometry/php';\nimport { RubyGeometry } from '@/templates/geometry/ruby';\nimport { ScalaGeometry } from '@/templates/geometry/scala';\nimport { KotlinGeometry } from '@/templates/geometry/kotlin';\nimport { DartGeometry } from '@/templates/geometry/dart';\nimport { RGeometry } from '@/templates/geometry/r';\n\nexport default function generateGeometryFile(\n  meshName: string,\n  geometry: THREE.BufferGeometry,\n  languageId: LanguageId\n): string {\n  const positions = Array.from(geometry.attributes.position.array);\n  const normals = geometry.attributes.normal\n    ? Array.from(geometry.attributes.normal.array)\n    : null;\n  const uvs = geometry.attributes.uv\n    ? Array.from(geometry.attributes.uv.array)\n    : null;\n  const indices = geometry.index ? Array.from(geometry.index.array) : null;\n\n  const isLargeGeometry = positions.length > 100000;\n\n  switch (languageId) {\n    case \"typescript\":\n      return TypescriptGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"javascript\":\n      return JavascriptGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"python\":\n      return PythonGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"java\":\n      return JavaGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"csharp\":\n      return CSharpGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"cpp\":\n      return CPPGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"go\":\n      return GoGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"rust\":\n      return RustGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n\n    case \"swift\":\n      return SwiftGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"php\":\n      return PHPGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"ruby\":\n      return RubyGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"scala\":\n      return ScalaGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"kotlin\":\n      return KotlinGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"dart\":\n      return DartGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    case \"r\":\n      return RGeometry(meshName,isLargeGeometry,normals,uvs,indices,positions,languageId);\n    default:\n      return generateGeometryFile(meshName, geometry, \"typescript\");\n  }\n}"],"names":[],"mappings":";;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAEe,SAAS,qBACtB,QAAgB,EAChB,QAA8B,EAC9B,UAAsB;IAEtB,MAAM,YAAY,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK;IAC/D,MAAM,UAAU,SAAS,UAAU,CAAC,MAAM,GACtC,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,MAAM,CAAC,KAAK,IAC3C;IACJ,MAAM,MAAM,SAAS,UAAU,CAAC,EAAE,GAC9B,MAAM,IAAI,CAAC,SAAS,UAAU,CAAC,EAAE,CAAC,KAAK,IACvC;IACJ,MAAM,UAAU,SAAS,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,KAAK,CAAC,KAAK,IAAI;IAEpE,MAAM,kBAAkB,UAAU,MAAM,GAAG;IAE3C,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QACnF,KAAK;YACH,OAAO,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QACnF,KAAK;YACH,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC/E,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC7E,KAAK;YACH,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC/E,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC5E,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC3E,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAE7E,KAAK;YACH,OAAO,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC9E,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC5E,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC7E,KAAK;YACH,OAAO,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC9E,KAAK;YACH,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC/E,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC7E,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE,UAAS,iBAAgB,SAAQ,KAAI,SAAQ,WAAU;QAC1E;YACE,OAAO,qBAAqB,UAAU,UAAU;IACpD;AACF","debugId":null}},
    {"offset": {"line": 2198, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/cpp.ts"],"sourcesContent":["export function CPPIndex(meshes, materials, componentName){\n    return `#pragma once\n#include <vector>\n#include <memory>\n${meshes.map((mesh) => `#include \"meshes/${mesh.name}.h\"`).join(\"\\n\")}\n${materials\n          .map((material) => `#include \"materials/${material.name}.h\"`)\n          .join(\"\\n\")}\n\n/**\n * ${componentName} main component for OpenGL\n */\nclass ${componentName} {\nprivate:\n    ${meshes\n          .map(\n            (mesh, i) => `std::unique_ptr<${mesh.name}> ${mesh.name.toLowerCase()};`\n          )\n          .join(\"\\n    \")}\n    \npublic:\n    ${componentName}() {\n        setupMeshes();\n    }\n    \n    ~${componentName}() {\n        cleanup();\n    }\n    \nprivate:\n    void setupMeshes() {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} = std::make_unique<${mesh.name\n              }>(std::make_unique<${material.name}>());`;\n          })\n          .join(\"\\n        \")}\n    }\n    \npublic:\n    void render() {\n        ${meshes\n          .map(\n            (mesh) =>\n              `if (${mesh.name.toLowerCase()}) ${mesh.name.toLowerCase()}->render();`\n          )\n          .join(\"\\n        \")}\n    }\n    \n    void cleanup() {\n        ${meshes\n          .map((mesh) => `${mesh.name.toLowerCase()}.reset();`)\n          .join(\"\\n        \")}\n    }\n};\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,SAAS,MAAM,EAAE,SAAS,EAAE,aAAa;IACrD,OAAO,AAAC,uDAIV,OADA,OAAO,GAAG,CAAC,CAAC,OAAS,AAAC,oBAA6B,OAAV,KAAK,IAAI,EAAC,QAAM,IAAI,CAAC,OAAM,MAMjE,OALH,UACS,GAAG,CAAC,CAAC,WAAa,AAAC,uBAAoC,OAAd,SAAS,IAAI,EAAC,QACvD,IAAI,CAAC,OAAM,gBAKd,OAFH,eAAc,2CAIb,OAFE,eAAc,sBAShB,OAPA,OACK,GAAG,CACF,CAAC,MAAM,IAAM,AAAC,mBAAgC,OAAd,KAAK,IAAI,EAAC,MAA4B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,MAEvE,IAAI,CAAC,WAAU,yBAOnB,OAJD,eAAc,oDAUV,OANH,eAAc,uFAiBX,OAXA,OACC,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,GAAgD,OAA9C,KAAK,IAAI,CAAC,WAAW,IAAG,wBACV,OADgC,KAAK,IAAI,EAC9D,uBAAmC,OAAd,SAAS,IAAI,EAAC;IACxC,GACC,IAAI,CAAC,eAAc,yDAcpB,OATA,OACC,GAAG,CACF,CAAC,OACC,AAAC,OAAkC,OAA5B,KAAK,IAAI,CAAC,WAAW,IAAG,MAA4B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,gBAE9D,IAAI,CAAC,eAAc,iDAMA,OAFpB,OACC,GAAG,CAAC,CAAC,OAAS,AAAC,GAA0B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,cACzC,IAAI,CAAC,eAAc;AAI9B;KAzDgB","debugId":null}},
    {"offset": {"line": 2219, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/csharp.ts"],"sourcesContent":["export function CSharpIndex(meshes,materials, componentName){\n    return `using System;\nusing System.Collections.Generic;\n${meshes.map((mesh) => `using Meshes;`).join(\"\\n\")}\n${materials.map((material) => `using Materials;`).join(\"\\n\")}\n\n/// <summary>\n/// ${componentName} main component for OpenTK\n/// </summary>\npublic class ${componentName} : IDisposable\n{\n    ${meshes\n          .map((mesh, i) => `private ${mesh.name} _${mesh.name.toLowerCase()};`)\n          .join(\"\\n    \")}\n    \n    public ${componentName}()\n    {\n        SetupMeshes();\n    }\n    \n    private void SetupMeshes()\n    {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `_${mesh.name.toLowerCase()} = new ${mesh.name}(new ${material.name\n              }());`;\n          })\n          .join(\"\\n        \")}\n    }\n    \n    public void Render()\n    {\n        ${meshes\n          .map((mesh) => `_${mesh.name.toLowerCase()}.Render();`)\n          .join(\"\\n        \")}\n    }\n    \n    public void Dispose()\n    {\n        ${meshes\n          .map((mesh) => `_${mesh.name.toLowerCase()}?.Dispose();`)\n          .join(\"\\n        \")}\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,YAAY,MAAM,EAAC,SAAS,EAAE,aAAa;IACvD,OAAO,AAAC,qDAGV,OADA,OAAO,GAAG,CAAC,CAAC,OAAU,iBAAgB,IAAI,CAAC,OAAM,MAI7C,OAHJ,UAAU,GAAG,CAAC,CAAC,WAAc,oBAAmB,IAAI,CAAC,OAAM,2BAK9C,OAFT,eAAc,6DAId,OAFS,eAAc,2BAMhB,OAJP,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,AAAC,WAAwB,OAAd,KAAK,IAAI,EAAC,MAA4B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,MAClE,IAAI,CAAC,WAAU,uBAShB,OAPG,eAAc,mGAkBjB,OAXA,OACC,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,IAAoC,OAAjC,KAAK,IAAI,CAAC,WAAW,IAAG,WAA0B,OAAjB,KAAK,IAAI,EAAC,SACnD,OAD0D,SAAS,IAAI,EACvE;IACL,GACC,IAAI,CAAC,eAAc,4DAYpB,OAPA,OACC,GAAG,CAAC,CAAC,OAAS,AAAC,IAA2B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,eAC1C,IAAI,CAAC,eAAc,6DAOA,OAFpB,OACC,GAAG,CAAC,CAAC,OAAS,AAAC,IAA2B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,iBAC1C,IAAI,CAAC,eAAc;AAI9B;KA9CgB","debugId":null}},
    {"offset": {"line": 2240, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/dart.ts"],"sourcesContent":["export function DartIndex(\n  componentName, meshes,materials\n) {\n  return `/**\n    * ${componentName} main component for OpenGL in Dart\n    */\n    class ${componentName} {\n      ${meshes\n          .map((mesh, i) => `final ${mesh.name} ${mesh.name.toLowerCase()};`)\n          .join(\"\\n  \")}\n\n      ${componentName}() {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} = ${mesh.name}(material: ${material.name}());`\n            ;\n          })\n          .join(\"\\n    \")}\n      }\n\n      void render() {\n        ${meshes\n          .map((mesh) => \"${mesh.name.toLowerCase()}.render();\")\n          .join(\"\\n    \")}\n      }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,UACd,aAAa,EAAE,MAAM,EAAC,SAAS;IAE/B,OAAO,AAAC,cAGE,OAFJ,eAAc,0DAGd,OADI,eAAc,cAKlB,OAJA,OACG,GAAG,CAAC,CAAC,MAAM,IAAM,AAAC,SAAqB,OAAb,KAAK,IAAI,EAAC,KAA2B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,MAC/D,IAAI,CAAC,SAAQ,cAGd,OADF,eAAc,kBAWZ,OAVA,OACC,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,GAA+B,OAA7B,KAAK,IAAI,CAAC,WAAW,IAAG,OAA4B,OAAvB,KAAK,IAAI,EAAC,eAA2B,OAAd,SAAS,IAAI,EAAC;IAE9E,GACC,IAAI,CAAC,WAAU,gDAMA,OAFhB,OACC,GAAG,CAAC,CAAC,OAAS,wCACd,IAAI,CAAC,WAAU;AAI1B;KA5BgB","debugId":null}},
    {"offset": {"line": 2261, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/go.ts"],"sourcesContent":["export function GoIndex(meshes, materials, componentName){\n    return `package main\n\n${meshes.map((mesh) => `import \"./meshes\"`).join(\"\\n\")}\n${materials.map((material) => `import \"./materials\"`).join(\"\\n\")}\n\n// ${componentName} represents the main 3D component\ntype ${componentName} struct {\n    ${meshes\n          .map((mesh, i) => `${mesh.name.toLowerCase()} *meshes.${mesh.name}`)\n          .join(\"\\n    \")}\n}\n\n// New${componentName} creates a new ${componentName} instance\nfunc New${componentName}() *${componentName} {\n    component := &${componentName}{}\n    component.setupMeshes()\n    return component\n}\n\nfunc (c *${componentName}) setupMeshes() {\n    ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `c.${mesh.name.toLowerCase()} = meshes.New${mesh.name\n              }(materials.New${material.name}())`;\n          })\n          .join(\"\\n    \")}\n}\n\n// Render renders all meshes in the component\nfunc (c *${componentName}) Render() {\n    ${meshes\n          .map(\n            (mesh) => `if c.${mesh.name.toLowerCase()} != nil {\n        c.${mesh.name.toLowerCase()}.Render()\n    }`\n          )\n          .join(\"\\n    \")}\n}\n\n// Cleanup cleans up all resources\nfunc (c *${componentName}) Cleanup() {\n    ${meshes\n          .map(\n            (mesh) => `if c.${mesh.name.toLowerCase()} != nil {\n        c.${mesh.name.toLowerCase()}.Cleanup()\n    }`\n          )\n          .join(\"\\n    \")}\n}\n`;\n\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,QAAQ,MAAM,EAAE,SAAS,EAAE,aAAa;IACpD,OAAO,AAAC,mBAGV,OADA,OAAO,GAAG,CAAC,CAAC,OAAU,qBAAoB,IAAI,CAAC,OAAM,MAGlD,OAFH,UAAU,GAAG,CAAC,CAAC,WAAc,wBAAuB,IAAI,CAAC,OAAM,WAG1D,OADF,eAAc,4CAEb,OADC,eAAc,mBAMb,OALF,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,AAAC,GAAqC,OAAnC,KAAK,IAAI,CAAC,WAAW,IAAG,aAAqB,OAAV,KAAK,IAAI,GAChE,IAAI,CAAC,WAAU,iBAGa,OAA/B,eAAc,mBACZ,OAD6B,eAAc,uBACvB,OAApB,eAAc,QACJ,OADU,eAAc,0BAMjC,OALS,eAAc,yEAM5B,OADK,eAAc,2BAWd,OAVL,OACK,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,KAA2C,OAAvC,KAAK,IAAI,CAAC,WAAW,IAAG,iBACjB,OADgC,KAAK,IAAI,EACzD,kBAA8B,OAAd,SAAS,IAAI,EAAC;IACnC,GACC,IAAI,CAAC,WAAU,mEAKpB,OADK,eAAc,sBAWd,OAVL,OACK,GAAG,CACF,CAAC,OAAS,AAAC,QACX,OADkB,KAAK,IAAI,CAAC,WAAW,IAAG,yBAClB,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,qBAGzB,IAAI,CAAC,WAAU,wDAKpB,OADK,eAAc,uBAOC,OANpB,OACK,GAAG,CACF,CAAC,OAAS,AAAC,QACX,OADkB,KAAK,IAAI,CAAC,WAAW,IAAG,yBAClB,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,sBAGzB,IAAI,CAAC,WAAU;AAI1B;KArDgB","debugId":null}},
    {"offset": {"line": 2282, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/java.ts"],"sourcesContent":["export function JavaIndex(componentName,meshes,materials){\n    return `/**\n * ${componentName} main component for LWJGL OpenGL\n */\n${meshes.map((mesh) => `import meshes.${mesh.name};`).join(\"\\n\")}\n${materials.map((material) => `import materials.${material.name};`).join(\"\\n\")}\n\npublic class ${componentName} {\n    ${meshes\n          .map((mesh, i) => `private ${mesh.name} ${mesh.name.toLowerCase()};`)\n          .join(\"\\n    \")}\n    \n    public ${componentName}() {\n        setupMeshes();\n    }\n    \n    private void setupMeshes() {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} = new ${mesh.name}(new ${material.name\n              }());`;\n          })\n          .join(\"\\n        \")}\n    }\n    \n    public void render() {\n        ${meshes\n          .map((mesh) => `${mesh.name.toLowerCase()}.render();`)\n          .join(\"\\n        \")}\n    }\n    \n    public void cleanup() {\n        ${meshes\n          .map((mesh) => `${mesh.name.toLowerCase()}.cleanup();`)\n          .join(\"\\n        \")}\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,UAAU,aAAa,EAAC,MAAM,EAAC,SAAS;IACpD,OAAO,AAAC,WAGV,OAFG,eAAc,2CAGjB,OADA,OAAO,GAAG,CAAC,CAAC,OAAS,AAAC,iBAA0B,OAAV,KAAK,IAAI,EAAC,MAAI,IAAI,CAAC,OAAM,MAGlD,OAFb,UAAU,GAAG,CAAC,CAAC,WAAa,AAAC,oBAAiC,OAAd,SAAS,IAAI,EAAC,MAAI,IAAI,CAAC,OAAM,qBAGzE,OADS,eAAc,YAKhB,OAJP,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,AAAC,WAAuB,OAAb,KAAK,IAAI,EAAC,KAA2B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,MACjE,IAAI,CAAC,WAAU,uBAOhB,OALG,eAAc,yFAejB,OAVA,OACC,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,GAAmC,OAAjC,KAAK,IAAI,CAAC,WAAW,IAAG,WAA0B,OAAjB,KAAK,IAAI,EAAC,SAClD,OADyD,SAAS,IAAI,EACtE;IACL,GACC,IAAI,CAAC,eAAc,uDAUpB,OANA,OACC,GAAG,CAAC,CAAC,OAAS,AAAC,GAA0B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,eACzC,IAAI,CAAC,eAAc,wDAMA,OAFpB,OACC,GAAG,CAAC,CAAC,OAAS,AAAC,GAA0B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,gBACzC,IAAI,CAAC,eAAc;AAI9B;KAvCgB","debugId":null}},
    {"offset": {"line": 2303, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/javascript.ts"],"sourcesContent":["export function JavascriptIndex(meshes,materials,componentName){\n    {\n       const meshImportsJS = meshes\n        .map((mesh) => `import ${mesh.name} from './meshes/${mesh.name}';`)\n        .join(\"\\n\");\n      const materialImportsJS = materials\n        .map(\n          (material) =>\n            `import ${material.name} from './materials/${material.name}';`\n        )\n        .join(\"\\n\");\n      const meshElementsJS = meshes\n        .map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `      <${mesh.name} material={${material.name}()} />`;\n        })\n        .join(\"\\n\");\n      return `import React, { useRef } from 'react';\n    import { Group } from '@react-three/fiber';\n    ${meshImportsJS}\n    ${materialImportsJS}\n    /**\n     * ${componentName} component\n     */\n    export default function ${componentName}(props) {\n      const ref = useRef(null);\n      return (\n        <group ref={ref} {...props}>\n    ${meshElementsJS}\n        </group>\n      );\n    }\n    `;\n    }\n}"],"names":[],"mappings":";;;AAAO,SAAS,gBAAgB,MAAM,EAAC,SAAS,EAAC,aAAa;IAC1D;QACG,MAAM,gBAAgB,OACpB,GAAG,CAAC,CAAC,OAAS,AAAC,UAAqC,OAA5B,KAAK,IAAI,EAAC,oBAA4B,OAAV,KAAK,IAAI,EAAC,OAC9D,IAAI,CAAC;QACR,MAAM,oBAAoB,UACvB,GAAG,CACF,CAAC,WACC,AAAC,UAA4C,OAAnC,SAAS,IAAI,EAAC,uBAAmC,OAAd,SAAS,IAAI,EAAC,OAE9D,IAAI,CAAC;QACR,MAAM,iBAAiB,OACpB,GAAG,CAAC,CAAC,MAAM;YACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;YAChD,OAAO,AAAC,UAAgC,OAAvB,KAAK,IAAI,EAAC,eAA2B,OAAd,SAAS,IAAI,EAAC;QACxD,GACC,IAAI,CAAC;QACR,OAAO,AAAC,gGAGR,OADA,eAAc,UAGX,OAFH,mBAAkB,sBAIM,OAFrB,eAAc,qDAMjB,OAJwB,eAAc,0GAIvB,OAAf,gBAAe;IAKjB;AACJ;KAlCgB","debugId":null}},
    {"offset": {"line": 2329, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/kotlin.ts"],"sourcesContent":["export function KotlinIndex(componentName,meshes){\n    return `/**\n      * ${componentName} main component for LWJGL in Kotlin\n      */\n      class ${componentName} {\n          ${meshes\n          .map(\n            (mesh, i) =>\n              `private val ${mesh.name.toLowerCase()} = ${mesh.name}()`\n          )\n          .join(\"\\n    \")}\n\n          fun render() {\n              ${meshes\n          .map((mesh) => \"${mesh.name.toLowerCase()}.render()\")\n          .join(\"\\n        \")}\n          }\n      }\n      `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,YAAY,aAAa,EAAC,MAAM;IAC5C,OAAO,AAAC,gBAGE,OAFJ,eAAc,+DAGZ,OADE,eAAc,kBASZ,OARJ,OACD,GAAG,CACF,CAAC,MAAM,IACL,AAAC,eAA2C,OAA7B,KAAK,IAAI,CAAC,WAAW,IAAG,OAAe,OAAV,KAAK,IAAI,EAAC,OAEzD,IAAI,CAAC,WAAU,gDAKI,OAFd,OACL,GAAG,CAAC,CAAC,OAAS,uCACd,IAAI,CAAC,eAAc;AAI9B;KAnBgB","debugId":null}},
    {"offset": {"line": 2347, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/php.ts"],"sourcesContent":["\n    export function PHPIndex(componentName, meshes, materials){\n        return `<?php\n    /**\n     * ${componentName} main component for PHP-GLFW\n     */\n    class ${componentName} {\n        ${meshes\n          .map((mesh, i) => `private $${mesh.name.toLowerCase()};`)\n          .join(\"\\n    \")}\n        public function __construct() {\n            $this->setupMeshes();\n        }\n        private function setupMeshes() {\n            ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `$this->${mesh.name.toLowerCase()} = new ${mesh.name\n              }(new ${material.name}());`;\n          })\n          .join(\"\\n        \")}\n        }\n        public function render() {\n            ${meshes\n          .map((mesh) => `$this->${mesh.name.toLowerCase()}->render();`)\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n  }"],"names":[],"mappings":";;;AACW,SAAS,SAAS,aAAa,EAAE,MAAM,EAAE,SAAS;IACrD,OAAO,AAAC,0BAIJ,OAFH,eAAc,qDAGb,OADE,eAAc,gBAQZ,OAPJ,OACC,GAAG,CAAC,CAAC,MAAM,IAAM,AAAC,YAAmC,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,MACrD,IAAI,CAAC,WAAU,mJAcZ,OATA,OACH,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,UAA0C,OAAjC,KAAK,IAAI,CAAC,WAAW,IAAG,WAC/B,OADwC,KAAK,IAAI,EACxD,SAAqB,OAAd,SAAS,IAAI,EAAC;IAC1B,GACC,IAAI,CAAC,eAAc,iEAKA,OAFhB,OACH,GAAG,CAAC,CAAC,OAAS,AAAC,UAAiC,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,gBAChD,IAAI,CAAC,eAAc;AAI5B;KA5BkB","debugId":null}},
    {"offset": {"line": 2368, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/python.ts"],"sourcesContent":["export function PythonIndex(componentName, meshes, materials){\n    return `\"\"\"${componentName} main component for ModernGL\"\"\"\nimport moderngl\nimport numpy as np\nfrom typing import List, Optional\n${meshes\n          .map((mesh) => `from .meshes.${mesh.name} import ${mesh.name}`)\n          .join(\"\\n\")}\n${materials\n          .map((material) => `from .materials.${material.name} import ${material.name}`)\n          .join(\"\\n\")}\n\nclass ${componentName}:\n    \"\"\"${componentName} component for ModernGL\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context):\n        self.ctx = ctx\n        self.meshes: List = []\n        self._setup_meshes()\n        \n    def _setup_meshes(self):\n        \"\"\"Initialize all meshes with their materials\"\"\"\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `# Create ${mesh.name}\n        ${mesh.name.toLowerCase()}_material = ${material.name}(self.ctx)\n        ${mesh.name.toLowerCase()}_mesh = ${mesh.name\n              }(self.ctx, ${mesh.name.toLowerCase()}_material)\n        self.meshes.append(${mesh.name.toLowerCase()}_mesh)`;\n          })\n          .join(\"\\n        \")}\n    \n    def render(self, projection_matrix: np.ndarray, view_matrix: np.ndarray, model_matrix: Optional[np.ndarray] = None):\n        \"\"\"Render all meshes\"\"\"\n        if model_matrix is None:\n            model_matrix = np.eye(4, dtype=np.float32)\n            \n        for mesh in self.meshes:\n            mesh.render(projection_matrix, view_matrix)\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,YAAY,aAAa,EAAE,MAAM,EAAE,SAAS;IACxD,OAAO,AAAC,MAIV,OAJe,eAAc,6GAO7B,OAHA,OACS,GAAG,CAAC,CAAC,OAAS,AAAC,gBAAmC,OAApB,KAAK,IAAI,EAAC,YAAoB,OAAV,KAAK,IAAI,GAC3D,IAAI,CAAC,OAAM,MAKd,OAJN,UACS,GAAG,CAAC,CAAC,WAAa,AAAC,mBAA0C,OAAxB,SAAS,IAAI,EAAC,YAAwB,OAAd,SAAS,IAAI,GAC1E,IAAI,CAAC,OAAM,cAGb,OADD,eAAc,cAUZ,OATD,eAAc,sRAkBO,OATpB,OACC,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,YACV,OADqB,KAAK,IAAI,EAAC,cACO,OAAtC,KAAK,IAAI,CAAC,WAAW,IAAG,gBACxB,OADsC,SAAS,IAAI,EAAC,wBAClB,OAAlC,KAAK,IAAI,CAAC,WAAW,IAAG,YACN,OADgB,KAAK,IAAI,EACtC,eACc,OADD,KAAK,IAAI,CAAC,WAAW,IAAG,2CACC,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG;IAC3C,GACC,IAAI,CAAC,eAAc;AAU9B;KAzCgB","debugId":null}},
    {"offset": {"line": 2389, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/r.ts"],"sourcesContent":["export function RIndex(componentName,meshes, materials){\n        return `#' ${componentName} main component for R OpenGL\n    #' @export\n    ${componentName} <- function() {\n      # Create meshes\n      ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} <- ${mesh.name}(material = ${material.name\n              }())`;\n          })\n          .join(\"\\n  \")}\n      \n      # Return component\n      list(\n        ${meshes\n          .map(\n            (mesh) => `${mesh.name.toLowerCase()} = ${mesh.name.toLowerCase()}`\n          )\n          .join(\",\\n    \")}\n        render = function() {\n          ${meshes\n          .map((mesh) => `do.call(${mesh.name.toLowerCase()}$render, list())`)\n          .join(\"\\n      \")}\n        }\n      )\n    }\n    `;\n  }"],"names":[],"mappings":";;;AAAO,SAAS,OAAO,aAAa,EAAC,MAAM,EAAE,SAAS;IAC9C,OAAO,AAAC,MAEV,OAFe,eAAc,sDAI3B,OAFF,eAAc,mDAYV,OAVF,OACG,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,GAAgC,OAA9B,KAAK,IAAI,CAAC,WAAW,IAAG,QAA8B,OAAxB,KAAK,IAAI,EAAC,gBAC/C,OAD6D,SAAS,IAAI,EAC1E;IACL,GACC,IAAI,CAAC,SAAQ,6DAUZ,OANF,OACC,GAAG,CACF,CAAC,OAAS,AAAC,GAA+B,OAA7B,KAAK,IAAI,CAAC,WAAW,IAAG,OAA6B,OAAxB,KAAK,IAAI,CAAC,WAAW,KAEhE,IAAI,CAAC,YAAW,+CAIC,OAFhB,OACD,GAAG,CAAC,CAAC,OAAS,AAAC,WAAkC,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,qBACjD,IAAI,CAAC,aAAY;AAK1B;KA5Bc","debugId":null}},
    {"offset": {"line": 2410, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/ruby.ts"],"sourcesContent":["\n   export function RubyIndex(componentName, meshes, materials){\n    return `# ${componentName} main component for Ruby OpenGL\n    class ${componentName}\n      ${meshes\n          .map((mesh, i) => `attr_reader :${mesh.name.toLowerCase()}`)\n          .join(\"\\n  \")}\n      def initialize\n        setup_meshes\n      end\n      private\n      def setup_meshes\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return \"@#{mesh.name.toLowerCase()} = #{mesh.name}.new(#{material.name}.new)\";\n          })\n          .join(\"\\n    \")}\n      end\n      public\n      def render\n        ${meshes\n          .map((mesh) => \"@#{mesh.name.toLowerCase()}.render\")\n          .join(\"\\n    \")}\n      end\n    end\n    `;\n   }"],"names":[],"mappings":";;;AACU,SAAS,UAAU,aAAa,EAAE,MAAM,EAAE,SAAS;IACzD,OAAO,AAAC,KACA,OADI,eAAc,+CAEtB,OADI,eAAc,YAShB,OARF,OACG,GAAG,CAAC,CAAC,MAAM,IAAM,AAAC,gBAAuC,OAAxB,KAAK,IAAI,CAAC,WAAW,KACtD,IAAI,CAAC,SAAQ,4GAed,OATA,OACC,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO;IACT,GACC,IAAI,CAAC,WAAU,yDAMA,OAFhB,OACC,GAAG,CAAC,CAAC,OAAS,sCACd,IAAI,CAAC,WAAU;AAIvB;KA1BgB","debugId":null}},
    {"offset": {"line": 2431, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/rust.ts"],"sourcesContent":["export function RustIndex(meshes, materials, componentName){\n    return `${meshes\n        .map(\n          (mesh) =>\n            `use crate::meshes::${mesh.name.toLowerCase()}::${mesh.name};`\n        )\n        .join(\"\\n\")}\n${materials\n          .map(\n            (material) =>\n              `use crate::materials::${material.name.toLowerCase()}::${material.name};`\n          )\n          .join(\"\\n\")}\nuse wgpu::Device;\n\n/// ${componentName} main component for wgpu\npub struct ${componentName} {\n    ${meshes\n          .map((mesh, i) => `${mesh.name.toLowerCase()}: ${mesh.name},`)\n          .join(\"\\n    \")}\n}\n\nimpl ${componentName} {\n    pub fn new(device: &Device) -> Self {\n        Self {\n            ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()}: ${mesh.name}::new(device, ${material.name\n              }::new(device)),`;\n          })\n          .join(\"\\n            \")}\n        }\n    }\n    \n    pub fn render<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n        ${meshes\n          .map((mesh) => `self.${mesh.name.toLowerCase()}.render(render_pass);`)\n          .join(\"\\n        \")}\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,UAAU,MAAM,EAAE,SAAS,EAAE,aAAa;IACtD,OAAO,AAAC,GAMV,OANY,OACL,GAAG,CACF,CAAC,OACC,AAAC,sBAAiD,OAA5B,KAAK,IAAI,CAAC,WAAW,IAAG,MAAc,OAAV,KAAK,IAAI,EAAC,MAE/D,IAAI,CAAC,OAAM,MASd,OARJ,UACS,GAAG,CACF,CAAC,WACC,AAAC,yBAAwD,OAAhC,SAAS,IAAI,CAAC,WAAW,IAAG,MAAkB,OAAd,SAAS,IAAI,EAAC,MAE1E,IAAI,CAAC,OAAM,+BAIT,OADP,eAAc,yCAEd,OADO,eAAc,YAMpB,OALD,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,AAAC,GAA8B,OAA5B,KAAK,IAAI,CAAC,WAAW,IAAG,MAAc,OAAV,KAAK,IAAI,EAAC,MAC1D,IAAI,CAAC,WAAU,gBAMZ,OAHP,eAAc,+EAcX,OAXI,OACH,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,GAA8B,OAA5B,KAAK,IAAI,CAAC,WAAW,IAAG,MAA8B,OAA1B,KAAK,IAAI,EAAC,kBAC7C,OAD6D,SAAS,IAAI,EAC1E;IACL,GACC,IAAI,CAAC,mBAAkB,iHAOJ,OAFpB,OACC,GAAG,CAAC,CAAC,OAAS,AAAC,QAA+B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,0BAC9C,IAAI,CAAC,eAAc;AAI9B;KA1CgB","debugId":null}},
    {"offset": {"line": 2452, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/scala.ts"],"sourcesContent":["export function ScalaIndex(componentName,meshes){\n   return `/**\n    * ${componentName} main component for LWJGL in Scala\n    */\n    class ${componentName} {\n      ${meshes\n          .map(\n            (mesh, i) =>\n              `private val ${mesh.name.toLowerCase()} = new ${mesh.name}()`\n          )\n          .join(\"\\n  \")}\n      \n      def render(): Unit = {\n        ${meshes\n          .map((mesh) => \"${mesh.name.toLowerCase()}.render()\")\n          .join(\"\\n    \")}\n      }\n    }\n    `; \n}\n"],"names":[],"mappings":";;;AAAO,SAAS,WAAW,aAAa,EAAC,MAAM;IAC5C,OAAO,AAAC,cAGC,OAFJ,eAAc,0DAGd,OADI,eAAc,cAShB,OARF,OACG,GAAG,CACF,CAAC,MAAM,IACL,AAAC,eAA+C,OAAjC,KAAK,IAAI,CAAC,WAAW,IAAG,WAAmB,OAAV,KAAK,IAAI,EAAC,OAE7D,IAAI,CAAC,SAAQ,oDAKE,OAFhB,OACC,GAAG,CAAC,CAAC,OAAS,uCACd,IAAI,CAAC,WAAU;AAI1B;KAnBgB","debugId":null}},
    {"offset": {"line": 2470, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/swift.ts"],"sourcesContent":["export function SwiftIndex(meshes, materials, componentName){\n   return `import Metal\n${meshes.map((mesh) => `import Meshes`).join(\"\\n\")}\n${materials.map((material) => `import Materials`).join(\"\\n\")}\n\n/// ${componentName} main component for Metal\nclass ${componentName} {\n    ${meshes\n          .map((mesh, i) => `private let ${mesh.name.toLowerCase()}: ${mesh.name}`)\n          .join(\"\\n    \")}\n    \n    init(device: MTLDevice) {\n        ${meshes\n          .map((mesh, i) => {\n            const material = materials[i % materials.length];\n            return `${mesh.name.toLowerCase()} = ${mesh.name\n              }(device: device, material: ${material.name}(device: device))`;\n          })\n          .join(\"\\n        \")}\n    }\n    \n    func render(renderEncoder: MTLRenderCommandEncoder) {\n        ${meshes\n          .map(\n            (mesh) =>\n              `${mesh.name.toLowerCase()}.render(renderEncoder: renderEncoder)`\n          )\n          .join(\"\\n        \")}\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,WAAW,MAAM,EAAE,SAAS,EAAE,aAAa;IACxD,OAAO,AAAC,iBAET,OADA,OAAO,GAAG,CAAC,CAAC,OAAU,iBAAgB,IAAI,CAAC,OAAM,MAG7C,OAFJ,UAAU,GAAG,CAAC,CAAC,WAAc,oBAAmB,IAAI,CAAC,OAAM,YAGrD,OADF,eAAc,qCAEd,OADE,eAAc,YAMZ,OALJ,OACK,GAAG,CAAC,CAAC,MAAM,IAAM,AAAC,eAA0C,OAA5B,KAAK,IAAI,CAAC,WAAW,IAAG,MAAc,OAAV,KAAK,IAAI,GACrE,IAAI,CAAC,WAAU,mDAahB,OAVA,OACC,GAAG,CAAC,CAAC,MAAM;QACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;QAChD,OAAO,AAAC,GAA+B,OAA7B,KAAK,IAAI,CAAC,WAAW,IAAG,OACF,OADO,KAAK,IAAI,EAC7C,+BAA2C,OAAd,SAAS,IAAI,EAAC;IAChD,GACC,IAAI,CAAC,eAAc,sFASA,OALpB,OACC,GAAG,CACF,CAAC,OACC,AAAC,GAA0B,OAAxB,KAAK,IAAI,CAAC,WAAW,IAAG,0CAE9B,IAAI,CAAC,eAAc;AAI9B;KA/BgB","debugId":null}},
    {"offset": {"line": 2491, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/index/typescript.ts"],"sourcesContent":["export function TypescriptIndex(meshes,materials,componentName,){\n   {const meshImports = meshes\n        .map((mesh) => `import ${mesh.name} from './meshes/${mesh.name}';`)\n        .join(\"\\n\");\n      const materialImports = materials\n        .map(\n          (material) =>\n            `import ${material.name} from './materials/${material.name}';`\n        )\n        .join(\"\\n\");\n\n      const meshElements = meshes\n        .map((mesh, i) => {\n          const material = materials[i % materials.length];\n          return `      <${mesh.name} material={${material.name}()} />`;\n        })\n        .join(\"\\n\");\n\n      return `import React, { useRef } from 'react';\nimport type { GroupProps } from '@react-three/fiber';\nimport * as THREE from 'three';\n${meshImports}\n${materialImports}\n\ninterface ${componentName}Props extends GroupProps {\n  [key: string]: any;\n}\n\n/**\n * ${componentName} component\n * Main component that assembles all mesh and material parts\n */\nexport default function ${componentName}(props: ${componentName}Props) {\n  const ref = useRef<THREE.Group>(null);\n  \n  return (\n    <group ref={ref} {...props}>\n${meshElements}\n    </group>\n  );\n}\n`;}\n}"],"names":[],"mappings":";;;AAAO,SAAS,gBAAgB,MAAM,EAAC,SAAS,EAAC,aAAa;IAC3D;QAAC,MAAM,cAAc,OACf,GAAG,CAAC,CAAC,OAAS,AAAC,UAAqC,OAA5B,KAAK,IAAI,EAAC,oBAA4B,OAAV,KAAK,IAAI,EAAC,OAC9D,IAAI,CAAC;QACR,MAAM,kBAAkB,UACrB,GAAG,CACF,CAAC,WACC,AAAC,UAA4C,OAAnC,SAAS,IAAI,EAAC,uBAAmC,OAAd,SAAS,IAAI,EAAC,OAE9D,IAAI,CAAC;QAER,MAAM,eAAe,OAClB,GAAG,CAAC,CAAC,MAAM;YACV,MAAM,WAAW,SAAS,CAAC,IAAI,UAAU,MAAM,CAAC;YAChD,OAAO,AAAC,UAAgC,OAAvB,KAAK,IAAI,EAAC,eAA2B,OAAd,SAAS,IAAI,EAAC;QACxD,GACC,IAAI,CAAC;QAER,OAAO,AAAC,mIAIZ,OADA,aAAY,MAGF,OAFV,iBAAgB,kBAOb,OALO,eAAc,oEAQA,OAHrB,eAAc,2GAG+B,OAAxB,eAAc,YAKtC,OALgD,eAAc,0GAKjD,OAAb,cAAa;IAIb;AACF;KA1CgB","debugId":null}},
    {"offset": {"line": 2517, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/generator/generateIndexComponent.tsx"],"sourcesContent":["import { CPPIndex } from \"@/templates/index/cpp\";\nimport { CSharpIndex } from \"@/templates/index/csharp\";\nimport { DartIndex } from \"@/templates/index/dart\";\nimport { GoIndex } from \"@/templates/index/go\";\nimport { JavaIndex } from \"@/templates/index/java\";\nimport { JavascriptIndex } from \"@/templates/index/javascript\";\nimport { KotlinIndex } from \"@/templates/index/kotlin\";\nimport { PHPIndex } from \"@/templates/index/php\";\nimport { PythonIndex } from \"@/templates/index/python\";\nimport { RIndex } from \"@/templates/index/r\";\nimport { RubyIndex } from \"@/templates/index/ruby\";\nimport { RustIndex } from \"@/templates/index/rust\";\nimport { ScalaIndex } from \"@/templates/index/scala\";\nimport { SwiftIndex } from \"@/templates/index/swift\";\nimport { TypescriptIndex } from \"@/templates/index/typescript\";\nimport { LanguageId, LANGUAGES } from \"@/types/constant\";\nimport { MaterialData, MeshData } from \"@/types/glb-convertor\";\n\nexport default function generateIndexComponent(\n  componentName: string,\n  meshes: MeshData[],\n  materials: MaterialData[],\n  displayMode: string,\n  languageId: LanguageId\n): string {\n  const lang = LANGUAGES[languageId];\n\n  switch (languageId) {\n    case \"typescript\":\n      return TypescriptIndex(meshes,materials, componentName);\n    case \"javascript\":\n      return JavascriptIndex(meshes, materials, componentName);\n    case \"python\":\n      return PythonIndex(componentName,meshes,materials);\n    case \"java\":\n      return JavaIndex(componentName, meshes, materials);\n    case \"csharp\":\n      return CSharpIndex(meshes, materials, componentName);\n    case \"cpp\":\n      return CPPIndex(meshes, materials,componentName);\n    case \"go\":\n      return GoIndex(meshes, materials, componentName);\n    case \"rust\":\n      return RustIndex(meshes, materials, componentName);\n    case \"swift\":\n      return SwiftIndex(meshes, materials, componentName);\n    case \"php\":\n      return PHPIndex(componentName,meshes,materials);\n    case \"ruby\":\n      return RubyIndex(componentName, meshes, materials);\n    case \"scala\":\n      return ScalaIndex(componentName,meshes);\n    case \"kotlin\":\n      return KotlinIndex(componentName,meshes);\n    case \"dart\":\n      return DartIndex(componentName,meshes,materials);\n    case \"r\":\n      return RIndex(componentName, meshes, materials);\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateIndexComponent(\n        componentName,\n        meshes,\n        materials,\n        displayMode,\n        \"typescript\"\n      );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAGe,SAAS,uBACtB,aAAqB,EACrB,MAAkB,EAClB,SAAyB,EACzB,WAAmB,EACnB,UAAsB;IAEtB,MAAM,OAAO,oHAAA,CAAA,YAAS,CAAC,WAAW;IAElC,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,mIAAA,CAAA,kBAAe,AAAD,EAAE,QAAO,WAAW;QAC3C,KAAK;YACH,OAAO,CAAA,GAAA,mIAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ,WAAW;QAC5C,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE,eAAc,QAAO;QAC1C,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE,eAAe,QAAQ;QAC1C,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE,QAAQ,WAAW;QACxC,KAAK;YACH,OAAO,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,WAAU;QACpC,KAAK;YACH,OAAO,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,WAAW;QACpC,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE,QAAQ,WAAW;QACtC,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE,QAAQ,WAAW;QACvC,KAAK;YACH,OAAO,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD,EAAE,eAAc,QAAO;QACvC,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE,eAAe,QAAQ;QAC1C,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE,eAAc;QAClC,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE,eAAc;QACnC,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE,eAAc,QAAO;QACxC,KAAK;YACH,OAAO,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD,EAAE,eAAe,QAAQ;QACvC;YACE,mDAAmD;YACnD,OAAO,uBACL,eACA,QACA,WACA,aACA;IAEN;AACF","debugId":null}},
    {"offset": {"line": 2599, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/typescript.ts"],"sourcesContent":["export function TypescriptMaterial(materialName,materialType,properties){\n    return `import * as THREE from 'three';\n\n/**\n * ${materialName} material component\n */\nexport default function ${materialName}(): THREE.Material {\n  return new THREE.${materialType}({\n    ${properties.join(\",\\n    \")}\n  });\n}\n`;\n}"],"names":[],"mappings":";;;AAAO,SAAS,mBAAmB,YAAY,EAAC,YAAY,EAAC,UAAU;IACnE,OAAO,AAAC,8CAKc,OAFrB,cAAa,sDAGG,OADK,cAAa,6CAEjC,OADe,cAAa,YACD,OAA3B,WAAW,IAAI,CAAC,YAAW;AAIjC;KAZgB","debugId":null}},
    {"offset": {"line": 2617, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/javascript.ts"],"sourcesContent":["export function JavascriptMaterial(materialName,materialType,properties){\n    return `import * as THREE from 'three';\n    /**\n     * ${materialName} material component\n     */\n    export default function ${materialName}() {\n      return new THREE.${materialType}({\n        ${properties.join(\",\")}\n      });\n    }\n    `;\n}"],"names":[],"mappings":";;;AAAO,SAAS,mBAAmB,YAAY,EAAC,YAAY,EAAC,UAAU;IACnE,OAAO,AAAC,oDAIkB,OAFrB,cAAa,8DAGG,OADK,cAAa,iCAEjC,OADe,cAAa,gBACP,OAArB,WAAW,IAAI,CAAC,MAAK;AAI/B;KAXgB","debugId":null}},
    {"offset": {"line": 2635, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/python.ts"],"sourcesContent":["export function PythonMaterial(materialName, hasNormals, hasUvs, displayMode){\n    return `\"\"\"${materialName} material for ModernGL\"\"\"\nimport moderngl\nimport numpy as np\n\nclass ${materialName}:\n    \"\"\"${materialName} material for ModernGL\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context):\n        self.ctx = ctx\n        self.program = self._create_shader_program()\n        \n    def _create_shader_program(self) -> moderngl.Program:\n        vertex_shader = '''\n        #version 330 core\n        in vec3 in_position;\n        ${hasNormals ? \"in vec3 in_normal;\" : \"\"}\n        ${hasUvs ? \"in vec2 in_uv;\" : \"\"}\n        \n        uniform mat4 projection;\n        uniform mat4 view;\n        uniform mat4 model;\n        \n        out vec3 v_position;\n        ${hasNormals ? \"out vec3 v_normal;\" : \"\"}\n        ${hasUvs ? \"out vec2 v_uv;\" : \"\"}\n        \n        void main() {\n            v_position = in_position;\n            ${hasNormals ? \"v_normal = in_normal;\" : \"\"}\n            ${hasUvs ? \"v_uv = in_uv;\" : \"\"}\n            gl_Position = projection * view * model * vec4(in_position, 1.0);\n        }\n        '''\n        \n        fragment_shader = '''\n        #version 330 core\n        in vec3 v_position;\n        ${hasNormals ? \"in vec3 v_normal;\" : \"\"}\n        ${hasUvs ? \"in vec2 v_uv;\" : \"\"}\n        \n        out vec4 fragColor;\n        \n        void main() {\n            ${displayMode === \"wireframe\"\n          ? \"fragColor = vec4(0.0, 0.0, 0.0, 0.8);\"\n          : displayMode === \"normals\"\n            ? \"fragColor = vec4(normalize(v_normal) * 0.5 + 0.5, 1.0);\"\n            : displayMode === \"points\"\n              ? \"fragColor = vec4(0.0, 1.0, 0.0, 1.0);\"\n              : \"fragColor = vec4(0.5, 0.5, 0.5, 1.0);\"\n        }\n        }\n        '''\n        \n        return self.ctx.program(vertex_shader=vertex_shader, fragment_shader=fragment_shader)\n    \n    def use(self):\n        \"\"\"Activate this material for rendering\"\"\"\n        self.program.use()\n        \n    def set_matrix(self, name: str, matrix: np.ndarray):\n        \"\"\"Set a matrix uniform\"\"\"\n        if name in self.program:\n            self.program[name].write(matrix.astype(np.float32).tobytes())\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,eAAe,YAAY,EAAE,UAAU,EAAE,MAAM,EAAE,WAAW;IACxE,OAAO,AAAC,MAIJ,OAJS,cAAa,4EAKrB,OADD,cAAa,cAWX,OAVD,cAAa,yUAWZ,OADA,aAAa,uBAAuB,IAAG,cAQvC,OAPA,SAAS,mBAAmB,IAAG,2JAQ/B,OADA,aAAa,uBAAuB,IAAG,cAKnC,OAJJ,SAAS,mBAAmB,IAAG,0FAK3B,OADA,aAAa,0BAA0B,IAAG,kBAS9C,OARI,SAAS,kBAAkB,IAAG,sNASlC,OADA,aAAa,sBAAsB,IAAG,cAMlC,OALJ,SAAS,kBAAkB,IAAG,0FAY/B,OAPK,gBAAgB,cAClB,0CACA,gBAAgB,YACd,4DACA,gBAAgB,WACd,0CACA,yCACP;AAeT;KAlEgB","debugId":null}},
    {"offset": {"line": 2653, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/php.ts"],"sourcesContent":["export function PHPMaterial(materialName, properties){\n    return `<?php\n    /**\n     * ${materialName} material component for PHP-GLFW\n     */\n    class ${materialName} {\n        public function __construct() {\n            // Material setup\n        }\n        public function use() {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `glfw${key.charAt(0).toUpperCase() + key.slice(1)\n              }(${value});`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n  }"],"names":[],"mappings":";;;AAAO,SAAS,YAAY,YAAY,EAAE,UAAU;IAChD,OAAO,AAAC,0BAIA,OAFH,cAAa,yDAQR,OANF,cAAa,kLAYK,OANhB,WACH,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,OACF,OADQ,IAAI,MAAM,CAAC,GAAG,WAAW,KAAK,IAAI,KAAK,CAAC,IACnD,KAAS,OAAN,OAAM;IACd,GACC,IAAI,CAAC,eAAc;AAI5B;KArBc","debugId":null}},
    {"offset": {"line": 2674, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/ruby.ts"],"sourcesContent":["\nexport function RubyMaterial(materialName, properties){\n    return `# ${materialName} material component for Ruby OpenGL\n    class ${materialName}\n      def initialize\n        # Material setup\n      end\n      def use\n        # Apply material properties\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `gl${key.charAt(0).toUpperCase() + key.slice(1)}(${value})`;\n          })\n          .join(\"\\n    \")}\n      end\n    end\n    `;\n   }"],"names":[],"mappings":";;;AACO,SAAS,aAAa,YAAY,EAAE,UAAU;IACjD,OAAO,AAAC,KACA,OADI,cAAa,mDAOnB,OANE,cAAa,6HAWC,OALhB,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,KAAkD,OAA9C,IAAI,MAAM,CAAC,GAAG,WAAW,KAAK,IAAI,KAAK,CAAC,IAAG,KAAS,OAAN,OAAM;IAClE,GACC,IAAI,CAAC,WAAU;AAIvB;KAjBa","debugId":null}},
    {"offset": {"line": 2695, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/scala.ts"],"sourcesContent":["export function ScalaMaterial(materialName, properties){\n  return `/**\n    * ${materialName} material component for LWJGL in Scala\n    */\n    class ${materialName} {\n      ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `private val ${key} = ${value}`;\n          })\n          .join(\"\\n  \")}\n      \n      def use(): Unit = {\n        // Apply material properties\n        ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n    \")}\n      }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,cAAc,YAAY,EAAE,UAAU;IACpD,OAAO,AAAC,cAGE,OAFJ,cAAa,8DAGb,OADI,cAAa,cAUf,OATF,WACG,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,eAAuB,OAAT,KAAI,OAAW,OAAN;IACjC,GACC,IAAI,CAAC,SAAQ,uFASE,OALhB,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;QACzB,OAAO,AAAC,UAAa,OAAJ,KAAI;IACvB,GACC,IAAI,CAAC,WAAU;AAI1B;KAvBgB","debugId":null}},
    {"offset": {"line": 2719, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/kotlin.ts"],"sourcesContent":["export function KotlinMaterial(materialName,properties){\n  return `/**\n    * ${materialName} material component for LWJGL in Kotlin\n    */\n    class ${materialName} {\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `private val ${key} = ${value}`;\n          })\n          .join(\"\\n    \")}\n\n        fun use() {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,eAAe,YAAY,EAAC,UAAU;IACpD,OAAO,AAAC,cAGE,OAFJ,cAAa,+DAGX,OADE,cAAa,gBAUX,OATJ,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,eAAuB,OAAT,KAAI,OAAW,OAAN;IACjC,GACC,IAAI,CAAC,WAAU,mFASI,OALhB,WACH,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;QACzB,OAAO,AAAC,UAAa,OAAJ,KAAI;IACvB,GACC,IAAI,CAAC,eAAc;AAI9B;KAvBgB","debugId":null}},
    {"offset": {"line": 2743, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/dart.ts"],"sourcesContent":["export function DartMaterial(materialName, properties) {\n return `/**\n    * ${materialName} material component for OpenGL in Dart\n    */\n    class ${materialName} implements Material {\n      ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return \"final $key = $value;\";\n          })\n          .join(\"\\n  \")}\n\n      @override\n      void use() {\n        // Apply material properties\n        ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return \"// Set $key property\";\n          })\n          .join(\"\\n    \")}\n      }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,aAAa,YAAY,EAAE,UAAU;IACpD,OAAO,AAAC,cAGG,OAFJ,cAAa,8DAGb,OADI,cAAa,kCAWf,OAVF,WACG,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO;IACT,GACC,IAAI,CAAC,SAAQ,2FAUE,OALhB,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;QACzB,OAAO;IACT,GACC,IAAI,CAAC,WAAU;AAI1B;KAxBgB","debugId":null}},
    {"offset": {"line": 2767, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/r.ts"],"sourcesContent":["export function RMaterial(materialName, properties){\n  return `#' ${materialName} material component for R OpenGL\n    #' @export\n    ${materialName} <- function() {\n      list(\n        use = function() {\n          # Apply material properties\n          ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `# Set ${key} to ${value}`;\n          })\n          .join(\"\\n      \")}\n        }\n      )\n    }\n    `;\n}"],"names":[],"mappings":";;;AAAO,SAAS,UAAU,YAAY,EAAE,UAAU;IAChD,OAAO,AAAC,MAEJ,OAFS,cAAa,0DAMhB,OAJN,cAAa,gHASS,OALhB,WACD,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,SAAkB,OAAV,KAAI,QAAY,OAAN;IAC5B,GACC,IAAI,CAAC,aAAY;AAK5B;KAjBgB","debugId":null}},
    {"offset": {"line": 2788, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/cpp.ts"],"sourcesContent":["export function CPPMaterial(materialName, properties){\n    return `#pragma once\n        #include <GL/glew.h>\n    \n        /**\n         * ${materialName} material component for OpenGL\n         */\n        class ${materialName} {\n        private:\n            ${properties\n              .map((prop) => {\n                const [key, value] = prop.split(\": \");\n                return `float ${key};`;\n              })\n              .join(\"\\n    \")}\n        public:\n            ${materialName}() {\n                ${properties\n              .map((prop) => {\n                const [key, value] = prop.split(\": \");\n                return `${key} = ${value};`;\n              })\n              .join(\"\\n        \")}\n            }\n            \n            void use() {\n                // Apply material properties\n                ${properties\n              .map((prop) => {\n                const [key] = prop.split(\": \");\n                return `// Set ${key} property`;\n              })\n              .join(\"\\n        \")}\n            }\n        };\n        `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,YAAY,YAAY,EAAE,UAAU;IAChD,OAAO,AAAC,6EAMI,OAFH,cAAa,+DAIZ,OAFE,cAAa,sCASf,OAPA,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,SAAY,OAAJ,KAAI;IACtB,GACC,IAAI,CAAC,WAAU,mCAGZ,OADJ,cAAa,0BAWT,OAVA,WACH,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,GAAW,OAAT,KAAI,OAAW,OAAN,OAAM;IAC3B,GACC,IAAI,CAAC,eAAc,2HAUA,OALhB,WACH,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;QACzB,OAAO,AAAC,UAAa,OAAJ,KAAI;IACvB,GACC,IAAI,CAAC,eAAc;AAIlC;KApCgB","debugId":null}},
    {"offset": {"line": 2815, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/functions/capitalize.ts"],"sourcesContent":["export function capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}"],"names":[],"mappings":";;;AAAO,SAAS,WAAW,GAAW;IACpC,OAAO,IAAI,MAAM,CAAC,GAAG,WAAW,KAAK,IAAI,KAAK,CAAC;AACjD","debugId":null}},
    {"offset": {"line": 2830, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/go.ts"],"sourcesContent":["import { capitalize } from \"@/lib/functions/capitalize\";\n\nexport function GoMaterial(materialName, properties){\n    return `package materials\n\n    import \"github.com/go-gl/gl/v4.1-core/gl\"\n\n    // ${materialName} represents a material with properties\n    type ${materialName} struct {\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `${capitalize(key)} float32`;\n          })\n          .join(\"\\n    \")}\n    }\n\n    // New${materialName} creates a new material instance\n    func New${materialName}() *${materialName} {\n        return &${materialName}{\n            ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `${capitalize(key)}: ${value},`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n\n    // Use activates the material for rendering\n    func (m *${materialName}) Use() {\n        // Apply material properties\n        ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n    \")}\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,WAAW,YAAY,EAAE,UAAU;IAC/C,OAAO,AAAC,gFAKD,OADF,cAAa,qDAEZ,OADC,cAAa,uBASZ,OARF,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,GAAkB,OAAhB,CAAA,GAAA,iIAAA,CAAA,aAAU,AAAD,EAAE,MAAK;IAC5B,GACC,IAAI,CAAC,WAAU,yBAIZ,OADF,cAAa,kDACQ,OAAnB,cAAa,QACT,OADe,cAAa,wBAEhC,OADI,cAAa,mBAWhB,OAVD,WACH,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,GAAsB,OAApB,CAAA,GAAA,iIAAA,CAAA,aAAU,AAAD,EAAE,MAAK,MAAU,OAAN,OAAM;IACtC,GACC,IAAI,CAAC,eAAc,wFAOpB,OAFK,cAAa,6DAOF,OALhB,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;QACzB,OAAO,AAAC,UAAa,OAAJ,KAAI;IACvB,GACC,IAAI,CAAC,WAAU;AAG1B;KAtCgB","debugId":null}},
    {"offset": {"line": 2859, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/rust.ts"],"sourcesContent":["export function RustMaterial(materialName, properties){\n    return `/// ${materialName} material component for wgpu\n    pub struct ${materialName} {\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `pub ${key}: f32,`;\n          })\n          .join(\"\\n    \")}\n    }\n\n    impl ${materialName} {\n        pub fn new() -> Self {\n            Self {\n                ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `${key}: ${value},`;\n          })\n          .join(\"\\n            \")}\n            }\n        }\n        \n        pub fn bind<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,aAAa,YAAY,EAAE,UAAU;IACjD,OAAO,AAAC,OACK,OADC,cAAa,iDAErB,OADO,cAAa,gBASnB,OARD,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,OAAU,OAAJ,KAAI;IACpB,GACC,IAAI,CAAC,WAAU,wBAMR,OAHP,cAAa,4EAcV,OAXI,WACP,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,GAAU,OAAR,KAAI,MAAU,OAAN,OAAM;IAC1B,GACC,IAAI,CAAC,mBAAkB,6KAWJ,OALhB,WACH,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;QACzB,OAAO,AAAC,UAAa,OAAJ,KAAI;IACvB,GACC,IAAI,CAAC,eAAc;AAI9B;KAlCgB","debugId":null}},
    {"offset": {"line": 2886, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/swift.ts"],"sourcesContent":["export function SwiftMaterial(materialName,properties){\n   return `import Metal\n\n    /// ${materialName} material component for Metal\n    class ${materialName} {\n        ${properties\n          .map((prop) => {\n            const [key, value] = prop.split(\": \");\n            return `private var ${key}: Float = ${value}`;\n          })\n          .join(\"\\n    \")}\n        \n        init() {\n            // Material initialization\n        }\n        \n        func use(renderEncoder: MTLRenderCommandEncoder) {\n            // Apply material properties\n            ${properties\n          .map((prop) => {\n            const [key] = prop.split(\": \");\n            return `// Set ${key} property`;\n          })\n          .join(\"\\n        \")}\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,cAAc,YAAY,EAAC,UAAU;IAClD,OAAO,AAAC,2BAGC,OADF,cAAa,6CAEb,OADE,cAAa,gBAcX,OAbJ,WACC,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,KAAK,MAAM,GAAG,KAAK,KAAK,CAAC;QAChC,OAAO,AAAC,eAA8B,OAAhB,KAAI,cAAkB,OAAN;IACxC,GACC,IAAI,CAAC,WAAU,iNAaI,OALhB,WACH,GAAG,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC;QACzB,OAAO,AAAC,UAAa,OAAJ,KAAI;IACvB,GACC,IAAI,CAAC,eAAc;AAI9B;KA3BgB","debugId":null}},
    {"offset": {"line": 2910, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/java.ts"],"sourcesContent":["export function JavaMaterial(material, materialName,materialType,properties){\n    {\n  if (\"color\" in material)\n    properties.push(`color: new Color(${JSON.stringify(material.color)})`);\n  if (\"opacity\" in material)\n    properties.push(`opacity: ${material.opacity}`);\n  if (\"transparent\" in material)\n    properties.push(`transparent: ${(material as any).transparent}`);\n  \n  return `import threejs.Material;\n  \n  /**\n   * ${materialName} material component\n   */\n  public class ${materialName} {\n      public Material create() {\n          return new ${materialType}(\n              ${properties.join(\",\\n              \")}\n          );\n      }\n  }`;\n}\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,aAAa,QAAQ,EAAE,YAAY,EAAC,YAAY,EAAC,UAAU;IACvE;QACF,IAAI,WAAW,UACb,WAAW,IAAI,CAAC,AAAC,oBAAkD,OAA/B,KAAK,SAAS,CAAC,SAAS,KAAK,GAAE;QACrE,IAAI,aAAa,UACf,WAAW,IAAI,CAAC,AAAC,YAA4B,OAAjB,SAAS,OAAO;QAC9C,IAAI,iBAAiB,UACnB,WAAW,IAAI,CAAC,AAAC,gBAA6C,OAA9B,AAAC,SAAiB,WAAW;QAE/D,OAAO,AAAC,6CAKO,OAFV,cAAa,+CAIG,OAFN,cAAa,+DAGd,OADO,cAAa,qBACiB,OAArC,WAAW,IAAI,CAAC,sBAAqB;IAIrD;AACA;KAtBgB","debugId":null}},
    {"offset": {"line": 2933, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/material/csharp.ts"],"sourcesContent":["export function CSharpMaterial(material,properties,materialName,materialType){\n  {\n  if (\"color\" in material){\n    properties.push(`Color = new Color(${JSON.stringify(material.color)})`);}\n  if (\"opacity\" in material){\n    properties.push(`Opacity = ${material.opacity}`);}\n  if (\"transparent\" in material){\n    properties.push(`Transparent = ${(material as any).transparent}`);\n  }\n  return `using ThreeJs;\n  \n  /**\n   * ${materialName} material component\n   */\n  public class ${materialName}\n  {\n      public Material Create()\n      {\n          return new ${materialType}\n          {\n              ${properties.join(\",\\n              \")}\n          };\n      }\n  }`;\n}\n\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,eAAe,QAAQ,EAAC,UAAU,EAAC,YAAY,EAAC,YAAY;IAC1E;QACA,IAAI,WAAW,UAAS;YACtB,WAAW,IAAI,CAAC,AAAC,qBAAmD,OAA/B,KAAK,SAAS,CAAC,SAAS,KAAK,GAAE;QAAI;QAC1E,IAAI,aAAa,UAAS;YACxB,WAAW,IAAI,CAAC,AAAC,aAA6B,OAAjB,SAAS,OAAO;QAAI;QACnD,IAAI,iBAAiB,UAAS;YAC5B,WAAW,IAAI,CAAC,AAAC,iBAA8C,OAA9B,AAAC,SAAiB,WAAW;QAChE;QACA,OAAO,AAAC,mCAKO,OAFV,cAAa,+CAMG,OAJN,cAAa,yEAMd,OAFO,cAAa,iCAEiB,OAArC,WAAW,IAAI,CAAC,sBAAqB;IAIrD;AAEA;KA1BgB","debugId":null}},
    {"offset": {"line": 2962, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/generator/generateMaterialComponent.tsx"],"sourcesContent":["import { LanguageId } from '@/types/constant';\nimport * as THREE from 'three';\nimport { TypescriptMaterial } from '@/templates/material/typescript';\nimport { JavascriptMaterial } from '@/templates/material/javascript';\nimport { PythonMaterial } from '@/templates/material/python';\nimport { PHPMaterial } from '@/templates/material/php';\nimport { RubyMaterial } from '@/templates/material/ruby';\nimport { ScalaMaterial } from '@/templates/material/scala';\nimport { KotlinMaterial } from '@/templates/material/kotlin';\nimport { DartMaterial } from '@/templates/material/dart';\nimport { RMaterial } from '@/templates/material/r';\nimport { CPPMaterial } from '@/templates/material/cpp';\nimport { GoMaterial } from '@/templates/material/go';\nimport { RustMaterial } from '@/templates/material/rust';\nimport { SwiftMaterial } from '@/templates/material/swift';\nimport { JavaMaterial } from '@/templates/material/java';\nimport { CSharpMaterial } from '@/templates/material/csharp';\n\nexport default function generateMaterialComponent(\n  materialName: string,\n  material: THREE.Material,\n  displayMode: string,\n  languageId: LanguageId,\n  hasNormals: boolean = false,\n  hasUvs: boolean = false\n): string {\n  let materialType = \"MeshStandardMaterial\";\n  const properties: string[] = [];\n\n  // Determine material type\n  if (material instanceof THREE.MeshBasicMaterial)\n    materialType = \"MeshBasicMaterial\";\n  else if (material instanceof THREE.MeshPhongMaterial)\n    materialType = \"MeshPhongMaterial\";\n  else if (material instanceof THREE.MeshLambertMaterial)\n    materialType = \"MeshLambertMaterial\";\n  else if (material instanceof THREE.MeshNormalMaterial)\n    materialType = \"MeshNormalMaterial\";\n  else if (material instanceof THREE.MeshDepthMaterial)\n    materialType = \"MeshDepthMaterial\";\n  else if (material instanceof THREE.MeshMatcapMaterial)\n    materialType = \"MeshMatcapMaterial\";\n  else if (material instanceof THREE.MeshToonMaterial)\n    materialType = \"MeshToonMaterial\";\n  else if (material instanceof THREE.MeshPhysicalMaterial)\n    materialType = \"MeshPhysicalMaterial\";\n\n  // Configure properties based on display mode\n  switch (displayMode) {\n    case \"wireframe\":\n      properties.push(\"wireframe: true\", \"transparent: true\", \"opacity: 0.8\");\n      break;\n    case \"solid\":\n      properties.push(\"color: 0x888888\", \"metalness: 0.1\", \"roughness: 0.8\");\n      break;\n    case \"normals\":\n      materialType = \"MeshNormalMaterial\";\n      break;\n    case \"depth\":\n      materialType = \"MeshDepthMaterial\";\n      break;\n    case \"points\":\n      materialType = \"PointsMaterial\";\n      properties.push(\"color: 0x00ff00\", \"size: 0.01\", \"sizeAttenuation: true\");\n      break;\n    default:\n     if ('color' in material && material.color instanceof THREE.Color) {\n        const color = material.color as THREE.Color;\n        properties.push(\n          `color: new THREE.Color(${color.r}, ${color.g}, ${color.b})`\n        );\n      }\n      if (\"roughness\" in material)\n        properties.push(`roughness: ${(material as any).roughness}`);\n      if (\"metalness\" in material)\n        properties.push(`metalness: ${(material as any).metalness}`);\n      if (\"opacity\" in material)\n        properties.push(`opacity: ${(material as any).opacity}`);\n      if (\"transparent\" in material)\n        properties.push(`transparent: ${(material as any).transparent}`);\n      break;\n  }\n\n  switch (languageId) {\n    case \"typescript\":\n      return TypescriptMaterial(materialName,materialType,properties);\n    case \"javascript\":\n      return JavascriptMaterial(materialName,materialType,properties);\n    case \"python\":\n      return PythonMaterial(materialName,hasNormals, hasUvs,displayMode);\n    case \"php\":\n      return PHPMaterial(materialName, properties);\n    case \"ruby\":\n      return RubyMaterial(materialName, properties);\n    case \"scala\":\n      return ScalaMaterial(materialName,properties);\n    case \"kotlin\":\n      return KotlinMaterial(materialName, properties);\n    case \"dart\":\n      return DartMaterial(materialName, properties);\n    case \"r\":\n      return RMaterial(materialName, properties);\n    case \"cpp\":\n      return CPPMaterial(materialName, properties);\n    case \"go\":\n      return GoMaterial(materialName, properties);\n    case \"rust\":\n      return RustMaterial(materialName, properties);\n    case \"swift\":\n      return SwiftMaterial(materialName, properties);\n    case \"java\":\n      return JavaMaterial(material, materialName,materialType,properties);\n    case \"csharp\":\n      return CSharpMaterial(material,properties,materialName, materialType);\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateMaterialComponent(\n        materialName,\n        material,\n        displayMode,\n        \"typescript\",\n        hasNormals,\n        hasUvs\n      );\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEe,SAAS,0BACtB,YAAoB,EACpB,QAAwB,EACxB,WAAmB,EACnB,UAAsB;QACtB,aAAA,iEAAsB,OACtB,SAAA,iEAAkB;IAElB,IAAI,eAAe;IACnB,MAAM,aAAuB,EAAE;IAE/B,0BAA0B;IAC1B,IAAI,oBAAoB,kJAAA,CAAA,oBAAuB,EAC7C,eAAe;SACZ,IAAI,oBAAoB,kJAAA,CAAA,oBAAuB,EAClD,eAAe;SACZ,IAAI,oBAAoB,kJAAA,CAAA,sBAAyB,EACpD,eAAe;SACZ,IAAI,oBAAoB,kJAAA,CAAA,qBAAwB,EACnD,eAAe;SACZ,IAAI,oBAAoB,kJAAA,CAAA,oBAAuB,EAClD,eAAe;SACZ,IAAI,oBAAoB,kJAAA,CAAA,qBAAwB,EACnD,eAAe;SACZ,IAAI,oBAAoB,kJAAA,CAAA,mBAAsB,EACjD,eAAe;SACZ,IAAI,oBAAoB,kJAAA,CAAA,uBAA0B,EACrD,eAAe;IAEjB,6CAA6C;IAC7C,OAAQ;QACN,KAAK;YACH,WAAW,IAAI,CAAC,mBAAmB,qBAAqB;YACxD;QACF,KAAK;YACH,WAAW,IAAI,CAAC,mBAAmB,kBAAkB;YACrD;QACF,KAAK;YACH,eAAe;YACf;QACF,KAAK;YACH,eAAe;YACf;QACF,KAAK;YACH,eAAe;YACf,WAAW,IAAI,CAAC,mBAAmB,cAAc;YACjD;QACF;YACC,IAAI,WAAW,YAAY,SAAS,KAAK,YAAY,kJAAA,CAAA,QAAW,EAAE;gBAC/D,MAAM,QAAQ,SAAS,KAAK;gBAC5B,WAAW,IAAI,CACb,AAAC,0BAAqC,OAAZ,MAAM,CAAC,EAAC,MAAgB,OAAZ,MAAM,CAAC,EAAC,MAAY,OAAR,MAAM,CAAC,EAAC;YAE9D;YACA,IAAI,eAAe,UACjB,WAAW,IAAI,CAAC,AAAC,cAAyC,OAA5B,AAAC,SAAiB,SAAS;YAC3D,IAAI,eAAe,UACjB,WAAW,IAAI,CAAC,AAAC,cAAyC,OAA5B,AAAC,SAAiB,SAAS;YAC3D,IAAI,aAAa,UACf,WAAW,IAAI,CAAC,AAAC,YAAqC,OAA1B,AAAC,SAAiB,OAAO;YACvD,IAAI,iBAAiB,UACnB,WAAW,IAAI,CAAC,AAAC,gBAA6C,OAA9B,AAAC,SAAiB,WAAW;YAC/D;IACJ;IAEA,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE,cAAa,cAAa;QACtD,KAAK;YACH,OAAO,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE,cAAa,cAAa;QACtD,KAAK;YACH,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE,cAAa,YAAY,QAAO;QACxD,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE,cAAc;QACnC,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,cAAc;QACpC,KAAK;YACH,OAAO,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE,cAAa;QACpC,KAAK;YACH,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE,cAAc;QACtC,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,cAAc;QACpC,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QACjC,KAAK;YACH,OAAO,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE,cAAc;QACnC,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE,cAAc;QAClC,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,cAAc;QACpC,KAAK;YACH,OAAO,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE,cAAc;QACrC,KAAK;YACH,OAAO,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,UAAU,cAAa,cAAa;QAC1D,KAAK;YACH,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE,UAAS,YAAW,cAAc;QAC1D;YACE,mDAAmD;YACnD,OAAO,0BACL,cACA,UACA,aACA,cACA,YACA;IAEN;AACF","debugId":null}},
    {"offset": {"line": 3084, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/cpp.ts"],"sourcesContent":["export function CPPMesh(meshName){\n    return `#pragma once\n    #include \"geometry/${meshName}Geometry.h\"\n\n    /**\n     * ${meshName} mesh component for OpenGL with geometry\n     */\n    class ${meshName} {\n    private:\n        ${meshName}Geometry geometry;\n        Material* material;\n    public:\n        explicit ${meshName}(Material* mat = nullptr) : geometry(), material(mat) {}\n        \n        void render() {\n            if (material) {\n                material->use();\n            }\n            geometry.render();\n        }\n        \n        ${meshName}Geometry& getGeometry() {\n            return geometry;\n        }\n        \n        void setMaterial(Material* mat) {\n            material = mat;\n        }\n    };\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,QAAQ,QAAQ;IAC5B,OAAO,AAAC,wCAIH,OAHgB,UAAS,mCAKtB,OAFH,UAAS,iEAIR,OAFE,UAAS,8BAKF,OAHT,UAAS,mFAYT,OATS,UAAS,4OAST,OAAT,UAAS;AASnB;KA9BgB","debugId":null}},
    {"offset": {"line": 3102, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/csharp.ts"],"sourcesContent":["export function CSharpMesh(meshName){\n    return `using OpenTK.Graphics.OpenGL4;\n\n/// <summary>\n/// ${meshName} mesh component for OpenTK\n/// </summary>\npublic class ${meshName} : System.IDisposable\n{\n    private ${meshName}Geometry _geometry;\n    private Material _material;\n    \n    public ${meshName}(Material material = null)\n    {\n        _geometry = new ${meshName}Geometry();\n        _material = material;\n    }\n    \n    public void Render()\n    {\n        _material?.Use();\n        _geometry.Render();\n    }\n    \n    public void Dispose()\n    {\n        _geometry?.Dispose();\n    }\n    \n    public ${meshName}Geometry Geometry => _geometry;\n    \n    public Material Material\n    {\n        get => _material;\n        set => _material = value;\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,WAAW,QAAQ;IAC/B,OAAO,AAAC,wDAKG,OAFT,UAAS,6DAID,OAFC,UAAS,0CAKX,OAHC,UAAS,2EAKG,OAFb,UAAS,+DAiBT,OAfa,UAAS,4PAeb,OAAT,UAAS;AAStB;KArCgB","debugId":null}},
    {"offset": {"line": 3120, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/dart.ts"],"sourcesContent":["export function DartMesh(\n  meshName,\n) {\n  return `/**\n    * ${meshName} mesh component for OpenGL in Dart\n    */\n    class ${meshName} {\n      final ${meshName}Geometry geometry;\n      Material? material;\n\n      ${meshName}({this.material}) : geometry = ${meshName}Geometry();\n\n      void render() {\n        material?.use();\n        geometry.render();\n      }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,SACd,QAAQ;IAER,OAAO,AAAC,cAGE,OAFJ,UAAS,0DAGH,OADF,UAAS,oBAIb,OAHM,UAAS,2DAG2B,OAA1C,UAAS,mCAA0C,OAAT,UAAS;AAQ3D;KAlBgB","debugId":null}},
    {"offset": {"line": 3138, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/go.ts"],"sourcesContent":["export function GoMesh(meshName){\n      return `package meshes\n\nimport (\n    \"github.com/go-gl/gl/v4.1-core/gl\"\n    \"yourproject/geometry\"\n)\n\n// ${meshName} represents a mesh with geometry only\ntype ${meshName} struct {\n    geometry *geometry.${meshName}Geometry\n}\n\n// New${meshName} creates a new mesh instance\nfunc New${meshName}() *${meshName} {\n    return &${meshName}{\n        geometry: geometry.New${meshName}Geometry(),\n    }\n}\n\n// Render renders the mesh\nfunc (m *${meshName}) Render() {\n    m.geometry.Render()\n}\n\n// Cleanup releases OpenGL resources\nfunc (m *${meshName}) Cleanup() {\n    m.geometry.Cleanup()\n}\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,OAAO,QAAQ;IACzB,OAAO,AAAC,2GAQP,OADF,UAAS,gDAEW,OADlB,UAAS,sCAIR,OAHiB,UAAS,yBAIxB,OADF,UAAS,0CACQ,OAAf,UAAS,QACL,OADW,UAAS,oBAEF,OADlB,UAAS,qCAMZ,OALqB,UAAS,kEAU9B,OALA,UAAS,+FAKA,OAAT,UAAS;AAIpB;KA9BgB","debugId":null}},
    {"offset": {"line": 3156, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/java.ts"],"sourcesContent":["export function JavaMesh(meshName){\n    return `/**\n * ${meshName} mesh component for LWJGL OpenGL\n */\npublic class ${meshName} {\n    private ${meshName}Geometry geometry;\n    private Material material;\n    \n    public ${meshName}(Material material) {\n        this.geometry = new ${meshName}Geometry();\n        this.material = material;\n    }\n    \n    public void render() {\n        if (material != null) {\n            material.use();\n        }\n        geometry.render();\n    }\n    \n    public void cleanup() {\n        geometry.cleanup();\n    }\n    \n    public ${meshName}Geometry getGeometry() {\n        return geometry;\n    }\n    \n    public void setMaterial(Material material) {\n        this.material = material;\n    }\n}\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,SAAS,QAAQ;IAC7B,OAAO,AAAC,WAGG,OAFV,UAAS,wDAGA,OADC,UAAS,oBAIX,OAHC,UAAS,yEAIO,OADjB,UAAS,uDAgBT,OAfiB,UAAS,iSAejB,OAAT,UAAS;AAStB;KAjCgB","debugId":null}},
    {"offset": {"line": 3174, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/javascript.ts"],"sourcesContent":["export function JavascriptMesh(meshName){\n    return `import React from 'react';\n    import { ${meshName}Geometry } from '../geometries/${meshName}Geometry';\n    /**\n     * ${meshName} component\n     */\n    export default function ${meshName}(props) {\n      return <mesh geometry={${meshName}Geometry} {...props} />;\n    }\n    `;\n}"],"names":[],"mappings":";;;AAAO,SAAS,eAAe,QAAQ;IACnC,OAAO,AAAC,4CAC6C,OAA1C,UAAS,mCAEf,OAFgD,UAAS,gCAIpC,OAFrB,UAAS,qDAGa,OADD,UAAS,4CACC,OAAT,UAAS;AAGxC;KAVgB","debugId":null}},
    {"offset": {"line": 3192, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/kotlin.ts"],"sourcesContent":["export function KotlinMesh(meshName){\n      return `/**\n    * ${meshName} mesh component for LWJGL in Kotlin\n    */\n    class ${meshName}(private var material: Material? = null) {\n        private val geometry = ${meshName}Geometry()\n\n        fun render() {\n            material?.use()\n            geometry.render()\n        }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,WAAW,QAAQ;IAC7B,OAAO,AAAC,cAGF,OAFJ,UAAS,2DAGgB,OADrB,UAAS,+EACqB,OAAT,UAAS;AAQ1C;KAbgB","debugId":null}},
    {"offset": {"line": 3210, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/php.ts"],"sourcesContent":["\nexport function PHPMesh(meshName){\nreturn `<?php\n    /**\n     * ${meshName} mesh component for PHP-GLFW\n     */\n    class ${meshName} {\n        private $geometry;\n        private $material;\n        public function __construct($material = null) {\n            $this->geometry = new ${meshName}Geometry();\n            $this->material = $material;\n        }\n        public function render() {\n            if ($this->material) {\n                $this->material->use();\n            }\n            $this->geometry->render();\n        }\n    }\n    `;      \n}"],"names":[],"mappings":";;;AACO,SAAS,QAAQ,QAAQ;IAChC,OAAO,AAAC,0BAII,OAFH,UAAS,qDAMkB,OAJxB,UAAS,2JAIwB,OAAT,UAAS;AAW7C;KApBgB","debugId":null}},
    {"offset": {"line": 3228, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/python.ts"],"sourcesContent":["export function PythonMesh(meshName){\n  return `\"\"\"${meshName} mesh component for ModernGL\"\"\"\nimport moderngl\nfrom .${meshName}Geometry import ${meshName}Geometry\n\nclass ${meshName}:\n    \"\"\"${meshName} mesh for ModernGL rendering\"\"\"\n    \n    def __init__(self, ctx: moderngl.Context, material=None):\n        self.ctx = ctx\n        self.material = material\n        self.geometry = ${meshName}Geometry()\n        self.vao = None\n        \n    def setup_vao(self, program: moderngl.Program):\n        \"\"\"Setup vertex array object with the given shader program\"\"\"\n        self.vao = self.geometry.create_vao(self.ctx, program)\n    \n    def render(self, projection_matrix, view_matrix):\n        \"\"\"Render the mesh\"\"\"\n        if self.vao and self.material:\n            self.material.use()\n            # Set matrices if available\n            if hasattr(self.material, 'set_matrix'):\n                self.material.set_matrix('projection', projection_matrix)\n                self.material.set_matrix('view', view_matrix)\n            self.vao.render(moderngl.TRIANGLES)\n`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,WAAW,QAAQ;IACjC,OAAO,AAAC,MAEF,OAFO,UAAS,4DAEW,OAA3B,UAAS,oBAET,OAF2B,UAAS,sBAGnC,OADD,UAAS,cAMS,OALjB,UAAS,4LAKiB,OAAT,UAAS;AAiBnC;KA5BgB","debugId":null}},
    {"offset": {"line": 3246, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/r.ts"],"sourcesContent":["export function RMesh(meshName){\n              return `#' ${meshName} mesh component for R OpenGL\n    #' @export\n    ${meshName} <- function(material = NULL) {\n      geometry <- ${meshName}Geometry()\n      \n      list(\n        geometry = geometry,\n        material = material,\n        render = function() {\n          if (!is.null(material)) {\n            do.call(material$use, list())\n          }\n          do.call(geometry$render, list())\n        }\n      )\n    }\n    `;\n  }"],"names":[],"mappings":";;;AAAO,SAAS,MAAM,QAAQ;IAChB,OAAO,AAAC,MAEhB,OAFqB,UAAS,sDAGhB,OADd,UAAS,uDACc,OAAT,UAAS;AAc3B;KAlBc","debugId":null}},
    {"offset": {"line": 3264, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/ruby.ts"],"sourcesContent":["export function RubyMesh(meshName) {\n  return `# ${meshName} mesh component for Ruby OpenGL\n    class ${meshName}\n      def initialize(material = nil)\n        @geometry = ${meshName}Geometry.new\n        @material = material\n      end\n      def render\n        @material.use if @material\n        @geometry.render\n      end\n    end\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,SAAS,QAAQ;IAC/B,OAAO,AAAC,KACE,OADE,UAAS,+CAGD,OAFV,UAAS,gEAEU,OAAT,UAAS;AAS/B;KAbgB","debugId":null}},
    {"offset": {"line": 3282, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/rust.ts"],"sourcesContent":["export function RustMesh(meshName){\n    return `\n      use crate::geometry::${meshName}Geometry;\n      /// ${meshName} mesh component for wgpu\n      pub struct ${meshName} {\n          geometry: ${meshName}Geometry,\n      }\n\n      impl ${meshName} {\n          pub fn new(device: &wgpu::Device) -> Self {\n              Self {\n                  geometry: ${meshName}Geometry::new(device),\n              }\n          }\n          \n          pub fn render<'a>(&'a self, render_pass: &mut wgpu::RenderPass<'a>) {\n              self.geometry.render(render_pass);\n          }\n      }\n      `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,SAAS,QAAQ;IAC7B,OAAO,AAAC,gCAEA,OADiB,UAAS,yBAEnB,OADP,UAAS,+CAEC,OADH,UAAS,4BAIf,OAHS,UAAS,qCAMD,OAHjB,UAAS,iHAGiB,OAAT,UAAS;AASvC;KApBgB","debugId":null}},
    {"offset": {"line": 3300, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/scala.ts"],"sourcesContent":["export function ScalaMesh(meshName){\n    return `/**\n    * ${meshName} mesh component for LWJGL in Scala\n    */\n    class ${meshName}(material: Material = null) {\n      private val geometry = new ${meshName}Geometry()\n      \n      def render(): Unit = {\n        if (material != null) material.use()\n        geometry.render()\n      }\n    }\n    `;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,UAAU,QAAQ;IAC9B,OAAO,AAAC,cAGA,OAFJ,UAAS,0DAGkB,OADvB,UAAS,oEACuB,OAAT,UAAS;AAQ5C;KAbgB","debugId":null}},
    {"offset": {"line": 3318, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/swift.ts"],"sourcesContent":["export function SwiftMesh(meshName){\n  return `import Metal\n\n/// ${meshName} mesh component for Metal rendering\nclass ${meshName} {\n    private let geometry: ${meshName}Geometry\n    \n    init(device: MTLDevice) {\n        self.geometry = ${meshName}Geometry(device: device)\n    }\n    \n    func render(renderEncoder: MTLRenderCommandEncoder) {\n        geometry.render(renderEncoder: renderEncoder)\n    }\n}`;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,UAAU,QAAQ;IAChC,OAAO,AAAC,uBAGF,OADF,UAAS,+CAEa,OADpB,UAAS,kCAIS,OAHE,UAAS,2EAGF,OAAT,UAAS;AAOnC;KAfgB","debugId":null}},
    {"offset": {"line": 3336, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/templates/mesh/typescript.ts"],"sourcesContent":["export function TypescriptMesh(meshName){\n      return `import React from 'react';\nimport { ${meshName}Geometry } from '../geometries/${meshName}Geometry';\n\ninterface ${meshName}Props {\n  [key: string]: any;\n}\n\n/**\n * ${meshName} component\n * Simple wrapper that uses pre-defined geometry\n * Easy to modify without touching geometry data\n */\nexport default function ${meshName}(props: ${meshName}Props) {\n  return <mesh geometry={${meshName}Geometry} {...props} />;\n}\n`;\n}"],"names":[],"mappings":";;;AAAO,SAAS,eAAe,QAAQ;IACjC,OAAO,AAAC,wCACuC,OAA1C,UAAS,mCAER,OAFyC,UAAS,4BAOzD,OALO,UAAS,iDASK,OAJrB,UAAS,iJAI+B,OAAnB,UAAS,YACR,OADkB,UAAS,uCAClB,OAAT,UAAS;AAGpC;KAjBgB","debugId":null}},
    {"offset": {"line": 3354, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/generator/generateMeshComponent.tsx"],"sourcesContent":["import { CPPMesh } from '@/templates/mesh/cpp';\nimport { CSharpMesh } from '@/templates/mesh/csharp';\nimport { DartMesh } from '@/templates/mesh/dart';\nimport { GoMesh } from '@/templates/mesh/go';\nimport { JavaMesh } from '@/templates/mesh/java';\nimport { JavascriptMesh } from '@/templates/mesh/javascript';\nimport { KotlinMesh } from '@/templates/mesh/kotlin';\nimport { PHPMesh } from '@/templates/mesh/php';\nimport { PythonMesh } from '@/templates/mesh/python';\nimport { RMesh } from '@/templates/mesh/r';\nimport { RubyMesh } from '@/templates/mesh/ruby';\nimport { RustMesh } from '@/templates/mesh/rust';\nimport { ScalaMesh } from '@/templates/mesh/scala';\nimport { SwiftMesh } from '@/templates/mesh/swift';\nimport { TypescriptMesh } from '@/templates/mesh/typescript';\nimport { LanguageId } from '@/types/constant';\nimport * as THREE from 'three';\n\nexport default function generateMeshComponent(\n  meshName: string,\n  _geometry: THREE.BufferGeometry,\n  displayMode: string,\n  languageId: LanguageId\n): string {\n  switch (languageId) {\n    case \"typescript\":\n      return TypescriptMesh(meshName);\n    case \"javascript\":\n      return JavascriptMesh(meshName);\n    case \"python\":\n      return PythonMesh(meshName); \n    case \"java\":\n      return JavaMesh(meshName);\n    case \"cpp\":\n      return CPPMesh(meshName);\n    case \"csharp\":\n      return CSharpMesh(meshName);\n    case \"php\":\n      return PHPMesh(meshName);\n    case \"ruby\":\n      return RubyMesh(meshName);\n    case \"scala\":\n      return ScalaMesh(meshName);\n    case \"kotlin\":\n      return KotlinMesh(meshName);\n    case \"dart\":\n      return DartMesh(meshName);\n    case \"r\":\n      return RMesh(meshName);\n    case \"go\":\n      return GoMesh(meshName);\n    case \"swift\":\n      return SwiftMesh(meshName);\n    case \"rust\":\n      return RustMesh(meshName);\n    default:\n      // Fallback to TypeScript for unsupported languages\n      return generateMeshComponent(\n        meshName,\n        _geometry,\n        displayMode,\n        \"typescript\"\n      );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAIe,SAAS,sBACtB,QAAgB,EAChB,SAA+B,EAC/B,WAAmB,EACnB,UAAsB;IAEtB,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE;QACxB,KAAK;YACH,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE;QACxB,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE;QACpB,KAAK;YACH,OAAO,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD,EAAE;QAClB,KAAK;YACH,OAAO,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD,EAAE;QACjB,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE;QACpB,KAAK;YACH,OAAO,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD,EAAE;QACjB,KAAK;YACH,OAAO,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD,EAAE;QAClB,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE;QACnB,KAAK;YACH,OAAO,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE;QACpB,KAAK;YACH,OAAO,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD,EAAE;QAClB,KAAK;YACH,OAAO,CAAA,GAAA,yHAAA,CAAA,QAAK,AAAD,EAAE;QACf,KAAK;YACH,OAAO,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD,EAAE;QAChB,KAAK;YACH,OAAO,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE;QACnB,KAAK;YACH,OAAO,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD,EAAE;QAClB;YACE,mDAAmD;YACnD,OAAO,sBACL,UACA,WACA,aACA;IAEN;AACF","debugId":null}},
    {"offset": {"line": 3433, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/lib/generator/generateProjectStructure.tsx"],"sourcesContent":["\nimport * as THREE from \"three\";\nimport { GLTF } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport type {\n  MeshData,\n  MaterialData,\n  ProjectStructure,\n  GeometryData,\n} from \"@/types/glb-convertor\";\nimport generateExamplePage from \"./generateExamplePage\";\nimport { LanguageId, LANGUAGES } from \"@/types/constant\";\nimport { getLanguageSpecificName } from \"../functions/getLanguageSpacificName\";\nimport { sanitizeName } from \"../functions/sanitizeName\";\nimport generateGeometryFile from \"./generateGeometryFile\";\nimport generateIndexComponent from \"./generateIndexComponent\";\nimport generateMaterialComponent from \"./generateMaterialComponent\";\nimport generateMeshComponent from \"./generateMeshComponent\";\n\n\nexport default function generateProjectStructure(\n  gltf: GLTF,\n  componentName: string,\n  displayMode: string = \"original\",\n  languageId: LanguageId = \"typescript\"\n): ProjectStructure {\n  const lang = LANGUAGES[languageId];\n  const meshes: MeshData[] = [];\n  const materials: MaterialData[] = [];\n  const geometries: GeometryData[] = [];\n  let totalVertices = 0;\n  let totalTriangles = 0;\n\n  gltf.scene.traverse((object: any) => {\n    if (object.isMesh) {\n      const mesh = object as THREE.Mesh;\n      const geometry = mesh.geometry;\n      totalVertices += geometry.attributes.position.count;\n      if (geometry.index) {\n        totalTriangles += geometry.index.count / 3;\n      } else {\n        totalTriangles += geometry.attributes.position.count / 3;\n      }\n\n      const meshName = mesh.name || `Mesh_${meshes.length}`;\n      const safeMeshName = sanitizeName(meshName);\n      const meshComponentName = getLanguageSpecificName(\n        safeMeshName,\n        languageId\n      );\n\n      const geometryFile = generateGeometryFile(\n        meshComponentName,\n        geometry,\n        languageId\n      );\n      geometries.push({\n        name: meshComponentName,\n        content: geometryFile,\n        originalName: meshName,\n      });\n\n      const meshComponent = generateMeshComponent(\n        meshComponentName,\n        geometry,\n        displayMode,\n        languageId\n      );\n      meshes.push({\n        name: meshComponentName,\n        content: meshComponent,\n        originalName: meshName,\n      });\n\n      const material = Array.isArray(mesh.material)\n        ? mesh.material[0]\n        : mesh.material;\n      const materialName = material.name || `Material_${materials.length}`;\n      const safeMaterialName = sanitizeName(materialName);\n      const materialComponentName = getLanguageSpecificName(\n        safeMaterialName,\n        languageId\n      );\n\n      // Extract geometry attributes\n      const hasNormals = !!geometry.attributes.normal;\n      const hasUvs = !!geometry.attributes.uv;\n\n      // Only add the material if it doesn't already exist\n      if (!materials.some((m) => m.name === materialComponentName)) {\n        const materialComponent = generateMaterialComponent(\n          materialComponentName,\n          material,\n          displayMode,\n          languageId,\n          hasNormals,\n          hasUvs\n        );\n\n        materials.push({\n          name: materialComponentName,\n          content: materialComponent,\n          originalName: materialName,\n        });\n      }\n    }\n  });\n\n  const componentComponentName = getLanguageSpecificName(\n    sanitizeName(componentName),\n    languageId\n  );\n  const indexContent = generateIndexComponent(\n    componentComponentName,\n    meshes,\n    materials,\n    displayMode,\n    languageId\n  );\n  const examplePageContent = generateExamplePage(\n    componentComponentName,\n    languageId\n  );\n\n  return {\n    componentName: componentComponentName,\n    indexContent,\n    examplePageContent,\n    meshes,\n    geometries,\n    materials,\n    totalVertices,\n    totalTriangles,\n  };\n}"],"names":[],"mappings":";;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAGe,SAAS,yBACtB,IAAU,EACV,aAAqB;QACrB,cAAA,iEAAsB,YACtB,aAAA,iEAAyB;IAEzB,MAAM,OAAO,oHAAA,CAAA,YAAS,CAAC,WAAW;IAClC,MAAM,SAAqB,EAAE;IAC7B,MAAM,YAA4B,EAAE;IACpC,MAAM,aAA6B,EAAE;IACrC,IAAI,gBAAgB;IACpB,IAAI,iBAAiB;IAErB,KAAK,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnB,IAAI,OAAO,MAAM,EAAE;YACjB,MAAM,OAAO;YACb,MAAM,WAAW,KAAK,QAAQ;YAC9B,iBAAiB,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK;YACnD,IAAI,SAAS,KAAK,EAAE;gBAClB,kBAAkB,SAAS,KAAK,CAAC,KAAK,GAAG;YAC3C,OAAO;gBACL,kBAAkB,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK,GAAG;YACzD;YAEA,MAAM,WAAW,KAAK,IAAI,IAAI,AAAC,QAAqB,OAAd,OAAO,MAAM;YACnD,MAAM,eAAe,CAAA,GAAA,mIAAA,CAAA,eAAY,AAAD,EAAE;YAClC,MAAM,oBAAoB,CAAA,GAAA,8IAAA,CAAA,0BAAuB,AAAD,EAC9C,cACA;YAGF,MAAM,eAAe,CAAA,GAAA,4IAAA,CAAA,UAAoB,AAAD,EACtC,mBACA,UACA;YAEF,WAAW,IAAI,CAAC;gBACd,MAAM;gBACN,SAAS;gBACT,cAAc;YAChB;YAEA,MAAM,gBAAgB,CAAA,GAAA,6IAAA,CAAA,UAAqB,AAAD,EACxC,mBACA,UACA,aACA;YAEF,OAAO,IAAI,CAAC;gBACV,MAAM;gBACN,SAAS;gBACT,cAAc;YAChB;YAEA,MAAM,WAAW,MAAM,OAAO,CAAC,KAAK,QAAQ,IACxC,KAAK,QAAQ,CAAC,EAAE,GAChB,KAAK,QAAQ;YACjB,MAAM,eAAe,SAAS,IAAI,IAAI,AAAC,YAA4B,OAAjB,UAAU,MAAM;YAClE,MAAM,mBAAmB,CAAA,GAAA,mIAAA,CAAA,eAAY,AAAD,EAAE;YACtC,MAAM,wBAAwB,CAAA,GAAA,8IAAA,CAAA,0BAAuB,AAAD,EAClD,kBACA;YAGF,8BAA8B;YAC9B,MAAM,aAAa,CAAC,CAAC,SAAS,UAAU,CAAC,MAAM;YAC/C,MAAM,SAAS,CAAC,CAAC,SAAS,UAAU,CAAC,EAAE;YAEvC,oDAAoD;YACpD,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK,wBAAwB;gBAC5D,MAAM,oBAAoB,CAAA,GAAA,iJAAA,CAAA,UAAyB,AAAD,EAChD,uBACA,UACA,aACA,YACA,YACA;gBAGF,UAAU,IAAI,CAAC;oBACb,MAAM;oBACN,SAAS;oBACT,cAAc;gBAChB;YACF;QACF;IACF;IAEA,MAAM,yBAAyB,CAAA,GAAA,8IAAA,CAAA,0BAAuB,AAAD,EACnD,CAAA,GAAA,mIAAA,CAAA,eAAY,AAAD,EAAE,gBACb;IAEF,MAAM,eAAe,CAAA,GAAA,8IAAA,CAAA,UAAsB,AAAD,EACxC,wBACA,QACA,WACA,aACA;IAEF,MAAM,qBAAqB,CAAA,GAAA,2IAAA,CAAA,UAAmB,AAAD,EAC3C,wBACA;IAGF,OAAO;QACL,eAAe;QACf;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 3526, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/components/errortoast.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { AlertCircle, X } from \"lucide-react\";\n\nexport default function ErrorToast({ message }: { message: string }) {\n  const [show, setShow] = useState(true);\n  const [closing, setClosing] = useState(false);\n\n  const handleClose = () => {\n    setClosing(true);\n    setTimeout(() => setShow(false), 300); // matches animation duration\n  };\n\n  if (!show) return null;\n\n  return (\n    <div\n      className={`fixed top-4 right-4 z-50 ${\n        closing ? \"animate-slideOut\" : \"animate-slideIn\"\n      }`}\n    >\n      <div className=\"flex items-center gap-2 rounded-xl border border-red-500/30 bg-red-600/10 px-4 py-2 shadow-lg backdrop-blur-sm\">\n        <AlertCircle className=\"h-4 w-4 text-red-400\" />\n        <span className=\"text-sm text-white\">{message}</span>\n        <button\n          onClick={handleClose}\n          className=\"ml-2 p-1 rounded-full hover:bg-red-500/50 transition\"\n        >\n          <X className=\"h-4 w-4 text-white\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;;;AAEe,SAAS,WAAW,KAAgC;QAAhC,EAAE,OAAO,EAAuB,GAAhC;;IACjC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,cAAc;QAClB,WAAW;QACX,WAAW,IAAM,QAAQ,QAAQ,MAAM,6BAA6B;IACtE;IAEA,IAAI,CAAC,MAAM,OAAO;IAElB,qBACE,6LAAC;QACC,WAAW,AAAC,4BAEX,OADC,UAAU,qBAAqB;kBAGjC,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC,uNAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;8BACvB,6LAAC;oBAAK,WAAU;8BAAsB;;;;;;8BACtC,6LAAC;oBACC,SAAS;oBACT,WAAU;8BAEV,cAAA,6LAAC,+LAAA,CAAA,IAAC;wBAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;AAKvB;GA7BwB;KAAA","debugId":null}},
    {"offset": {"line": 3607, "column": 0}, "map": {"version":3,"sources":["file:///Users/nitishkumar/Downloads/gltf2code/app/glb-convertor/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment, Html } from '@react-three/drei';\nimport { Download, Upload, Eye, CodeIcon, Loader2, AlertCircle, FileIcon, FolderIcon, Layout, Terminal } from 'lucide-react';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport JSZip from 'jszip';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { saveAs } from 'file-saver';\nimport type { ProjectStructure } from '@/types/glb-convertor';\nimport UploadButton from '@/components/upload-button';\nimport { LanguageId, LANGUAGES } from '@/types/constant';\nimport CodeEditor from '@/components/code-editor';\nimport LanguageSelector from '@/components/language-selector';\nimport FileTree from '@/components/file-tree';\nimport ModelPreview from '@/components/model-preview';\nimport generateProjectStructure from '@/lib/generator/generateProjectStructure';\nimport ErrorToast from '@/components/errortoast';\n\nexport default function GLBConverter() {\n  const [file, setFile] = useState<File | null>(null);\n  const [modelUrl, setModelUrl] = useState('');\n  const [projectStructure, setProjectStructure] = useState<ProjectStructure | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState('');\n  const [activeTab, setActiveTab] = useState<'upload' | 'preview' | 'code'>('upload');\n  const [gltfData, setGltfData] = useState<any>(null);\n  const [isDragging, setIsDragging] = useState(false);\n\n  // Display options\n  const [displayMode, setDisplayMode] = useState<'original' | 'wireframe' | 'solid' | 'normals' | 'depth' | 'points'>('original');\n  const [autoRotate, setAutoRotate] = useState(true);\n  const [showGrid, setShowGrid] = useState(false);\n  const [showAxes, setShowAxes] = useState(false);\n\n  const [componentName, setComponentName] = useState('Model');\n  const [selectedLanguage, setSelectedLanguage] = useState<LanguageId>('typescript');\n\n  const [expandedFolders, setExpandedFolders] = useState({\n    components: true,\n    componentName: true,\n    geometries: false,\n    meshes: true,\n    materials: false,\n    app: true,\n    modelPage: true,\n  });\n\n  const [activeFile, setActiveFile] = useState<string | null>('index');\n  const [currentFileContent, setCurrentFileContent] = useState('');\n\n  useEffect(() => {\n    if (projectStructure) {\n      setCurrentFileContent(projectStructure.indexContent);\n    }\n  }, [projectStructure]);\n\n  const toggleFolder = (folder: keyof typeof expandedFolders) => {\n    setExpandedFolders((prev) => ({\n      ...prev,\n      [folder]: !prev[folder],\n    }));\n  };\n\n  const handleFileSelect = (path: string, content: string) => {\n    setActiveFile(path);\n    setCurrentFileContent(content);\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const uploadedFile = event.target.files?.[0];\n    if (uploadedFile && uploadedFile.name.endsWith('.glb')) {\n      setFile(uploadedFile);\n      setError('');\n      setIsLoading(true);\n      setProgress(0);\n      try {\n        // Create object URL for preview\n        const url = URL.createObjectURL(uploadedFile);\n        setModelUrl(url);\n\n        // Load GLTF with progress tracking for large files\n        await loadGLTFWithProgress(url, uploadedFile);\n\n        // Generate component name from filename\n        const name = uploadedFile.name.replace('.glb', '').replace(/[^a-zA-Z0-9]/g, '');\n        const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n        setComponentName(capitalizedName);\n\n        setActiveTab('preview');\n      } catch (err) {\n        console.error('Error loading GLTF', err);\n        setError('Error processing GLB file. The file may be too large or corrupted.');\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setError('Please upload a valid .glb file');\n    }\n  };\n\n  const loadGLTFWithProgress = async (url: string, _file: File): Promise<void> => {\n    setIsProcessing(true);\n    setProgress(0);\n    return new Promise<void>((resolve, reject) => {\n      try {\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\n\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n\n        xhr.onload = function () {\n          if (xhr.status === 200) {\n            try {\n              const loader = new GLTFLoader();\n              loader.setDRACOLoader(dracoLoader);\n              loader.parse(\n                xhr.response,\n                '',\n                (gltf: any) => {\n                  setGltfData(gltf);\n                  const structure = generateProjectStructure(gltf, componentName, displayMode, selectedLanguage);\n                  setProjectStructure(structure);\n                  setIsProcessing(false);\n                  resolve();\n                },\n                (error: any) => {\n                  console.error('Error parsing GLTF', error);\n                  setIsProcessing(false);\n                  reject(error);\n                }\n              );\n            } catch (parseError) {\n              console.error('Error parsing GLTF data', parseError);\n              setIsProcessing(false);\n              reject(parseError);\n            }\n          } else {\n            reject(new Error(`Failed to load file: ${xhr.statusText}`));\n          }\n        };\n\n        xhr.onprogress = function (event) {\n          if (event) {\n            // keep TS happy:\n          }\n        };\n\n        xhr.onprogress = function (event) {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            setProgress(percentComplete);\n          }\n        };\n\n        xhr.onerror = function () {\n          reject(new Error('Network error occurred while loading the file'));\n        };\n\n        xhr.send();\n      } catch (err) {\n        setIsProcessing(false);\n        reject(err);\n      }\n    });\n  };\n\n  // Regenerate code when language/display/component changes and tab is Code\n  useEffect(() => {\n    if (gltfData && componentName && activeTab === 'code') {\n      setIsProcessing(true);\n      setProgress(0);\n      try {\n        const structure = generateProjectStructure(gltfData, componentName, displayMode, selectedLanguage);\n        setProjectStructure(structure);\n        setProgress(100);\n      } catch (err) {\n        console.error('Error regenerating project structure', err);\n        setError('Failed to regenerate project structure for the selected language');\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  }, [selectedLanguage, gltfData, componentName, displayMode, activeTab]);\n\n  const downloadZip = (includeExamplePage: boolean = false) => {\n    if (!projectStructure) return;\n    setIsProcessing(true);\n    try {\n      const zip = new JSZip();\n      const lang = LANGUAGES.find((l) => l.id === selectedLanguage);\n      if (!lang) return;\n\n      // Create folder structure\n      const componentFolder = zip.folder(`components/${componentName}`);\n      const meshesFolder = componentFolder?.folder('meshes');\n      const geometriesFolder = componentFolder?.folder('geometries');\n      const materialsFolder = componentFolder?.folder('materials');\n\n      // Add index file\n      componentFolder?.file(`index.${lang.extension}`, projectStructure.indexContent);\n\n      // Add geometry files\n      projectStructure.geometries?.forEach((geometry) => {\n        geometriesFolder?.file(`${geometry.name}Geometry.${lang.geometryExtension}`, geometry.content);\n      });\n\n      // Add mesh files\n      projectStructure.meshes.forEach((mesh) => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n\n      // Add material files\n      projectStructure.materials.forEach((material) => {\n        materialsFolder?.file(`${material.name}.${lang.extension}`, material.content);\n      });\n\n      // Add example page if requested\n      if (includeExamplePage) {\n        const appFolder = zip.folder('app');\n        const modelPageFolder = appFolder?.folder(`${componentName.toLowerCase()}-page`);\n        modelPageFolder?.file(`page.${lang.extension}`, projectStructure.examplePageContent);\n      }\n\n      // Generate and download zip\n      zip.generateAsync({ type: 'blob' }).then((content) => {\n        const suffix = includeExamplePage ? '-with-example' : '';\n        saveAs(content, `${componentName}-${selectedLanguage}${suffix}.zip`);\n      });\n    } catch (err) {\n      console.error('Error generating ZIP', err);\n      setError('Failed to generate ZIP file. The model might be too large.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadCurrentView = () => {\n    if (!gltfData) return;\n    setIsProcessing(true);\n    try {\n      const structure = generateProjectStructure(gltfData, componentName, displayMode, selectedLanguage);\n      const zip = new JSZip();\n      const lang = LANGUAGES.find((l) => l.id === selectedLanguage);\n      if (!lang) return;\n\n      const componentFolder = zip.folder(`components/${componentName}-${displayMode}`);\n      const meshesFolder = componentFolder?.folder('meshes');\n      const geometriesFolder = componentFolder?.folder('geometries');\n      const materialsFolder = componentFolder?.folder('materials');\n\n      componentFolder?.file(`index.${lang.extension}`, structure.indexContent);\n\n      structure.geometries?.forEach((geometry) => {\n        geometriesFolder?.file(`${geometry.name}Geometry.${lang.geometryExtension}`, geometry.content);\n      });\n\n      structure.meshes.forEach((mesh) => {\n        meshesFolder?.file(`${mesh.name}.${lang.extension}`, mesh.content);\n      });\n\n      structure.materials.forEach((material) => {\n        materialsFolder?.file(`${material.name}.${lang.extension}`, material.content);\n      });\n\n      const appFolder = zip.folder('app');\n      const modelPageFolder = appFolder?.folder(`${componentName.toLowerCase()}-${displayMode}-page`);\n      modelPageFolder?.file(`page.${lang.extension}`, structure.examplePageContent);\n\n      zip.generateAsync({ type: 'blob' }).then((content) => {\n        saveAs(content, `${componentName}-${displayMode}-${selectedLanguage}.zip`);\n      });\n    } catch (err) {\n      console.error('Error generating ZIP for current view', err);\n      setError(`Failed to generate ZIP for ${displayMode} view. The model might be too large.`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadModel = () => {\n    if (!file) return;\n    const url = URL.createObjectURL(file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const langExt = useMemo(() => LANGUAGES.find((l) => l.id === selectedLanguage)?.extension || 'tsx', [selectedLanguage]);\n\n  return (\n    <div className=\"bg-[#0B0B0F] text-slate-100 w-full h-auto md:h-full\">\n      {/* Top bar */}\n      <header className=\"sticky top-0 z-40 border-b border-white/10 bg-[#0B0B0F]/70 backdrop-blur\">\n        <div className=\"w-full px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"font-semibold tracking-wide text-slate-200\">GLB2CODE</span>\n          </div>\n          <nav className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setActiveTab('upload')}\n              className={`px-3 py-1.5 rounded-md text-sm flex items-center gap-1 border ${\n                activeTab === 'upload'\n                  ? 'border-fuchsia-500/30 bg-fuchsia-500/10 text-fuchsia-200'\n                  : 'border-white/5 hover:border-white/10 text-slate-300 hover:text-white'\n              }`}\n            >\n              <Upload className=\"h-4 w-4\" />\n              <span className=' hidden md:block'>Upload</span>\n            </button>\n            <button\n              onClick={() => setActiveTab('preview')}\n              disabled={!file}\n              className={`px-3 py-1.5 rounded-md text-sm flex items-center gap-1 border disabled:opacity-50 ${\n                activeTab === 'preview' && file\n                  ? 'border-fuchsia-500/30 bg-fuchsia-500/10 text-fuchsia-200'\n                  : 'border-white/5 hover:border-white/10 text-slate-300 hover:text-white'\n              }`}\n            >\n              <Eye className=\"h-4 w-4\" />\n              <span className='hidden md:block'>Preview</span>\n            </button>\n            <button\n              onClick={() => setActiveTab('code')}\n              disabled={!projectStructure}\n              className={`px-3 py-1.5 rounded-md text-sm flex items-center gap-1 border disabled:opacity-50 ${\n                activeTab === 'code' && projectStructure\n                  ? 'border-fuchsia-500/30 bg-fuchsia-500/10 text-fuchsia-200'\n                  : 'border-white/5 hover:border-white/10 text-slate-300 hover:text-white'\n              }`}\n            >\n              <CodeIcon className=\"h-4 w-4\" />\n              <span className='hidden md:block'>Code</span>\n            </button>\n          </nav>\n        </div>\n      </header>\n{error && (\n  <ErrorToast message={error}/>\n)}\n\n\n      {/* Main */}\n<main className=\"flex flex-col flex-1 w-full px-4 py-6 h-[93%] \">\n        <div className=\"grid grid-cols-12 gap-4 h-full\">\n          {/* Sidebar */}\n          <aside className=\"col-span-12 md:col-span-3 xl:col-span-2 flex flex-col rounded-lg border border-white/10 bg-white/[0.02]\">\n            <div className=\"px-3 py-3 border-b border-white/10\">\n              <h2 className=\"text-xs uppercase tracking-wider text-slate-400 flex items-center\">\n                <FolderIcon className=\"h-4 w-4 mr-2 text-amber-400\" />\n                Explorer\n              </h2>\n            </div>\n\n            {activeTab === 'code' && projectStructure ? (\n              <div className=\"flex-1 overflow-y-auto px-1 py-2\">\n                <FileTree\n                  projectStructure={projectStructure}\n                  selectedLanguage={selectedLanguage}\n                  onSelectFile={handleFileSelect}\n                  expandedFolders={expandedFolders}\n                  toggleFolder={toggleFolder as unknown as (folder: string) => void}\n                  activeFile={activeFile}\n                  componentName={componentName}\n                />\n              </div>\n            ) : (\n              <div className=\"flex-1 overflow-y-auto p-4\">\n                <div className=\"text-slate-400/80 text-sm space-y-3\">\n                  {activeTab === 'upload' ? (\n                    <div className=\"space-y-2\">\n                      <p>Upload a GLB file to get started.</p>\n                      <p>Supported file: .glb</p>\n                      <p className=\"text-amber-300\">\n                        {'If you have a different 3D model format (like .obj, .fbx, .stl), please convert it to '}\n                        <strong>.glb</strong>\n                        {' before uploading.'}\n                      </p>\n                      <UploadButton onClick={() => window.open('https://imagetostl.com/convert/file/obj/to/glb')} />\n                    </div>\n                  ) : activeTab === 'preview' ? (\n                    <div className=\"space-y-2\">\n                      <p>Preview your 3D model with different display modes.</p>\n                      <p>Use the controls to rotate, zoom, and pan.</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <p>Select a file from the project structure to view its code.</p>\n                      <p>Use the language selector to switch between programming languages.</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            <div className=\"px-3 py-2 border-t border-white/10\">\n              <div className=\"text-xs text-slate-500\">\n                {activeTab === 'code' && projectStructure ? (\n                  <div className=\"flex items-center\">\n                    <FolderIcon className=\"h-4 w-4 mr-2 text-amber-400\" />\n                    <span className=\"overflow-hidden whitespace-nowrap text-ellipsis\">{componentName}</span>\n                  </div>\n                ) : (\n                  <div>No project loaded</div>\n                )}\n              </div>\n            </div>\n          </aside>\n          \n          {/* Content */}\n          <section className=\"col-span-12 md:col-span-9 xl:col-span-10 h-full\">\n            {/* Upload */}\n            {activeTab === 'upload' && (\n              <div className=\"w-full h-full flex flex-col\">\n                <div className=\"rounded-xl border border-white/10 bg-white/[0.02] p-8 h-full flex flex-col\">\n                  <div\n                    className={`rounded-lg border-2 border-dashed p-12 text-center transition-colors flex flex-col justify-center items-center h-full ${\n                      isDragging ? 'border-fuchsia-500 bg-fuchsia-500/10' : 'border-white/10 hover:border-fuchsia-500/50'\n                    }`}\n                    onDragOver={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      setIsDragging(true);\n                    }}\n                    onDragLeave={() => setIsDragging(false)}\n                    onDrop={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      setIsDragging(false);\n                      const droppedFile = e.dataTransfer.files?.[0];\n                      if (droppedFile && droppedFile.name.endsWith('.glb')) {\n                        const fakeEvent = { target: { files: [droppedFile] } } as unknown as React.ChangeEvent<HTMLInputElement>;\n                        handleFileUpload(fakeEvent);\n                      } else {\n                        setError('Please drop a valid .glb file');\n                      }\n                    }}\n                  >\n                    <Upload className=\"h-12 w-12 text-slate-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-slate-200 mb-2\">Upload your GLB model</h3>\n                    <p className=\"text-slate-400 mb-6\">Drop your .glb file here or click to browse</p>\n                    <input\n                      type=\"file\"\n                      accept=\".glb\"\n                      onChange={handleFileUpload}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                      disabled={isLoading}\n                    />\n                    <label\n                      htmlFor=\"file-upload\"\n                      className={`inline-block cursor-pointer rounded-md bg-gradient-to-tr from-fuchsia-600 to-indigo-600 px-4 py-2 text-white shadow transition-colors ${\n                        isLoading ? 'opacity-60 cursor-not-allowed' : 'hover:from-fuchsia-500 hover:to-indigo-500'\n                      }`}\n                    >\n                      {isLoading ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 inline mr-2 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        'Choose File'\n                      )}\n                    </label>\n                  </div>\n\n                  {(isLoading || isProcessing) && (\n                    <div className=\"mt-6\">\n                      <div className=\"mb-1 flex justify-between\">\n                        <span className=\"text-slate-300 text-sm\">{isProcessing ? 'Processing model...' : 'Loading file...'}</span>\n                        <span className=\"text-slate-300 text-sm\">{Math.round(progress)}%</span>\n                      </div>\n                      <div className=\"h-2 w-full rounded bg-white/10 overflow-hidden\">\n                        <div\n                          className=\"h-2 rounded bg-gradient-to-r from-fuchsia-500 to-indigo-500 transition-all duration-300\"\n                          style={{ width: `${progress}%` }}\n                        />\n                      </div>\n                      <p className=\"text-slate-500 text-xs mt-2\">\n                        {progress < 100 ? 'Loading large model. This may take a few moments...' : 'Optimizing model data for transpilation...'}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Preview */}\n            {activeTab === 'preview' && modelUrl && (\n              <div className=\"rounded-xl border border-white/10 bg-white/[0.02] p-4\">\n                <div className=\"mb-4 flex flex-col lg:flex-row items-start lg:items-center justify-between gap-3\">\n                  <h3 className=\"text-lg font-medium text-slate-200\">3D Model Preview</h3>\n                  <div className=\"flex flex-wrap items-center gap-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <label className=\"text-sm text-slate-300\">Display Mode:</label>\n                      <select\n                        value={displayMode}\n                        onChange={(e) => setDisplayMode(e.target.value as any)}\n                        className=\"rounded-md border border-white/10 bg-[#0E0E13] px-2 py-1 text-sm text-slate-200 outline-none focus:border-fuchsia-500\"\n                      >\n                        <option value=\"original\">Original</option>\n                        <option value=\"wireframe\">Wireframe</option>\n                        <option value=\"solid\">Solid Color</option>\n                        <option value=\"normals\">Normals</option>\n                        <option value=\"depth\">Depth</option>\n                        <option value=\"points\">Point Cloud</option>\n                      </select>\n                    </div>\n\n                    <div className=\"flex items-center gap-4\">\n                      <label className=\"flex items-center gap-2 text-sm text-slate-300\">\n                        <input\n                          type=\"checkbox\"\n                          checked={autoRotate}\n                          onChange={(e) => setAutoRotate(e.target.checked)}\n                          className=\"h-4 w-4 rounded border-white/10 bg-[#0E0E13] text-fuchsia-500 focus:ring-fuchsia-500\"\n                        />\n                        Auto Rotate\n                      </label>\n                      <label className=\"flex items-center gap-2 text-sm text-slate-300\">\n                        <input\n                          type=\"checkbox\"\n                          checked={showGrid}\n                          onChange={(e) => setShowGrid(e.target.checked)}\n                          className=\"h-4 w-4 rounded border-white/10 bg-[#0E0E13] text-fuchsia-500 focus:ring-fuchsia-500\"\n                        />\n                        Grid\n                      </label>\n                      <label className=\"flex items-center gap-2 text-sm text-slate-300\">\n                        <input\n                          type=\"checkbox\"\n                          checked={showAxes}\n                          onChange={(e) => setShowAxes(e.target.checked)}\n                          className=\"h-4 w-4 rounded border-white/10 bg-[#0E0E13] text-fuchsia-500 focus:ring-fuchsia-500\"\n                        />\n                        Axes\n                      </label>\n                    </div>\n\n                    <button\n                      onClick={downloadCurrentView}\n                      disabled={isProcessing}\n                      className={`inline-flex items-center gap-2 rounded-md border px-3 py-1.5 text-sm transition-colors ${\n                        isProcessing\n                          ? 'opacity-60 cursor-not-allowed border-white/10 bg-white/[0.02] text-slate-300'\n                          : 'border-fuchsia-500/30 bg-fuchsia-500/10 text-fuchsia-200 hover:bg-fuchsia-500/15'\n                      }`}\n                    >\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <FileIcon className=\"h-4 w-4\" />\n                          Download {displayMode} Version\n                        </>\n                      )}\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"mb-4 rounded-lg border border-white/10 bg-[#0E0E13] p-3\">\n                  <p className=\"text-sm text-slate-400\">\n                    {displayMode === 'original' && 'Showing the original model with its materials and textures.'}\n                    {displayMode === 'wireframe' && 'Displaying the model as a wireframe structure showing the mesh geometry.'}\n                    {displayMode === 'solid' && 'Rendering the model with a uniform solid color material.'}\n                    {displayMode === 'normals' && 'Visualizing surface normals with color-coded directions (RGB = XYZ).'}\n                    {displayMode === 'depth' && 'Showing depth information - closer surfaces appear lighter.'}\n                    {displayMode === 'points' && 'Displaying the model as a point cloud of vertices.'}\n                  </p>\n                </div>\n\n                <div className=\"rounded-lg overflow-hidden border border-white/10\" style={{ height: '62vh' }}>\n                  <Canvas camera={{ position: [0, 0, 5], fov: 50 }} gl={{ powerPreference: 'high-performance', antialias: true, alpha: true }}>\n                    <ambientLight intensity={0.5} />\n                    <pointLight position={[10, 10, 10]} />\n                    <pointLight position={[-10, -10, -10]} intensity={0.3} />\n\n                    {modelUrl && (\n                      <React.Suspense\n                        fallback={\n                          <Html center>\n                            <div className=\"rounded bg-black/60 px-3 py-2 text-white\">\n                              <Loader2 className=\"mr-2 inline h-4 w-4 animate-spin\" />\n                              Loading model...\n                            </div>\n                          </Html>\n                        }\n                      >\n                        <ModelPreview url={modelUrl} displayMode={displayMode} autoRotate={autoRotate} />\n                      </React.Suspense>\n                    )}\n\n                    {showGrid && <gridHelper args={[10, 10, '#444444', '#666666']} />}\n                    {showAxes && <axesHelper args={[2]} />}\n\n                    <OrbitControls enableZoom enablePan enableRotate autoRotate={autoRotate} autoRotateSpeed={0.6} minDistance={0.1} maxDistance={100} />\n                    <Environment preset=\"city\" />\n                  </Canvas>\n                </div>\n\n                <p className=\"mt-3 text-center text-sm text-slate-500\">\n                  Use mouse to rotate, zoom, and pan around the model. Try different display modes to analyze the model structure.\n                </p>\n              </div>\n            )}\n\n            {/* Code */}\n            {activeTab === 'code' && projectStructure && (\n              <div className=\"flex h-full flex-col rounded-xl border border-white/10 bg-white/[0.02] p-4\">\n                <div className=\"mb-4 flex flex-col gap-3 lg:flex-row lg:items-center lg:justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <h3 className=\"text-lg font-medium text-slate-200\">\n                      {activeFile\n                        ? (activeFile === 'index'\n                            ? 'index'\n                            : activeFile === 'examplePage'\n                            ? 'page'\n                            : activeFile.includes('geometry')\n                            ? 'Geometry'\n                            : activeFile.includes('mesh')\n                            ? 'Mesh'\n                            : 'Material') + `.${langExt}`\n                        : 'Code Editor'}\n                    </h3>\n                    <LanguageSelector selectedLanguage={selectedLanguage} onChange={setSelectedLanguage} />\n                  </div>\n\n                  <div className=\"flex items-center gap-3 flex-wrap\">\n                    <button\n                      onClick={() => downloadZip(true)}\n                      disabled={isProcessing}\n                      className={`inline-flex items-center gap-2 rounded-md border px-3 py-1.5 text-sm transition-colors ${\n                        isProcessing\n                          ? 'opacity-60 cursor-not-allowed border-white/10 bg-white/[0.02] text-slate-300'\n                          : 'border-fuchsia-500/30 bg-fuchsia-500/10 text-fuchsia-200 hover:bg-fuchsia-500/15'\n                      }`}\n                    >\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <Layout className=\"h-4 w-4\" />\n                          Download Full Project\n                        </>\n                      )}\n                    </button>\n\n                    <button\n                      onClick={() => downloadZip(false)}\n                      disabled={isProcessing}\n                      className={`inline-flex items-center gap-2 rounded-md border px-3 py-1.5 text-sm transition-colors ${\n                        isProcessing\n                          ? 'opacity-60 cursor-not-allowed border-white/10 bg-white/[0.02] text-slate-300'\n                          : 'border-fuchsia-500/30 bg-fuchsia-500/10 text-fuchsia-200 hover:bg-fuchsia-500/15'\n                      }`}\n                    >\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <FileIcon className=\"h-4 w-4\" />\n                          Download Component\n                        </>\n                      )}\n                    </button>\n\n                    <button\n                      onClick={downloadModel}\n                      className=\"inline-flex items-center gap-2 rounded-md border border-emerald-500/30 bg-emerald-500/10 px-3 py-1.5 text-sm text-emerald-200 hover:bg-emerald-500/15\"\n                    >\n                      <Download className=\"h-4 w-4\" />\n                      Download GLB\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"min-h-0 flex-1 overflow-hidden rounded-lg border border-white/10\">\n                  <CodeEditor code={currentFileContent} languageId={selectedLanguage} />\n                </div>\n\n                <div className=\"mt-4 border-t border-white/10 pt-4\">\n                  <div className=\"mb-3 flex items-center justify-between\">\n                    <h4 className=\"flex items-center text-sm font-medium text-slate-200\">\n                      <Terminal className=\"mr-2 h-4 w-4 text-fuchsia-400\" />\n                      Model Statistics\n                    </h4>\n                    <div className=\"flex space-x-2 text-xs text-slate-500\">\n                      <span>{file ? (file.size / 1024 / 1024).toFixed(2) + ' MB' : 'N/A'} • {projectStructure.meshes.length} meshes</span>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-6 text-sm\">\n                    <div className=\"rounded bg-[#0E0E13] p-3 border border-white/10\">\n                      <div className=\"text-slate-500\">Meshes</div>\n                      <div className=\"font-medium text-slate-200\">{projectStructure.meshes.length}</div>\n                    </div>\n                    <div className=\"rounded bg-[#0E0E13] p-3 border border-white/10\">\n                      <div className=\"text-slate-500\">Geometry Files</div>\n                      <div className=\"font-medium text-slate-200\">{projectStructure.geometries?.length || 0}</div>\n                    </div>\n                    <div className=\"rounded bg-[#0E0E13] p-3 border border-white/10\">\n                      <div className=\"text-slate-500\">Materials</div>\n                      <div className=\"font-medium text-slate-200\">{projectStructure.materials.length}</div>\n                    </div>\n                    <div className=\"rounded bg-[#0E0E13] p-3 border border-white/10\">\n                      <div className=\"text-slate-500\">Total Vertices</div>\n                      <div className=\"font-medium text-slate-200\">\n                        {projectStructure.totalVertices.toLocaleString()}\n                      </div>\n                    </div>\n                    <div className=\"rounded bg-[#0E0E13] p-3 border border-white/10\">\n                      <div className=\"text-slate-500\">Total Triangles</div>\n                      <div className=\"font-medium text-slate-200\">\n                        {projectStructure.totalTriangles.toLocaleString()}\n                      </div>\n                    </div>\n                    <div className=\"rounded bg-[#0E0E13] p-3 border border-white/10\">\n                      <div className=\"text-slate-500\">File Size</div>\n                      <div className=\"font-medium text-slate-200\">{file ? (file.size / 1024 / 1024).toFixed(2) + ' MB' : 'N/A'}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </section>\n        </div>\n\n        {/* Status bar */}\n        <div className=\"mt-6 rounded-lg border border-white/10 bg-white/[0.02] px-4 py-2 text-xs text-slate-500\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <span>UTF-8</span>\n              <span>LF</span>\n              <span>{activeTab === 'code' && projectStructure ? `${projectStructure.meshes.length} meshes` : ''}</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <span>{selectedLanguage.toUpperCase()}</span>\n              <span>Line {activeFile ? '1' : ''}, Column {activeFile ? '1' : ''}</span>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}